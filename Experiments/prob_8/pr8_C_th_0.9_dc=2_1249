----------------------------------------
 Input Data in csv files : data/prob_8.csv
Number Rows Data : 64
Number Cols Data : 466
Number Edges_1 : 19513
Number Edges_0 : 10311
----------------------------------------

----------------------------------------------------------------------
***Stats Current Input for matrix 1 in  data/prob_8.csv at level 2 and with model:  max_e_c***
Size of current matrix :  64 * 466 = 29824 ; dec_conq: 2
Prev_lower_bound :  None number input zeros :  19513 ; number input ones :  10311
rho =  0.1 ; delta :  0.0
Input density : 0.346 ; density_threshold: 0.90000
----------------------------------------------------------------------
End Current  Stats
----------------------------------------------------------------------


calling greedy approaches for zero deletion, density= 0.346 density  and density_threshold= 0.900


I am in the while loop with i= 1 density= 0.34572827253218885 and fixed_threshold= 0.9

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 101.681
I solved model name = row_knapsack_problem for iteration i =  1 with obj value: 101.68133971291866 KP time = 0.0 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.02577 - (Local CPU) 0.02577 - (Global CPU) 0.02577

 Solve status: Optimal Objective value: 101.68134 nb_rows 61 nb_cols 466
----------------------------------------
----------------------------------------

        Updated data after iteration: 1 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (61, 466) and density : 0.358 and number of remaining ones : 10182
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(0, 3), (1, 15), (2, 5), (3, 13), (4, 5), (5, 17), (6, 8), (7, 10), (8, 15), (9, 15), (10, 20), (11, 18), (12, 19), (13, 21), (14, 21), (15, 22), (16, 16), (17, 1), (18, 51), (19, 39), (20, 7), (21, 48), (22, 6), (23, 47), (24, 36), (25, 37), (26, 36), (27, 49), (28, 23), (29, 43), (30, 13), (31, 41), (32, 43), (33, 7), (34, 39), (35, 11), (36, 36), (37, 30), (38, 38), (39, 19), (40, 14), (41, 35), (42, 14), (43, 14), (44, 21), (45, 13), (46, 10), (47, 40), (48, 12), (49, 26), (50, 33), (51, 10), (52, 27), (53, 15), (54, 17), (55, 17), (56, 13), (57, 28), (58, 13), (59, 20), (60, 17), (61, 27), (62, 27), (63, 23), (64, 18), (65, 9), (66, 10), (67, 12), (68, 15), (69, 10), (70, 31), (71, 13), (72, 18), (73, 16), (74, 27), (75, 13), (76, 25), (77, 17), (78, 31), (79, 24), (80, 39), (81, 23), (82, 20), (83, 31), (84, 31), (85, 12), (86, 11), (87, 10), (88, 10), (89, 12), (90, 12), (91, 14), (92, 32), (93, 30), (94, 21), (95, 23), (96, 20), (97, 17), (98, 26), (99, 16), (100, 11), (101, 16), (102, 11), (103, 12), (104, 15), (105, 10), (106, 18), (107, 9), (108, 19), (109, 15), (110, 24), (111, 11), (112, 17), (113, 29), (114, 11), (115, 16), (116, 12), (117, 12), (118, 20), (119, 36), (120, 20), (121, 22), (122, 24), (123, 26), (124, 24), (125, 17), (126, 14), (127, 16), (128, 13), (129, 26), (130, 17), (131, 15), (132, 17), (133, 8), (134, 16), (135, 13), (136, 27), (137, 29), (138, 14), (139, 47), (140, 17), (141, 39), (142, 13), (143, 22), (144, 30), (145, 12), (146, 30), (147, 14), (148, 41), (149, 39), (150, 13), (151, 14), (152, 14), (153, 8), (154, 19), (155, 26), (156, 11), (157, 15), (158, 30), (159, 19), (160, 28), (161, 21), (162, 16), (163, 20), (164, 22), (165, 36), (166, 23), (167, 22), (168, 28), (169, 19), (170, 11), (171, 21), (172, 20), (173, 25), (174, 27), (175, 11), (176, 16), (177, 22), (178, 27), (179, 17), (180, 31), (181, 29), (182, 27), (183, 32), (184, 34), (185, 26), (186, 18), (187, 22), (188, 30), (189, 13), (190, 25), (191, 16), (192, 19), (193, 15), (194, 19), (195, 22), (196, 22), (197, 21), (198, 12), (199, 24), (200, 18), (201, 21), (202, 15), (203, 15), (204, 9), (205, 10), (206, 9), (207, 21), (208, 30), (209, 18), (210, 16), (211, 13), (212, 18), (213, 27), (214, 16), (215, 19), (216, 59), (217, 29), (218, 8), (219, 21), (220, 31), (221, 9), (222, 28), (223, 25), (224, 12), (225, 25), (226, 18), (227, 16), (228, 13), (229, 15), (230, 23), (231, 12), (232, 20), (233, 16), (234, 25), (235, 24), (236, 30), (237, 13), (238, 37), (239, 26), (240, 18), (241, 26), (242, 7), (243, 40), (244, 14), (245, 14), (246, 36), (247, 12), (248, 40), (249, 7), (250, 30), (251, 17), (252, 11), (253, 30), (254, 7), (255, 23), (256, 31), (257, 47), (258, 11), (259, 10), (260, 18), (261, 39), (262, 9), (263, 28), (264, 30), (265, 16), (266, 14), (267, 19), (268, 16), (269, 26), (270, 14), (271, 10), (272, 7), (273, 28), (274, 11), (275, 10), (276, 13), (277, 38), (278, 15), (279, 13), (280, 35), (281, 18), (282, 15), (283, 12), (284, 16), (285, 10), (286, 39), (287, 39), (288, 29), (289, 19), (290, 36), (291, 10), (292, 38), (293, 8), (294, 31), (295, 9), (296, 8), (297, 15), (298, 30), (299, 25), (300, 8), (301, 40), (302, 15), (303, 18), (304, 36), (305, 17), (306, 38), (307, 32), (308, 33), (309, 15), (310, 51), (311, 51), (312, 39), (313, 12), (314, 13), (315, 4), (316, 16), (317, 18), (318, 35), (319, 14), (320, 43), (321, 43), (322, 45), (323, 34), (324, 45), (325, 18), (326, 37), (327, 21), (328, 22), (329, 3), (330, 49), (331, 21), (332, 31), (333, 20), (334, 33), (335, 19), (336, 17), (337, 23), (338, 22), (339, 13), (340, 31), (341, 29), (342, 22), (343, 29), (344, 11), (345, 33), (346, 13), (347, 31), (348, 12), (349, 10), (350, 29), (351, 29), (352, 24), (353, 43), (354, 23), (355, 20), (356, 29), (357, 18), (358, 25), (359, 18), (360, 45), (361, 43), (362, 48), (363, 49), (364, 48), (365, 9), (366, 14), (367, 10), (368, 51), (369, 44), (370, 11), (371, 13), (372, 12), (373, 56), (374, 38), (375, 50), (376, 14), (377, 39), (378, 23), (379, 44), (380, 32), (381, 28), (382, 14), (383, 34), (384, 24), (385, 19), (386, 11), (387, 33), (388, 14), (389, 22), (390, 23), (391, 13), (392, 13), (393, 14), (394, 23), (395, 24), (396, 21), (397, 11), (398, 25), (399, 21), (400, 20), (401, 12), (402, 39), (403, 38), (404, 37), (405, 27), (406, 6), (407, 39), (408, 14), (409, 5), (410, 11), (411, 14), (412, 43), (413, 14), (414, 44), (415, 26), (416, 13), (417, 32), (418, 37), (419, 23), (420, 22), (421, 9), (422, 15), (423, 28), (424, 14), (425, 21), (426, 16), (427, 14), (428, 12), (429, 23), (430, 18), (431, 20), (432, 11), (433, 21), (434, 11), (435, 39), (436, 23), (437, 38), (438, 14), (439, 35), (440, 3), (441, 18), (442, 19), (443, 37), (444, 17), (445, 17), (446, 16), (447, 18), (448, 16), (449, 23), (450, 22), (451, 5), (452, 19), (453, 24), (454, 10), (455, 15), (456, 17), (457, 7), (458, 15), (459, 12), (460, 15), (461, 18), (462, 15), (463, 22), (464, 19), (465, 13)]
nb_edges_0 = 18244 rho= 0.1 # of rows = 61 # of columns= 466 total_degree_0= 18244 RHS= 1824.4
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  1 with obj value: 101.68133971291866 KP time = 0.025772916967980564 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01867 - (Local CPU) 0.01867 - (Global CPU) 0.04444

 Solve status: Optimal Objective value: 228.95385 nb_rows 61 nb_cols 432
----------------------------------------
----------------------------------------

        Updated data after iteration: 1 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (61, 432) and density : 0.378 and number of remaining ones : 10182
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.378 density  and density_threshold= 0.900


I am in the while loop with i= 2 density= 0.37758044930176077 and fixed_threshold= 0.9

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 793.907
I solved model name = row_knapsack_problem for iteration i =  2 with obj value: 793.9070422535211 KP time = 0.044442999991588295 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01619 - (Local CPU) 0.01619 - (Global CPU) 0.06063

 Solve status: Optimal Objective value: 793.90704 nb_rows 55 nb_cols 432
----------------------------------------
----------------------------------------

        Updated data after iteration: 2 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (55, 432) and density : 0.383 and number of remaining ones : 9102
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(1, 14), (3, 11), (5, 16), (7, 9), (8, 14), (9, 14), (10, 18), (11, 17), (12, 19), (13, 20), (14, 20), (15, 21), (16, 15), (18, 46), (19, 37), (21, 43), (23, 43), (24, 34), (25, 35), (26, 34), (27, 44), (28, 19), (29, 41), (30, 13), (31, 38), (32, 42), (34, 37), (35, 10), (36, 33), (37, 29), (38, 34), (39, 19), (40, 12), (41, 32), (42, 13), (43, 14), (44, 18), (45, 11), (46, 9), (47, 37), (48, 12), (49, 25), (50, 33), (51, 8), (52, 26), (53, 13), (54, 15), (55, 15), (56, 11), (57, 26), (58, 12), (59, 15), (60, 14), (61, 25), (62, 25), (63, 21), (64, 18), (66, 9), (67, 11), (68, 13), (69, 10), (70, 29), (71, 11), (72, 17), (73, 14), (74, 24), (75, 9), (76, 24), (77, 16), (78, 31), (79, 23), (80, 36), (81, 18), (82, 19), (83, 29), (84, 30), (85, 11), (86, 9), (87, 9), (88, 9), (89, 10), (90, 10), (91, 12), (92, 30), (93, 30), (94, 19), (95, 21), (96, 19), (97, 15), (98, 25), (99, 12), (100, 9), (101, 15), (102, 10), (103, 10), (104, 13), (105, 9), (106, 16), (108, 17), (109, 15), (110, 22), (111, 10), (112, 16), (113, 25), (114, 10), (115, 16), (116, 10), (117, 11), (118, 18), (119, 33), (120, 19), (121, 19), (122, 21), (123, 21), (124, 21), (125, 16), (126, 12), (127, 13), (128, 11), (129, 24), (130, 15), (131, 15), (132, 16), (134, 13), (135, 11), (136, 24), (137, 27), (138, 12), (139, 42), (140, 13), (141, 36), (142, 13), (143, 20), (144, 27), (145, 12), (146, 27), (147, 14), (148, 38), (149, 36), (150, 13), (151, 14), (152, 13), (154, 18), (155, 26), (156, 8), (157, 14), (158, 28), (159, 16), (160, 26), (161, 19), (162, 11), (163, 17), (164, 20), (165, 35), (166, 22), (167, 20), (168, 27), (169, 17), (170, 9), (171, 19), (172, 16), (173, 23), (174, 26), (175, 10), (176, 14), (177, 19), (178, 24), (179, 15), (180, 29), (181, 26), (182, 25), (183, 32), (184, 31), (185, 26), (186, 17), (187, 21), (188, 28), (189, 13), (190, 24), (191, 15), (192, 17), (193, 14), (194, 18), (195, 19), (196, 20), (197, 19), (198, 8), (199, 21), (200, 15), (201, 18), (202, 14), (203, 13), (205, 10), (207, 19), (208, 27), (209, 15), (210, 15), (211, 12), (212, 17), (213, 27), (214, 13), (215, 17), (216, 53), (217, 26), (219, 19), (220, 29), (222, 24), (223, 23), (224, 10), (225, 25), (226, 16), (227, 14), (228, 9), (229, 15), (230, 22), (231, 9), (232, 19), (233, 13), (234, 22), (235, 19), (236, 30), (237, 12), (238, 34), (239, 25), (240, 15), (241, 25), (243, 38), (244, 12), (245, 14), (246, 33), (247, 9), (248, 37), (250, 28), (251, 16), (252, 10), (253, 28), (255, 22), (256, 30), (257, 45), (258, 10), (259, 9), (260, 18), (261, 36), (263, 25), (264, 29), (265, 15), (266, 12), (267, 17), (268, 15), (269, 24), (270, 12), (271, 8), (273, 25), (274, 9), (275, 8), (276, 12), (277, 35), (278, 13), (279, 11), (280, 30), (281, 15), (282, 14), (283, 11), (284, 15), (285, 10), (286, 34), (287, 36), (288, 26), (289, 17), (290, 33), (291, 9), (292, 34), (294, 29), (297, 14), (298, 28), (299, 23), (301, 37), (302, 14), (303, 16), (304, 32), (305, 12), (306, 36), (307, 29), (308, 31), (309, 11), (310, 46), (311, 48), (312, 35), (313, 12), (314, 10), (316, 14), (317, 16), (318, 31), (319, 13), (320, 40), (321, 40), (322, 42), (323, 31), (324, 41), (325, 17), (326, 33), (327, 20), (328, 20), (330, 46), (331, 20), (332, 27), (333, 20), (334, 32), (335, 18), (336, 14), (337, 21), (338, 21), (339, 11), (340, 29), (341, 25), (342, 21), (343, 26), (344, 10), (345, 30), (346, 10), (347, 29), (348, 10), (349, 9), (350, 27), (351, 26), (352, 23), (353, 40), (354, 22), (355, 18), (356, 26), (357, 17), (358, 23), (359, 16), (360, 43), (361, 41), (362, 46), (363, 47), (364, 45), (366, 12), (367, 8), (368, 47), (369, 41), (370, 9), (371, 10), (372, 9), (373, 52), (374, 37), (375, 46), (376, 11), (377, 37), (378, 22), (379, 40), (380, 28), (381, 23), (382, 10), (383, 30), (384, 18), (385, 18), (386, 9), (387, 33), (388, 14), (389, 20), (390, 22), (391, 13), (392, 13), (393, 13), (394, 19), (395, 19), (396, 20), (397, 10), (398, 23), (399, 21), (400, 19), (401, 11), (402, 35), (403, 35), (404, 32), (405, 24), (407, 35), (408, 13), (410, 11), (411, 14), (412, 39), (413, 14), (414, 41), (415, 22), (416, 13), (417, 28), (418, 35), (419, 22), (420, 20), (422, 13), (423, 26), (424, 13), (425, 21), (426, 16), (427, 12), (428, 10), (429, 21), (430, 18), (431, 19), (432, 11), (433, 18), (434, 9), (435, 36), (436, 22), (437, 35), (438, 13), (439, 31), (441, 17), (442, 18), (443, 35), (444, 17), (445, 15), (446, 15), (447, 17), (448, 15), (449, 22), (450, 21), (452, 17), (453, 23), (454, 8), (455, 14), (456, 15), (458, 14), (459, 11), (460, 14), (461, 17), (462, 14), (463, 21), (464, 18), (465, 13)]
nb_edges_0 = 14658 rho= 0.1 # of rows = 55 # of columns= 432 total_degree_0= 14658 RHS= 1465.8000000000002
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  2 with obj value: 793.9070422535211 KP time = 0.06063216598704457 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01787 - (Local CPU) 0.01787 - (Global CPU) 0.07850

 Solve status: Optimal Objective value: 282.95556 nb_rows 55 nb_cols 400
----------------------------------------
----------------------------------------

        Updated data after iteration: 2 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (55, 400) and density : 0.401 and number of remaining ones : 9102
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.401 density  and density_threshold= 0.900


I am in the while loop with i= 3 density= 0.4007727272727273 and fixed_threshold= 0.9

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 729.417
I solved model name = row_knapsack_problem for iteration i =  3 with obj value: 729.4165354330709 KP time = 0.07850470801349729 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01571 - (Local CPU) 0.01571 - (Global CPU) 0.09421

 Solve status: Optimal Objective value: 729.41654 nb_rows 49 nb_cols 400
----------------------------------------
----------------------------------------

        Updated data after iteration: 3 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (49, 400) and density : 0.406 and number of remaining ones : 7959
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(1, 13), (3, 11), (5, 14), (8, 13), (9, 13), (10, 16), (11, 16), (12, 18), (13, 19), (14, 19), (15, 19), (16, 14), (18, 41), (19, 32), (21, 39), (23, 38), (24, 30), (25, 31), (26, 30), (27, 40), (28, 18), (29, 36), (30, 11), (31, 35), (32, 38), (34, 33), (36, 30), (37, 26), (38, 30), (39, 18), (40, 12), (41, 29), (42, 13), (43, 13), (44, 16), (45, 10), (47, 34), (48, 11), (49, 22), (50, 31), (52, 25), (53, 11), (54, 15), (55, 11), (56, 9), (57, 25), (58, 10), (59, 13), (60, 12), (61, 23), (62, 23), (63, 19), (64, 18), (67, 8), (68, 11), (69, 9), (70, 27), (71, 11), (72, 16), (73, 11), (74, 22), (76, 24), (77, 13), (78, 27), (79, 19), (80, 32), (81, 13), (82, 19), (83, 25), (84, 28), (85, 8), (89, 9), (90, 10), (91, 10), (92, 27), (93, 27), (94, 19), (95, 19), (96, 17), (97, 12), (98, 22), (99, 10), (101, 14), (102, 9), (103, 9), (104, 11), (106, 15), (108, 15), (109, 13), (110, 19), (112, 16), (113, 20), (114, 8), (115, 14), (116, 10), (117, 10), (118, 15), (119, 29), (120, 18), (121, 17), (122, 18), (123, 18), (124, 18), (125, 14), (126, 11), (127, 11), (128, 10), (129, 21), (130, 14), (131, 14), (132, 13), (134, 12), (135, 10), (136, 22), (137, 25), (138, 9), (139, 38), (140, 11), (141, 33), (142, 10), (143, 17), (144, 25), (145, 11), (146, 25), (147, 14), (148, 36), (149, 34), (150, 11), (151, 12), (152, 10), (154, 14), (155, 24), (157, 13), (158, 22), (159, 14), (160, 23), (161, 16), (162, 10), (163, 14), (164, 19), (165, 31), (166, 20), (167, 19), (168, 24), (169, 14), (171, 19), (172, 14), (173, 22), (174, 23), (175, 10), (176, 13), (177, 17), (178, 23), (179, 14), (180, 26), (181, 23), (182, 23), (183, 30), (184, 28), (185, 25), (186, 15), (187, 21), (188, 26), (189, 11), (190, 22), (191, 13), (192, 14), (193, 13), (194, 18), (195, 18), (196, 19), (197, 18), (199, 18), (200, 12), (201, 15), (202, 12), (203, 11), (205, 9), (207, 19), (208, 25), (209, 12), (210, 14), (211, 12), (212, 16), (213, 25), (214, 13), (215, 13), (216, 47), (217, 23), (219, 18), (220, 26), (222, 22), (223, 19), (224, 7), (225, 22), (226, 16), (227, 12), (229, 12), (230, 21), (232, 16), (233, 11), (234, 18), (235, 17), (236, 28), (237, 12), (238, 31), (239, 22), (240, 13), (241, 25), (243, 35), (244, 8), (245, 12), (246, 31), (248, 37), (250, 27), (251, 13), (253, 26), (255, 20), (256, 29), (257, 42), (258, 6), (260, 16), (261, 35), (263, 24), (264, 29), (265, 13), (266, 10), (267, 17), (268, 13), (269, 23), (270, 10), (273, 24), (276, 12), (277, 31), (278, 9), (279, 9), (280, 28), (281, 11), (282, 10), (283, 10), (284, 11), (285, 7), (286, 32), (287, 32), (288, 26), (289, 14), (290, 32), (292, 33), (294, 26), (297, 11), (298, 25), (299, 22), (301, 35), (302, 12), (303, 14), (304, 30), (305, 11), (306, 34), (307, 28), (308, 29), (309, 9), (310, 42), (311, 44), (312, 33), (313, 10), (314, 8), (316, 13), (317, 14), (318, 28), (319, 12), (320, 36), (321, 37), (322, 39), (323, 30), (324, 37), (325, 15), (326, 30), (327, 18), (328, 18), (330, 42), (331, 19), (332, 25), (333, 19), (334, 29), (335, 16), (336, 12), (337, 17), (338, 19), (339, 8), (340, 27), (341, 21), (342, 17), (343, 23), (344, 9), (345, 25), (346, 8), (347, 27), (348, 9), (350, 24), (351, 21), (352, 21), (353, 37), (354, 22), (355, 18), (356, 24), (357, 17), (358, 21), (359, 16), (360, 40), (361, 38), (362, 43), (363, 44), (364, 43), (366, 10), (368, 44), (369, 39), (371, 7), (373, 46), (374, 35), (375, 42), (376, 8), (377, 36), (378, 22), (379, 37), (380, 25), (381, 17), (382, 7), (383, 24), (384, 14), (385, 15), (387, 33), (388, 12), (389, 19), (390, 21), (391, 13), (392, 12), (393, 12), (394, 15), (395, 16), (396, 20), (398, 21), (399, 17), (400, 15), (401, 11), (402, 32), (403, 30), (404, 28), (405, 20), (407, 30), (408, 12), (410, 11), (411, 14), (412, 34), (413, 11), (414, 36), (415, 19), (416, 12), (417, 27), (418, 31), (419, 18), (420, 19), (422, 12), (423, 23), (424, 12), (425, 20), (426, 13), (427, 10), (428, 9), (429, 19), (430, 16), (431, 18), (432, 10), (433, 17), (435, 32), (436, 20), (437, 33), (438, 10), (439, 28), (441, 16), (442, 17), (443, 32), (444, 15), (445, 14), (446, 13), (447, 15), (448, 13), (449, 21), (450, 20), (452, 16), (453, 21), (455, 13), (456, 13), (458, 13), (459, 11), (460, 13), (461, 14), (462, 13), (463, 19), (464, 17), (465, 12)]
nb_edges_0 = 11641 rho= 0.1 # of rows = 49 # of columns= 400 total_degree_0= 11641 RHS= 1164.1000000000001
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  3 with obj value: 729.4165354330709 KP time = 0.0942149159964174 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01822 - (Local CPU) 0.01822 - (Global CPU) 0.11243

 Solve status: Optimal Objective value: 241.94872 nb_rows 49 nb_cols 371
----------------------------------------
----------------------------------------

        Updated data after iteration: 3 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (49, 371) and density : 0.424 and number of remaining ones : 7959
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.424 density  and density_threshold= 0.900


I am in the while loop with i= 4 density= 0.42433577204466694 and fixed_threshold= 0.9

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 661.577
I solved model name = row_knapsack_problem for iteration i =  4 with obj value: 661.5774336283187 KP time = 0.11243320803623646 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01700 - (Local CPU) 0.01700 - (Global CPU) 0.12944

 Solve status: Optimal Objective value: 661.57743 nb_rows 44 nb_cols 371
----------------------------------------
----------------------------------------

        Updated data after iteration: 4 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (44, 371) and density : 0.429 and number of remaining ones : 6995
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(1, 10), (3, 10), (5, 12), (8, 12), (9, 11), (10, 13), (11, 13), (12, 16), (13, 17), (14, 17), (15, 16), (16, 12), (18, 38), (19, 30), (21, 36), (23, 35), (24, 28), (25, 29), (26, 29), (27, 37), (28, 15), (29, 32), (30, 9), (31, 34), (32, 35), (34, 31), (36, 28), (37, 24), (38, 28), (39, 14), (40, 11), (41, 26), (42, 12), (43, 12), (44, 14), (45, 8), (47, 30), (48, 9), (49, 21), (50, 28), (52, 23), (53, 10), (54, 11), (55, 11), (57, 23), (58, 10), (59, 11), (60, 10), (61, 23), (62, 18), (63, 17), (64, 18), (68, 10), (70, 26), (71, 8), (72, 14), (73, 9), (74, 21), (76, 21), (77, 12), (78, 23), (79, 17), (80, 31), (81, 12), (82, 19), (83, 25), (84, 24), (90, 9), (92, 25), (93, 25), (94, 17), (95, 15), (96, 17), (97, 12), (98, 20), (99, 8), (101, 12), (104, 11), (106, 13), (108, 12), (109, 11), (110, 17), (112, 13), (113, 18), (115, 13), (116, 10), (117, 10), (118, 14), (119, 25), (120, 16), (121, 14), (122, 16), (123, 17), (124, 17), (125, 12), (126, 9), (127, 10), (128, 8), (129, 18), (130, 13), (131, 14), (132, 11), (134, 10), (135, 10), (136, 21), (137, 24), (139, 34), (140, 10), (141, 30), (142, 8), (143, 16), (144, 23), (145, 9), (146, 23), (147, 13), (148, 33), (149, 30), (150, 9), (151, 11), (152, 9), (154, 14), (155, 22), (157, 13), (158, 20), (159, 12), (160, 23), (161, 14), (162, 10), (163, 13), (164, 18), (165, 30), (166, 19), (167, 16), (168, 23), (169, 11), (171, 19), (172, 12), (173, 20), (174, 22), (175, 9), (176, 11), (177, 15), (178, 22), (179, 12), (180, 24), (181, 21), (182, 23), (183, 28), (184, 26), (185, 22), (186, 12), (187, 20), (188, 24), (189, 10), (190, 20), (191, 10), (192, 12), (193, 13), (194, 18), (195, 17), (196, 17), (197, 16), (199, 17), (200, 11), (201, 13), (202, 11), (203, 10), (207, 17), (208, 23), (209, 11), (210, 11), (211, 10), (212, 14), (213, 23), (214, 11), (215, 11), (216, 42), (217, 21), (219, 17), (220, 24), (222, 20), (223, 15), (225, 18), (226, 15), (227, 11), (229, 12), (230, 19), (232, 14), (233, 10), (234, 15), (235, 16), (236, 26), (237, 11), (238, 29), (239, 19), (240, 11), (241, 23), (243, 32), (245, 12), (246, 29), (248, 34), (250, 25), (251, 11), (253, 24), (255, 19), (256, 27), (257, 40), (260, 15), (261, 32), (263, 22), (264, 27), (265, 13), (266, 10), (267, 15), (268, 13), (269, 20), (270, 9), (273, 22), (276, 11), (277, 28), (280, 23), (281, 10), (282, 8), (284, 9), (286, 29), (287, 29), (288, 24), (289, 13), (290, 30), (292, 30), (294, 23), (297, 9), (298, 23), (299, 20), (301, 30), (302, 11), (303, 11), (304, 27), (305, 10), (306, 32), (307, 25), (308, 27), (310, 39), (311, 41), (312, 31), (313, 10), (316, 11), (317, 12), (318, 26), (319, 9), (320, 35), (321, 36), (322, 38), (323, 29), (324, 36), (325, 13), (326, 27), (327, 15), (328, 16), (330, 39), (331, 16), (332, 23), (333, 18), (334, 28), (335, 14), (336, 9), (337, 16), (338, 16), (340, 23), (341, 19), (342, 16), (343, 22), (345, 23), (347, 24), (350, 22), (351, 20), (352, 18), (353, 34), (354, 18), (355, 16), (356, 23), (357, 15), (358, 19), (359, 15), (360, 38), (361, 35), (362, 39), (363, 39), (364, 40), (366, 9), (368, 40), (369, 37), (373, 41), (374, 32), (375, 39), (377, 34), (378, 21), (379, 35), (380, 24), (381, 15), (383, 22), (384, 13), (385, 13), (387, 30), (388, 11), (389, 16), (390, 19), (391, 12), (392, 9), (393, 11), (394, 14), (395, 15), (396, 19), (398, 17), (399, 15), (400, 15), (401, 11), (402, 28), (403, 27), (404, 25), (405, 17), (407, 26), (408, 10), (410, 11), (411, 13), (412, 30), (413, 10), (414, 33), (415, 16), (416, 10), (417, 25), (418, 27), (419, 18), (420, 17), (422, 10), (423, 21), (424, 11), (425, 19), (426, 13), (427, 10), (429, 17), (430, 15), (431, 15), (433, 17), (435, 30), (436, 17), (437, 30), (438, 8), (439, 25), (441, 14), (442, 15), (443, 29), (444, 13), (445, 11), (446, 11), (447, 13), (448, 11), (449, 18), (450, 17), (452, 14), (453, 19), (455, 11), (456, 12), (458, 11), (459, 10), (460, 11), (461, 12), (462, 11), (463, 16), (464, 15), (465, 9)]
nb_edges_0 = 9329 rho= 0.1 # of rows = 44 # of columns= 371 total_degree_0= 9329 RHS= 932.9000000000001
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  4 with obj value: 661.5774336283187 KP time = 0.12943641596939415 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01804 - (Local CPU) 0.01804 - (Global CPU) 0.14748

 Solve status: Optimal Objective value: 234.26471 nb_rows 44 nb_cols 344
----------------------------------------
----------------------------------------

        Updated data after iteration: 4 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (44, 344) and density : 0.446 and number of remaining ones : 6995
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.446 density  and density_threshold= 0.900


I am in the while loop with i= 5 density= 0.446353065539112 and fixed_threshold= 0.9

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 561.724
I solved model name = row_knapsack_problem for iteration i =  5 with obj value: 561.7241379310345 KP time = 0.14747629093471915 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01498 - (Local CPU) 0.01499 - (Global CPU) 0.16246

 Solve status: Optimal Objective value: 561.72414 nb_rows 39 nb_cols 344
----------------------------------------
----------------------------------------

        Updated data after iteration: 5 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (39, 344) and density : 0.452 and number of remaining ones : 6063
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(1, 7), (3, 7), (5, 9), (8, 10), (9, 9), (10, 9), (11, 9), (12, 13), (13, 14), (14, 14), (15, 13), (16, 8), (18, 34), (19, 27), (21, 32), (23, 31), (24, 25), (25, 26), (26, 26), (27, 33), (28, 13), (29, 28), (31, 32), (32, 31), (34, 28), (36, 27), (37, 22), (38, 26), (39, 13), (40, 10), (41, 25), (42, 11), (43, 11), (44, 12), (47, 26), (49, 21), (50, 26), (52, 21), (53, 8), (54, 7), (55, 10), (57, 21), (58, 9), (59, 10), (60, 9), (61, 21), (62, 16), (63, 14), (64, 18), (68, 10), (70, 25), (72, 12), (74, 19), (76, 20), (77, 11), (78, 20), (79, 14), (80, 30), (81, 10), (82, 19), (83, 24), (84, 21), (92, 23), (93, 23), (94, 16), (95, 13), (96, 16), (97, 11), (98, 19), (101, 10), (104, 10), (106, 11), (108, 12), (109, 9), (110, 13), (112, 11), (113, 17), (115, 12), (116, 10), (117, 9), (118, 13), (119, 20), (120, 14), (121, 12), (122, 14), (123, 13), (124, 15), (125, 11), (127, 9), (129, 17), (130, 12), (131, 13), (132, 9), (134, 8), (135, 9), (136, 18), (137, 22), (139, 31), (140, 10), (141, 27), (143, 15), (144, 21), (146, 21), (147, 12), (148, 30), (149, 26), (151, 9), (154, 12), (155, 21), (157, 10), (158, 20), (159, 12), (160, 23), (161, 12), (162, 9), (163, 13), (164, 16), (165, 28), (166, 19), (167, 16), (168, 22), (169, 9), (171, 18), (172, 11), (173, 17), (174, 20), (176, 10), (177, 13), (178, 21), (179, 11), (180, 22), (181, 20), (182, 22), (183, 24), (184, 25), (185, 21), (186, 10), (187, 18), (188, 23), (189, 8), (190, 20), (191, 8), (192, 11), (193, 12), (194, 17), (195, 14), (196, 14), (197, 16), (199, 16), (200, 10), (201, 10), (202, 8), (203, 8), (207, 16), (208, 20), (209, 11), (210, 10), (211, 9), (212, 10), (213, 21), (214, 9), (215, 10), (216, 38), (217, 18), (219, 15), (220, 21), (222, 19), (223, 13), (225, 17), (226, 11), (227, 10), (229, 11), (230, 17), (232, 12), (233, 9), (234, 13), (235, 16), (236, 22), (237, 9), (238, 27), (239, 19), (240, 10), (241, 21), (243, 30), (245, 10), (246, 27), (248, 32), (250, 24), (251, 9), (253, 23), (255, 18), (256, 25), (257, 36), (260, 14), (261, 31), (263, 21), (264, 25), (265, 12), (267, 15), (268, 9), (269, 18), (273, 19), (276, 9), (277, 26), (280, 21), (281, 7), (286, 26), (287, 27), (288, 20), (289, 11), (290, 27), (292, 27), (294, 21), (298, 22), (299, 19), (301, 26), (302, 11), (303, 9), (304, 25), (305, 7), (306, 30), (307, 23), (308, 24), (310, 35), (311, 38), (312, 28), (313, 8), (316, 9), (317, 11), (318, 25), (320, 34), (321, 35), (322, 36), (323, 27), (324, 33), (325, 12), (326, 24), (327, 14), (328, 13), (330, 35), (331, 14), (332, 22), (333, 15), (334, 25), (335, 12), (337, 14), (338, 15), (340, 23), (341, 15), (342, 14), (343, 19), (345, 20), (347, 22), (350, 19), (351, 17), (352, 18), (353, 32), (354, 18), (355, 16), (356, 21), (357, 15), (358, 17), (359, 13), (360, 36), (361, 33), (362, 35), (363, 36), (364, 36), (368, 36), (369, 35), (373, 38), (374, 30), (375, 36), (377, 30), (378, 20), (379, 33), (380, 22), (381, 11), (383, 18), (384, 9), (385, 11), (387, 29), (388, 10), (389, 14), (390, 16), (391, 11), (393, 10), (394, 12), (395, 14), (396, 18), (398, 16), (399, 13), (400, 12), (401, 11), (402, 26), (403, 25), (404, 22), (405, 16), (407, 23), (410, 8), (411, 10), (412, 25), (413, 8), (414, 28), (415, 14), (416, 7), (417, 24), (418, 24), (419, 15), (420, 16), (422, 10), (423, 18), (424, 11), (425, 17), (426, 10), (427, 9), (429, 16), (430, 13), (431, 14), (433, 17), (435, 27), (436, 16), (437, 28), (439, 24), (441, 11), (442, 12), (443, 25), (444, 12), (445, 8), (446, 8), (447, 10), (448, 7), (449, 15), (450, 14), (452, 11), (453, 16), (455, 8), (456, 9), (458, 8), (460, 8), (461, 10), (462, 8), (463, 13), (464, 12)]
nb_edges_0 = 7353 rho= 0.1 # of rows = 39 # of columns= 344 total_degree_0= 7353 RHS= 735.3000000000001
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  5 with obj value: 561.7241379310345 KP time = 0.16246258188039064 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01711 - (Local CPU) 0.01711 - (Global CPU) 0.17957

 Solve status: Optimal Objective value: 181.59000 nb_rows 39 nb_cols 320
----------------------------------------
----------------------------------------

        Updated data after iteration: 5 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (39, 320) and density : 0.471 and number of remaining ones : 6063
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.471 density  and density_threshold= 0.900


I am in the while loop with i= 6 density= 0.47091346153846153 and fixed_threshold= 0.9

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 485.580
I solved model name = row_knapsack_problem for iteration i =  6 with obj value: 485.579781420765 KP time = 0.17957424884662032 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01552 - (Local CPU) 0.01552 - (Global CPU) 0.19510

 Solve status: Optimal Objective value: 485.57978 nb_rows 35 nb_cols 320
----------------------------------------
----------------------------------------

        Updated data after iteration: 6 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (35, 320) and density : 0.476 and number of remaining ones : 5334
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(5, 8), (8, 9), (9, 7), (10, 7), (11, 7), (12, 10), (13, 11), (14, 11), (15, 10), (18, 31), (19, 25), (21, 30), (23, 29), (24, 24), (25, 25), (26, 25), (27, 30), (28, 10), (29, 25), (31, 30), (32, 29), (34, 26), (36, 26), (37, 22), (38, 25), (39, 10), (40, 8), (41, 23), (42, 8), (43, 8), (44, 11), (47, 24), (49, 19), (50, 24), (52, 20), (55, 10), (57, 19), (58, 9), (59, 10), (60, 7), (61, 20), (62, 13), (63, 12), (64, 15), (68, 9), (70, 24), (72, 11), (74, 17), (76, 18), (77, 9), (78, 19), (79, 10), (80, 28), (81, 9), (82, 17), (83, 22), (84, 18), (92, 20), (93, 20), (94, 14), (95, 13), (96, 13), (97, 10), (98, 16), (101, 10), (104, 9), (106, 9), (108, 10), (109, 5), (110, 12), (112, 11), (113, 15), (115, 10), (116, 9), (117, 8), (118, 12), (119, 19), (120, 13), (121, 11), (122, 12), (123, 12), (124, 13), (125, 10), (127, 7), (129, 14), (130, 11), (131, 12), (132, 8), (135, 8), (136, 17), (137, 20), (139, 28), (140, 9), (141, 24), (143, 12), (144, 19), (146, 21), (147, 10), (148, 27), (149, 24), (154, 11), (155, 19), (157, 7), (158, 20), (159, 12), (160, 22), (161, 11), (162, 8), (163, 12), (164, 14), (165, 26), (166, 18), (167, 12), (168, 22), (169, 9), (171, 17), (172, 9), (173, 15), (174, 20), (176, 9), (177, 12), (178, 21), (179, 10), (180, 19), (181, 19), (182, 21), (183, 23), (184, 25), (185, 20), (186, 9), (187, 17), (188, 20), (190, 20), (192, 9), (193, 11), (194, 15), (195, 12), (196, 13), (197, 15), (199, 16), (200, 8), (201, 9), (207, 16), (208, 18), (209, 10), (210, 9), (211, 8), (212, 8), (213, 20), (214, 8), (215, 8), (216, 34), (217, 18), (219, 12), (220, 21), (222, 18), (223, 12), (225, 16), (226, 10), (227, 10), (229, 11), (230, 14), (232, 12), (233, 9), (234, 11), (235, 16), (236, 20), (237, 9), (238, 26), (239, 17), (240, 10), (241, 17), (243, 27), (245, 7), (246, 25), (248, 29), (250, 23), (251, 6), (253, 23), (255, 18), (256, 24), (257, 32), (260, 11), (261, 29), (263, 20), (264, 23), (265, 11), (267, 13), (268, 9), (269, 17), (273, 19), (276, 7), (277, 25), (280, 21), (286, 23), (287, 27), (288, 19), (289, 10), (290, 26), (292, 24), (294, 20), (298, 20), (299, 19), (301, 24), (302, 9), (303, 8), (304, 23), (306, 28), (307, 22), (308, 23), (310, 32), (311, 35), (312, 26), (316, 8), (317, 9), (318, 22), (320, 32), (321, 32), (322, 33), (323, 25), (324, 31), (325, 11), (326, 23), (327, 13), (328, 12), (330, 33), (331, 11), (332, 22), (333, 13), (334, 23), (335, 10), (337, 13), (338, 13), (340, 20), (341, 14), (342, 12), (343, 18), (345, 18), (347, 20), (350, 17), (351, 15), (352, 17), (353, 29), (354, 17), (355, 15), (356, 19), (357, 14), (358, 16), (359, 12), (360, 32), (361, 29), (362, 31), (363, 32), (364, 32), (368, 32), (369, 31), (373, 34), (374, 26), (375, 32), (377, 27), (378, 18), (379, 29), (380, 20), (381, 10), (383, 16), (384, 8), (385, 10), (387, 26), (388, 9), (389, 14), (390, 14), (391, 10), (393, 9), (394, 11), (395, 13), (396, 16), (398, 14), (399, 13), (400, 10), (401, 10), (402, 25), (403, 21), (404, 21), (405, 15), (407, 20), (411, 10), (412, 23), (414, 26), (415, 12), (417, 22), (418, 21), (419, 13), (420, 14), (422, 9), (423, 17), (424, 10), (425, 15), (426, 8), (427, 7), (429, 14), (430, 12), (431, 14), (433, 16), (435, 25), (436, 14), (437, 27), (439, 22), (441, 8), (442, 10), (443, 21), (444, 10), (447, 8), (449, 12), (450, 12), (452, 9), (453, 13), (456, 7), (461, 8), (463, 11), (464, 10)]
nb_edges_0 = 5866 rho= 0.1 # of rows = 35 # of columns= 320 total_degree_0= 5866 RHS= 586.6
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  6 with obj value: 485.579781420765 KP time = 0.19509620685130358 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01675 - (Local CPU) 0.01676 - (Global CPU) 0.21185

 Solve status: Optimal Objective value: 154.36296 nb_rows 35 nb_cols 298
----------------------------------------
----------------------------------------

        Updated data after iteration: 6 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (35, 298) and density : 0.496 and number of remaining ones : 5334
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.496 density  and density_threshold= 0.900


I am in the while loop with i= 7 density= 0.4959731543624161 and fixed_threshold= 0.9

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 414.304
I solved model name = row_knapsack_problem for iteration i =  7 with obj value: 414.30375000000004 KP time = 0.21185166586656123 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01478 - (Local CPU) 0.01478 - (Global CPU) 0.22664

 Solve status: Optimal Objective value: 414.30375 nb_rows 31 nb_cols 298
----------------------------------------
----------------------------------------

        Updated data after iteration: 7 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (31, 298) and density : 0.502 and number of remaining ones : 4642
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(8, 9), (12, 7), (13, 9), (14, 8), (15, 7), (18, 27), (19, 22), (21, 27), (23, 25), (24, 22), (25, 23), (26, 23), (27, 27), (28, 8), (29, 23), (31, 28), (32, 26), (34, 24), (36, 24), (37, 20), (38, 23), (39, 7), (40, 6), (41, 21), (44, 10), (47, 22), (49, 18), (50, 21), (52, 19), (55, 7), (57, 17), (58, 8), (59, 9), (61, 18), (62, 10), (63, 10), (64, 15), (68, 7), (70, 22), (72, 8), (74, 15), (76, 17), (77, 9), (78, 19), (79, 8), (80, 25), (81, 8), (82, 14), (83, 21), (84, 18), (92, 20), (93, 18), (94, 14), (95, 10), (96, 13), (97, 10), (98, 16), (101, 8), (104, 8), (106, 8), (108, 8), (110, 10), (112, 11), (113, 14), (115, 10), (116, 7), (117, 8), (118, 9), (119, 16), (120, 12), (121, 9), (122, 12), (123, 9), (124, 9), (125, 10), (129, 14), (130, 11), (131, 10), (135, 8), (136, 13), (137, 20), (139, 25), (140, 8), (141, 21), (143, 11), (144, 17), (146, 18), (147, 8), (148, 23), (149, 20), (154, 9), (155, 17), (158, 18), (159, 10), (160, 19), (161, 11), (162, 8), (163, 11), (164, 12), (165, 24), (166, 14), (167, 11), (168, 20), (169, 8), (171, 17), (172, 8), (173, 12), (174, 19), (176, 9), (177, 10), (178, 18), (179, 9), (180, 16), (181, 16), (182, 21), (183, 21), (184, 23), (185, 18), (186, 9), (187, 15), (188, 17), (190, 19), (192, 8), (193, 9), (194, 12), (195, 12), (196, 12), (197, 13), (199, 13), (201, 8), (207, 16), (208, 16), (209, 10), (210, 8), (213, 19), (214, 7), (215, 7), (216, 30), (217, 16), (219, 9), (220, 20), (222, 16), (223, 10), (225, 14), (226, 10), (227, 9), (229, 11), (230, 11), (232, 11), (233, 8), (234, 10), (235, 15), (236, 19), (237, 9), (238, 24), (239, 15), (240, 10), (241, 14), (243, 25), (246, 23), (248, 28), (250, 22), (253, 20), (255, 17), (256, 22), (257, 29), (260, 9), (261, 26), (263, 18), (264, 22), (265, 9), (267, 10), (268, 7), (269, 17), (273, 18), (277, 23), (280, 19), (286, 21), (287, 23), (288, 18), (289, 8), (290, 25), (292, 21), (294, 19), (298, 16), (299, 18), (301, 22), (302, 7), (303, 8), (304, 22), (306, 26), (307, 20), (308, 22), (310, 29), (311, 31), (312, 23), (316, 7), (317, 9), (318, 20), (320, 30), (321, 30), (322, 30), (323, 22), (324, 29), (325, 10), (326, 20), (327, 12), (328, 11), (330, 30), (331, 10), (332, 20), (333, 11), (334, 20), (335, 10), (337, 10), (338, 12), (340, 18), (341, 14), (342, 10), (343, 17), (345, 17), (347, 18), (350, 15), (351, 14), (352, 15), (353, 27), (354, 15), (355, 14), (356, 18), (357, 12), (358, 15), (359, 11), (360, 30), (361, 27), (362, 28), (363, 29), (364, 29), (368, 29), (369, 29), (373, 31), (374, 24), (375, 29), (377, 23), (378, 17), (379, 26), (380, 19), (381, 9), (383, 14), (385, 10), (387, 23), (388, 6), (389, 11), (390, 12), (391, 8), (393, 9), (394, 10), (395, 12), (396, 14), (398, 12), (399, 9), (400, 9), (401, 9), (402, 23), (403, 20), (404, 19), (405, 13), (407, 19), (411, 8), (412, 22), (414, 23), (415, 12), (417, 19), (418, 19), (419, 12), (420, 11), (422, 6), (423, 16), (424, 9), (425, 14), (426, 7), (429, 14), (430, 12), (431, 11), (433, 13), (435, 23), (436, 14), (437, 24), (439, 21), (442, 7), (443, 18), (444, 9), (447, 5), (449, 9), (450, 9), (452, 6), (453, 10), (463, 8), (464, 7)]
nb_edges_0 = 4596 rho= 0.1 # of rows = 31 # of columns= 298 total_degree_0= 4596 RHS= 459.6
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  7 with obj value: 414.30375000000004 KP time = 0.2266359159257263 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01632 - (Local CPU) 0.01632 - (Global CPU) 0.24295

 Solve status: Optimal Objective value: 126.30000 nb_rows 31 nb_cols 279
----------------------------------------
----------------------------------------

        Updated data after iteration: 7 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (31, 279) and density : 0.522 and number of remaining ones : 4642
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.522 density  and density_threshold= 0.900


I am in the while loop with i= 8 density= 0.5220256677072493 and fixed_threshold= 0.9

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 372.768
I solved model name = row_knapsack_problem for iteration i =  8 with obj value: 372.7684931506849 KP time = 0.2429535408737138 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01433 - (Local CPU) 0.01434 - (Global CPU) 0.25729

 Solve status: Optimal Objective value: 372.76849 nb_rows 28 nb_cols 279
----------------------------------------
----------------------------------------

        Updated data after iteration: 8 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (28, 279) and density : 0.527 and number of remaining ones : 4118
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(8, 7), (13, 8), (14, 7), (18, 24), (19, 20), (21, 25), (23, 24), (24, 21), (25, 22), (26, 22), (27, 25), (28, 6), (29, 22), (31, 25), (32, 24), (34, 23), (36, 23), (37, 19), (38, 21), (41, 20), (44, 9), (47, 21), (49, 17), (50, 18), (52, 18), (57, 16), (58, 6), (59, 7), (61, 18), (62, 10), (63, 8), (64, 13), (70, 21), (72, 7), (74, 14), (76, 14), (77, 8), (78, 18), (79, 6), (80, 22), (81, 7), (82, 12), (83, 20), (84, 16), (92, 18), (93, 16), (94, 12), (95, 9), (96, 12), (97, 9), (98, 15), (101, 8), (104, 6), (106, 8), (108, 8), (110, 9), (112, 10), (113, 12), (115, 10), (117, 8), (118, 9), (119, 16), (120, 10), (121, 9), (122, 12), (123, 9), (124, 8), (125, 10), (129, 14), (130, 10), (131, 8), (135, 7), (136, 13), (137, 18), (139, 23), (140, 8), (141, 19), (143, 10), (144, 15), (146, 17), (147, 7), (148, 21), (149, 19), (154, 8), (155, 15), (158, 16), (159, 9), (160, 18), (161, 10), (162, 8), (163, 9), (164, 10), (165, 22), (166, 12), (167, 11), (168, 17), (169, 6), (171, 16), (172, 7), (173, 11), (174, 18), (176, 8), (177, 8), (178, 18), (179, 8), (180, 15), (181, 15), (182, 19), (183, 21), (184, 21), (185, 18), (186, 8), (187, 15), (188, 16), (190, 18), (192, 7), (193, 8), (194, 11), (195, 10), (196, 11), (197, 13), (199, 12), (201, 8), (207, 14), (208, 14), (209, 9), (210, 7), (213, 17), (216, 27), (217, 14), (219, 8), (220, 19), (222, 15), (223, 9), (225, 12), (226, 9), (227, 8), (229, 10), (230, 11), (232, 11), (233, 7), (234, 9), (235, 14), (236, 18), (237, 8), (238, 21), (239, 13), (240, 9), (241, 13), (243, 23), (246, 21), (248, 25), (250, 19), (253, 18), (255, 15), (256, 20), (257, 26), (260, 8), (261, 24), (263, 17), (264, 21), (265, 8), (267, 10), (269, 15), (273, 17), (277, 21), (280, 17), (286, 19), (287, 21), (288, 17), (289, 7), (290, 23), (292, 20), (294, 17), (298, 16), (299, 16), (301, 21), (303, 7), (304, 19), (306, 24), (307, 19), (308, 21), (310, 27), (311, 28), (312, 21), (317, 8), (318, 19), (320, 27), (321, 27), (322, 27), (323, 21), (324, 26), (325, 8), (326, 19), (327, 10), (328, 9), (330, 27), (331, 8), (332, 19), (333, 9), (334, 17), (335, 8), (337, 9), (338, 10), (340, 16), (341, 13), (342, 9), (343, 14), (345, 14), (347, 16), (350, 14), (351, 12), (352, 14), (353, 24), (354, 15), (355, 13), (356, 15), (357, 12), (358, 14), (359, 11), (360, 27), (361, 24), (362, 25), (363, 26), (364, 26), (368, 26), (369, 26), (373, 28), (374, 21), (375, 26), (377, 20), (378, 14), (379, 23), (380, 16), (381, 9), (383, 14), (385, 10), (387, 21), (389, 10), (390, 11), (391, 7), (393, 8), (394, 8), (395, 11), (396, 12), (398, 11), (399, 7), (400, 8), (401, 8), (402, 20), (403, 19), (404, 17), (405, 12), (407, 18), (411, 7), (412, 20), (414, 22), (415, 12), (417, 17), (418, 18), (419, 11), (420, 11), (423, 15), (424, 7), (425, 12), (429, 14), (430, 12), (431, 9), (433, 12), (435, 23), (436, 14), (437, 23), (439, 21), (443, 17), (444, 9), (449, 8), (450, 7), (453, 7), (463, 6)]
nb_edges_0 = 3694 rho= 0.1 # of rows = 28 # of columns= 279 total_degree_0= 3694 RHS= 369.40000000000003
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  8 with obj value: 372.7684931506849 KP time = 0.2572897078935057 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01815 - (Local CPU) 0.01815 - (Global CPU) 0.27544

 Solve status: Optimal Objective value: 115.13333 nb_rows 28 nb_cols 261
----------------------------------------
----------------------------------------

        Updated data after iteration: 8 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (28, 261) and density : 0.547 and number of remaining ones : 4118
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.547 density  and density_threshold= 0.900


I am in the while loop with i= 9 density= 0.547071702244116 and fixed_threshold= 0.9

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 324.489
I solved model name = row_knapsack_problem for iteration i =  9 with obj value: 324.4885496183206 KP time = 0.27544224995654076 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01531 - (Local CPU) 0.01532 - (Global CPU) 0.29076

 Solve status: Optimal Objective value: 324.48855 nb_rows 25 nb_cols 261
----------------------------------------
----------------------------------------

        Updated data after iteration: 9 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (25, 261) and density : 0.553 and number of remaining ones : 3610
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(8, 5), (13, 6), (14, 6), (18, 21), (19, 18), (21, 22), (23, 22), (24, 18), (25, 20), (26, 19), (27, 23), (29, 20), (31, 22), (32, 21), (34, 21), (36, 21), (37, 17), (38, 19), (41, 18), (44, 7), (47, 20), (49, 16), (50, 16), (52, 17), (57, 16), (61, 16), (62, 9), (63, 6), (64, 12), (70, 19), (74, 12), (76, 13), (77, 6), (78, 16), (80, 20), (82, 12), (83, 19), (84, 16), (92, 18), (93, 16), (94, 12), (95, 7), (96, 11), (97, 8), (98, 15), (101, 6), (106, 6), (108, 7), (110, 6), (112, 9), (113, 10), (115, 8), (117, 8), (118, 6), (119, 14), (120, 10), (121, 7), (122, 12), (123, 8), (124, 6), (125, 9), (129, 14), (130, 10), (131, 7), (136, 12), (137, 17), (139, 21), (140, 7), (141, 17), (143, 9), (144, 13), (146, 15), (147, 5), (148, 19), (149, 17), (154, 7), (155, 13), (158, 15), (159, 9), (160, 17), (161, 10), (162, 6), (163, 7), (164, 9), (165, 20), (166, 11), (167, 9), (168, 14), (171, 15), (172, 7), (173, 9), (174, 15), (176, 7), (177, 6), (178, 17), (179, 7), (180, 13), (181, 13), (182, 17), (183, 18), (184, 18), (185, 17), (186, 7), (187, 14), (188, 14), (190, 17), (192, 7), (193, 8), (194, 11), (195, 8), (196, 8), (197, 12), (199, 10), (201, 7), (207, 14), (208, 12), (209, 8), (210, 7), (213, 17), (216, 24), (217, 13), (219, 7), (220, 18), (222, 15), (223, 7), (225, 10), (226, 8), (227, 7), (229, 7), (230, 11), (232, 8), (233, 5), (234, 7), (235, 13), (236, 16), (237, 7), (238, 19), (239, 12), (240, 9), (241, 12), (243, 21), (246, 20), (248, 23), (250, 18), (253, 16), (255, 15), (256, 18), (257, 24), (260, 5), (261, 23), (263, 17), (264, 20), (265, 5), (267, 8), (269, 14), (273, 17), (277, 19), (280, 17), (286, 18), (287, 18), (288, 17), (290, 21), (292, 18), (294, 16), (298, 15), (299, 15), (301, 20), (304, 18), (306, 22), (307, 19), (308, 20), (310, 25), (311, 25), (312, 20), (317, 7), (318, 18), (320, 25), (321, 25), (322, 25), (323, 18), (324, 25), (325, 7), (326, 18), (327, 8), (328, 7), (330, 25), (331, 7), (332, 17), (333, 7), (334, 15), (335, 7), (337, 7), (338, 9), (340, 14), (341, 12), (342, 8), (343, 12), (345, 12), (347, 14), (350, 12), (351, 10), (352, 14), (353, 22), (354, 14), (355, 13), (356, 13), (357, 12), (358, 14), (359, 11), (360, 24), (361, 21), (362, 22), (363, 23), (364, 23), (368, 23), (369, 23), (373, 25), (374, 20), (375, 23), (377, 18), (378, 12), (379, 21), (380, 16), (381, 8), (383, 11), (385, 10), (387, 19), (389, 8), (390, 10), (393, 7), (394, 8), (395, 9), (396, 11), (398, 11), (400, 7), (401, 7), (402, 19), (403, 18), (404, 15), (405, 12), (407, 17), (412, 18), (414, 19), (415, 9), (417, 16), (418, 17), (419, 8), (420, 9), (423, 14), (425, 10), (429, 13), (430, 12), (431, 8), (433, 10), (435, 21), (436, 14), (437, 22), (439, 21), (443, 14), (444, 6), (449, 6)]
nb_edges_0 = 2915 rho= 0.1 # of rows = 25 # of columns= 261 total_degree_0= 2915 RHS= 291.5
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  9 with obj value: 324.4885496183206 KP time = 0.2907589579699561 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01606 - (Local CPU) 0.01606 - (Global CPU) 0.30682

 Solve status: Optimal Objective value: 85.47368 nb_rows 25 nb_cols 245
----------------------------------------
----------------------------------------

        Updated data after iteration: 9 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (25, 245) and density : 0.575 and number of remaining ones : 3610
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.575 density  and density_threshold= 0.900


I am in the while loop with i= 10 density= 0.574530612244898 and fixed_threshold= 0.9

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 270.095
I solved model name = row_knapsack_problem for iteration i =  10 with obj value: 270.0949152542373 KP time = 0.30682062497362494 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01444 - (Local CPU) 0.01444 - (Global CPU) 0.32126

 Solve status: Optimal Objective value: 270.09492 nb_rows 22 nb_cols 245
----------------------------------------
----------------------------------------

        Updated data after iteration: 10 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (22, 245) and density : 0.583 and number of remaining ones : 3143
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(18, 18), (19, 15), (21, 19), (23, 19), (24, 15), (25, 17), (26, 16), (27, 20), (29, 17), (31, 20), (32, 18), (34, 18), (36, 18), (37, 15), (38, 17), (41, 16), (44, 5), (47, 18), (49, 15), (50, 16), (52, 17), (57, 16), (61, 15), (62, 7), (63, 4), (64, 12), (70, 17), (74, 11), (76, 13), (78, 15), (80, 17), (82, 12), (83, 16), (84, 16), (92, 16), (93, 14), (94, 11), (95, 6), (96, 11), (97, 6), (98, 14), (106, 4), (108, 6), (112, 9), (113, 8), (115, 8), (117, 7), (119, 12), (120, 10), (121, 5), (122, 11), (123, 7), (125, 8), (129, 13), (130, 9), (131, 7), (136, 10), (137, 16), (139, 19), (140, 5), (141, 16), (143, 7), (144, 13), (146, 13), (148, 18), (149, 15), (154, 6), (155, 12), (158, 14), (159, 8), (160, 15), (161, 9), (163, 6), (164, 9), (165, 19), (166, 10), (167, 6), (168, 14), (171, 13), (172, 6), (173, 7), (174, 14), (176, 6), (178, 15), (179, 6), (180, 11), (181, 11), (182, 16), (183, 16), (184, 17), (185, 16), (186, 6), (187, 14), (188, 12), (190, 16), (192, 6), (193, 8), (194, 11), (195, 7), (196, 5), (197, 10), (199, 9), (201, 5), (207, 12), (208, 11), (209, 7), (210, 6), (213, 15), (216, 21), (217, 12), (219, 6), (220, 16), (222, 13), (223, 7), (225, 9), (226, 8), (227, 6), (229, 6), (230, 10), (232, 7), (234, 6), (235, 10), (236, 15), (237, 5), (238, 16), (239, 12), (240, 7), (241, 11), (243, 19), (246, 18), (248, 20), (250, 17), (253, 15), (255, 14), (256, 17), (257, 22), (261, 20), (263, 16), (264, 19), (267, 7), (269, 14), (273, 14), (277, 17), (280, 16), (286, 15), (287, 18), (288, 17), (290, 20), (292, 17), (294, 15), (298, 14), (299, 15), (301, 18), (304, 15), (306, 19), (307, 18), (308, 18), (310, 22), (311, 22), (312, 19), (317, 5), (318, 17), (320, 22), (321, 22), (322, 22), (323, 17), (324, 22), (325, 5), (326, 17), (327, 6), (328, 5), (330, 22), (331, 5), (332, 16), (333, 5), (334, 12), (335, 5), (337, 6), (338, 7), (340, 12), (341, 11), (342, 7), (343, 9), (345, 9), (347, 12), (350, 9), (351, 8), (352, 13), (353, 20), (354, 13), (355, 13), (356, 10), (357, 12), (358, 13), (359, 11), (360, 21), (361, 20), (362, 21), (363, 21), (364, 21), (368, 21), (369, 21), (373, 22), (374, 19), (375, 20), (377, 18), (378, 12), (379, 18), (380, 13), (381, 5), (383, 9), (385, 10), (387, 19), (389, 8), (390, 10), (393, 7), (394, 7), (395, 6), (396, 11), (398, 9), (400, 7), (401, 7), (402, 18), (403, 16), (404, 12), (405, 10), (407, 15), (412, 15), (414, 16), (415, 7), (417, 15), (418, 15), (419, 6), (420, 7), (423, 13), (425, 10), (429, 12), (430, 11), (431, 7), (433, 8), (435, 18), (436, 13), (437, 19), (439, 19), (443, 12)]
nb_edges_0 = 2247 rho= 0.1 # of rows = 22 # of columns= 245 total_degree_0= 2247 RHS= 224.70000000000002
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  10 with obj value: 270.0949152542373 KP time = 0.3212590420152992 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01572 - (Local CPU) 0.01572 - (Global CPU) 0.33698

 Solve status: Optimal Objective value: 63.50000 nb_rows 22 nb_cols 231
----------------------------------------
----------------------------------------

        Updated data after iteration: 10 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (22, 231) and density : 0.605 and number of remaining ones : 3143
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.605 density  and density_threshold= 0.900


I am in the while loop with i= 11 density= 0.6050767414403778 and fixed_threshold= 0.9

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 217.881
I solved model name = row_knapsack_problem for iteration i =  11 with obj value: 217.88055555555553 KP time = 0.33698370901402086 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01440 - (Local CPU) 0.01440 - (Global CPU) 0.35139

 Solve status: Optimal Objective value: 217.88056 nb_rows 20 nb_cols 231
----------------------------------------
----------------------------------------

        Updated data after iteration: 11 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (20, 231) and density : 0.613 and number of remaining ones : 2834
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(18, 17), (19, 14), (21, 17), (23, 17), (24, 13), (25, 15), (26, 14), (27, 18), (29, 15), (31, 18), (32, 16), (34, 17), (36, 16), (37, 14), (38, 15), (41, 14), (47, 16), (49, 15), (50, 16), (52, 17), (57, 15), (61, 13), (62, 5), (64, 12), (70, 15), (74, 11), (76, 13), (78, 15), (80, 15), (82, 12), (83, 14), (84, 16), (92, 16), (93, 14), (94, 11), (95, 5), (96, 11), (97, 4), (98, 14), (108, 4), (112, 9), (113, 6), (115, 8), (117, 7), (119, 10), (120, 10), (122, 9), (123, 5), (125, 8), (129, 13), (130, 9), (131, 7), (136, 8), (137, 16), (139, 17), (141, 16), (143, 5), (144, 13), (146, 12), (148, 18), (149, 14), (154, 5), (155, 12), (158, 13), (159, 8), (160, 14), (161, 8), (163, 5), (164, 9), (165, 18), (166, 10), (167, 5), (168, 13), (171, 13), (172, 5), (173, 6), (174, 13), (176, 4), (178, 15), (179, 6), (180, 10), (181, 10), (182, 14), (183, 15), (184, 17), (185, 14), (186, 4), (187, 12), (188, 12), (190, 14), (192, 6), (193, 6), (194, 9), (195, 7), (197, 10), (199, 9), (207, 10), (208, 11), (209, 7), (210, 6), (213, 13), (216, 19), (217, 10), (219, 4), (220, 14), (222, 13), (223, 7), (225, 9), (226, 8), (227, 4), (229, 4), (230, 10), (232, 5), (234, 6), (235, 8), (236, 13), (238, 14), (239, 12), (240, 5), (241, 11), (243, 17), (246, 18), (248, 18), (250, 17), (253, 15), (255, 14), (256, 17), (257, 20), (261, 20), (263, 16), (264, 17), (267, 5), (269, 14), (273, 14), (277, 17), (280, 16), (286, 15), (287, 16), (288, 17), (290, 18), (292, 17), (294, 15), (298, 14), (299, 15), (301, 18), (304, 14), (306, 18), (307, 17), (308, 18), (310, 20), (311, 20), (312, 19), (317, 3), (318, 17), (320, 20), (321, 20), (322, 20), (323, 17), (324, 20), (326, 17), (327, 4), (330, 20), (332, 16), (334, 10), (337, 6), (338, 5), (340, 10), (341, 11), (342, 7), (343, 8), (345, 8), (347, 10), (350, 8), (351, 7), (352, 12), (353, 18), (354, 12), (355, 12), (356, 9), (357, 11), (358, 12), (359, 10), (360, 19), (361, 18), (362, 19), (363, 19), (364, 19), (368, 19), (369, 19), (373, 20), (374, 17), (375, 18), (377, 16), (378, 10), (379, 16), (380, 11), (383, 9), (385, 10), (387, 17), (389, 8), (390, 8), (393, 5), (394, 5), (395, 6), (396, 9), (398, 9), (400, 5), (401, 5), (402, 16), (403, 15), (404, 12), (405, 10), (407, 13), (412, 14), (414, 15), (415, 6), (417, 13), (418, 14), (419, 5), (420, 7), (423, 11), (425, 8), (429, 10), (430, 9), (431, 7), (433, 8), (435, 17), (436, 12), (437, 18), (439, 18), (443, 11)]
nb_edges_0 = 1786 rho= 0.1 # of rows = 20 # of columns= 231 total_degree_0= 1786 RHS= 178.60000000000002
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  11 with obj value: 217.88055555555553 KP time = 0.3513863750267774 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01651 - (Local CPU) 0.01651 - (Global CPU) 0.36790

 Solve status: Optimal Objective value: 46.20000 nb_rows 20 nb_cols 219
----------------------------------------
----------------------------------------

        Updated data after iteration: 11 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (20, 219) and density : 0.636 and number of remaining ones : 2834
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.636 density  and density_threshold= 0.900


I am in the while loop with i= 12 density= 0.6356164383561644 and fixed_threshold= 0.9

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 201.404
I solved model name = row_knapsack_problem for iteration i =  12 with obj value: 201.40421052631578 KP time = 0.367897417047061 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01411 - (Local CPU) 0.01411 - (Global CPU) 0.38201

 Solve status: Optimal Objective value: 201.40421 nb_rows 18 nb_cols 219
----------------------------------------
----------------------------------------

        Updated data after iteration: 12 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (18, 219) and density : 0.644 and number of remaining ones : 2539
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(18, 15), (19, 12), (21, 16), (23, 16), (24, 13), (25, 14), (26, 13), (27, 17), (29, 13), (31, 17), (32, 14), (34, 15), (36, 15), (37, 13), (38, 14), (41, 12), (47, 15), (49, 14), (50, 15), (52, 15), (57, 14), (61, 11), (62, 4), (64, 10), (70, 14), (74, 10), (76, 12), (78, 13), (80, 14), (82, 11), (83, 13), (84, 14), (92, 14), (93, 12), (94, 10), (95, 4), (96, 10), (98, 13), (112, 8), (113, 6), (115, 7), (117, 7), (119, 9), (120, 8), (122, 8), (123, 5), (125, 7), (129, 12), (130, 8), (131, 5), (136, 7), (137, 15), (139, 16), (141, 15), (143, 4), (144, 13), (146, 12), (148, 17), (149, 14), (154, 3), (155, 12), (158, 12), (159, 7), (160, 13), (161, 7), (163, 4), (164, 8), (165, 16), (166, 10), (167, 4), (168, 12), (171, 13), (172, 4), (173, 4), (174, 13), (178, 14), (179, 5), (180, 9), (181, 9), (182, 13), (183, 14), (184, 15), (185, 13), (187, 12), (188, 12), (190, 12), (192, 5), (193, 5), (194, 9), (195, 6), (197, 10), (199, 8), (207, 10), (208, 10), (209, 6), (210, 6), (213, 12), (216, 17), (217, 8), (220, 14), (222, 13), (223, 5), (225, 9), (226, 8), (230, 10), (232, 5), (234, 4), (235, 7), (236, 12), (238, 14), (239, 11), (240, 4), (241, 10), (243, 16), (246, 16), (248, 17), (250, 16), (253, 14), (255, 13), (256, 16), (257, 18), (261, 18), (263, 15), (264, 16), (267, 4), (269, 13), (273, 13), (277, 16), (280, 15), (286, 13), (287, 15), (288, 15), (290, 16), (292, 16), (294, 14), (298, 13), (299, 14), (301, 18), (304, 14), (306, 17), (307, 16), (308, 17), (310, 18), (311, 18), (312, 17), (318, 15), (320, 18), (321, 18), (322, 18), (323, 15), (324, 18), (326, 15), (330, 18), (332, 14), (334, 8), (337, 4), (340, 10), (341, 9), (342, 7), (343, 6), (345, 6), (347, 8), (350, 6), (351, 5), (352, 12), (353, 16), (354, 12), (355, 12), (356, 7), (357, 11), (358, 12), (359, 10), (360, 17), (361, 16), (362, 17), (363, 17), (364, 17), (368, 17), (369, 17), (373, 18), (374, 16), (375, 17), (377, 14), (378, 9), (379, 15), (380, 10), (383, 9), (385, 10), (387, 15), (389, 6), (390, 8), (394, 5), (395, 5), (396, 8), (398, 8), (401, 4), (402, 15), (403, 14), (404, 11), (405, 10), (407, 13), (412, 12), (414, 13), (415, 5), (417, 12), (418, 14), (419, 4), (420, 5), (423, 10), (425, 8), (429, 8), (430, 9), (431, 7), (433, 6), (435, 15), (436, 12), (437, 16), (439, 16), (443, 10)]
nb_edges_0 = 1403 rho= 0.1 # of rows = 18 # of columns= 219 total_degree_0= 1403 RHS= 140.3
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  12 with obj value: 201.40421052631578 KP time = 0.3820107080973685 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01574 - (Local CPU) 0.01574 - (Global CPU) 0.39775

 Solve status: Optimal Objective value: 38.80000 nb_rows 18 nb_cols 209
----------------------------------------
----------------------------------------

        Updated data after iteration: 12 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (18, 209) and density : 0.665 and number of remaining ones : 2539
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.665 density  and density_threshold= 0.900


I am in the while loop with i= 13 density= 0.6645401382243488 and fixed_threshold= 0.9

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 181.645
I solved model name = row_knapsack_problem for iteration i =  13 with obj value: 181.64470588235295 KP time = 0.3977482911432162 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01408 - (Local CPU) 0.01408 - (Global CPU) 0.41183

 Solve status: Optimal Objective value: 181.64471 nb_rows 16 nb_cols 209
----------------------------------------
----------------------------------------

        Updated data after iteration: 13 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (16, 209) and density : 0.674 and number of remaining ones : 2253
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(18, 13), (19, 11), (21, 15), (23, 14), (24, 12), (25, 13), (26, 12), (27, 15), (29, 12), (31, 15), (32, 12), (34, 14), (36, 14), (37, 12), (38, 13), (41, 11), (47, 14), (49, 12), (50, 14), (52, 14), (57, 13), (61, 10), (64, 9), (70, 12), (74, 8), (76, 11), (78, 12), (80, 13), (82, 10), (83, 11), (84, 13), (92, 12), (93, 10), (94, 9), (95, 4), (96, 9), (98, 12), (112, 8), (113, 5), (115, 6), (117, 6), (119, 8), (120, 8), (122, 7), (123, 5), (125, 6), (129, 10), (130, 7), (131, 4), (136, 6), (137, 13), (139, 14), (141, 14), (144, 12), (146, 11), (148, 15), (149, 13), (155, 11), (158, 11), (159, 7), (160, 11), (161, 7), (164, 7), (165, 15), (166, 10), (168, 12), (171, 12), (174, 12), (178, 14), (179, 4), (180, 9), (181, 9), (182, 13), (183, 13), (184, 14), (185, 12), (187, 12), (188, 11), (190, 12), (192, 3), (193, 4), (194, 9), (195, 6), (197, 10), (199, 8), (207, 9), (208, 9), (209, 5), (210, 5), (213, 10), (216, 15), (217, 6), (220, 12), (222, 12), (223, 4), (225, 9), (226, 7), (230, 10), (232, 4), (234, 4), (235, 7), (236, 11), (238, 13), (239, 10), (240, 4), (241, 9), (243, 15), (246, 15), (248, 15), (250, 15), (253, 13), (255, 12), (256, 15), (257, 16), (261, 16), (263, 14), (264, 15), (267, 3), (269, 12), (273, 12), (277, 15), (280, 13), (286, 12), (287, 14), (288, 13), (290, 15), (292, 14), (294, 13), (298, 11), (299, 12), (301, 16), (304, 12), (306, 15), (307, 14), (308, 15), (310, 16), (311, 16), (312, 15), (318, 13), (320, 16), (321, 16), (322, 16), (323, 13), (324, 16), (326, 13), (330, 16), (332, 13), (334, 7), (340, 9), (341, 9), (342, 5), (343, 5), (345, 6), (347, 7), (350, 6), (351, 5), (352, 10), (353, 14), (354, 10), (355, 10), (356, 7), (357, 9), (358, 10), (359, 8), (360, 15), (361, 14), (362, 15), (363, 15), (364, 15), (368, 15), (369, 15), (373, 16), (374, 15), (375, 15), (377, 13), (378, 8), (379, 13), (380, 8), (383, 8), (385, 10), (387, 14), (389, 6), (390, 7), (394, 4), (395, 4), (396, 7), (398, 7), (402, 13), (403, 13), (404, 10), (405, 9), (407, 11), (412, 11), (414, 11), (415, 5), (417, 12), (418, 13), (420, 5), (423, 8), (425, 7), (429, 7), (430, 8), (431, 6), (433, 5), (435, 14), (436, 10), (437, 14), (439, 15), (443, 8)]
nb_edges_0 = 1091 rho= 0.1 # of rows = 16 # of columns= 209 total_degree_0= 1091 RHS= 109.10000000000001
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  13 with obj value: 181.64470588235295 KP time = 0.4118273331550881 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01536 - (Local CPU) 0.01536 - (Global CPU) 0.42719

 Solve status: Optimal Objective value: 33.70000 nb_rows 16 nb_cols 200
----------------------------------------
----------------------------------------

        Updated data after iteration: 13 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (16, 200) and density : 0.693 and number of remaining ones : 2253
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.693 density  and density_threshold= 0.900


I am in the while loop with i= 14 density= 0.6934375 and fixed_threshold= 0.9

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 147.150
I solved model name = row_knapsack_problem for iteration i =  14 with obj value: 147.14999999999998 KP time = 0.42719087516888976 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01367 - (Local CPU) 0.01367 - (Global CPU) 0.44087

 Solve status: Optimal Objective value: 147.15000 nb_rows 14 nb_cols 200
----------------------------------------
----------------------------------------

        Updated data after iteration: 14 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (14, 200) and density : 0.707 and number of remaining ones : 1979
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(18, 11), (19, 10), (21, 13), (23, 12), (24, 12), (25, 13), (26, 12), (27, 13), (29, 12), (31, 13), (32, 12), (34, 12), (36, 13), (37, 12), (38, 11), (41, 11), (47, 13), (49, 12), (50, 13), (52, 13), (57, 11), (61, 10), (64, 9), (70, 12), (74, 7), (76, 10), (78, 12), (80, 12), (82, 10), (83, 11), (84, 12), (92, 11), (93, 10), (94, 9), (95, 3), (96, 8), (98, 11), (112, 7), (113, 5), (115, 6), (117, 6), (119, 8), (120, 7), (122, 7), (123, 3), (125, 6), (129, 10), (130, 7), (136, 5), (137, 12), (139, 12), (141, 12), (144, 10), (146, 10), (148, 13), (149, 11), (155, 9), (158, 9), (159, 5), (160, 10), (161, 6), (164, 6), (165, 13), (166, 8), (168, 10), (171, 10), (174, 10), (178, 12), (180, 7), (181, 7), (182, 11), (183, 11), (184, 12), (185, 10), (187, 10), (188, 9), (190, 10), (194, 8), (195, 5), (197, 8), (199, 8), (207, 9), (208, 9), (209, 4), (210, 5), (213, 10), (216, 13), (217, 6), (220, 12), (222, 12), (225, 8), (226, 6), (230, 10), (234, 3), (235, 6), (236, 9), (238, 12), (239, 9), (240, 3), (241, 8), (243, 13), (246, 13), (248, 13), (250, 13), (253, 12), (255, 11), (256, 13), (257, 14), (261, 14), (263, 12), (264, 13), (269, 12), (273, 11), (277, 14), (280, 12), (286, 11), (287, 13), (288, 11), (290, 14), (292, 12), (294, 12), (298, 10), (299, 11), (301, 14), (304, 10), (306, 14), (307, 13), (308, 14), (310, 14), (311, 14), (312, 14), (318, 12), (320, 14), (321, 14), (322, 14), (323, 12), (324, 14), (326, 12), (330, 14), (332, 12), (334, 5), (340, 8), (341, 9), (342, 5), (343, 3), (345, 4), (347, 5), (350, 4), (351, 3), (352, 10), (353, 12), (354, 10), (355, 10), (356, 5), (357, 9), (358, 10), (359, 8), (360, 13), (361, 12), (362, 13), (363, 13), (364, 13), (368, 13), (369, 13), (373, 14), (374, 13), (375, 13), (377, 11), (378, 7), (379, 11), (380, 7), (383, 7), (385, 8), (387, 12), (389, 5), (390, 6), (396, 6), (398, 6), (402, 12), (403, 11), (404, 9), (405, 8), (407, 9), (412, 9), (414, 9), (415, 4), (417, 11), (418, 11), (420, 5), (423, 7), (425, 5), (429, 6), (430, 6), (431, 5), (433, 5), (435, 13), (436, 9), (437, 13), (439, 14), (443, 7)]
nb_edges_0 = 821 rho= 0.1 # of rows = 14 # of columns= 200 total_degree_0= 821 RHS= 82.10000000000001
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  14 with obj value: 147.14999999999998 KP time = 0.44086550013162196 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01539 - (Local CPU) 0.01539 - (Global CPU) 0.45626

 Solve status: Optimal Objective value: 24.44000 nb_rows 14 nb_cols 192
----------------------------------------
----------------------------------------

        Updated data after iteration: 14 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (14, 192) and density : 0.727 and number of remaining ones : 1979
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.727 density  and density_threshold= 0.900


I am in the while loop with i= 15 density= 0.7265625 and fixed_threshold= 0.9

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 134.029
I solved model name = row_knapsack_problem for iteration i =  15 with obj value: 134.02941176470588 KP time = 0.45625820907298476 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01390 - (Local CPU) 0.01391 - (Global CPU) 0.47016

 Solve status: Optimal Objective value: 134.02941 nb_rows 12 nb_cols 192
----------------------------------------
----------------------------------------

        Updated data after iteration: 15 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (12, 192) and density : 0.740 and number of remaining ones : 1705
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(18, 9), (19, 8), (21, 11), (23, 10), (24, 10), (25, 11), (26, 10), (27, 11), (29, 10), (31, 11), (32, 10), (34, 10), (36, 11), (37, 10), (38, 9), (41, 10), (47, 11), (49, 10), (50, 11), (52, 11), (57, 9), (61, 9), (64, 8), (70, 10), (74, 7), (76, 9), (78, 11), (80, 11), (82, 9), (83, 10), (84, 10), (92, 10), (93, 8), (94, 8), (96, 7), (98, 10), (112, 6), (113, 4), (115, 5), (117, 5), (119, 7), (120, 6), (122, 6), (125, 5), (129, 8), (130, 6), (136, 5), (137, 11), (139, 10), (141, 10), (144, 8), (146, 9), (148, 11), (149, 10), (155, 8), (158, 8), (159, 4), (160, 9), (161, 6), (164, 4), (165, 11), (166, 7), (168, 9), (171, 9), (174, 9), (178, 10), (180, 6), (181, 6), (182, 9), (183, 9), (184, 10), (185, 8), (187, 9), (188, 8), (190, 8), (194, 8), (195, 3), (197, 7), (199, 8), (207, 9), (208, 8), (209, 2), (210, 5), (213, 8), (216, 12), (217, 6), (220, 10), (222, 10), (225, 8), (226, 6), (230, 8), (235, 5), (236, 9), (238, 11), (239, 8), (241, 8), (243, 12), (246, 12), (248, 12), (250, 12), (253, 10), (255, 10), (256, 12), (257, 12), (261, 12), (263, 11), (264, 12), (269, 10), (273, 10), (277, 12), (280, 11), (286, 10), (287, 11), (288, 10), (290, 12), (292, 10), (294, 11), (298, 9), (299, 10), (301, 12), (304, 9), (306, 12), (307, 11), (308, 12), (310, 12), (311, 12), (312, 12), (318, 10), (320, 12), (321, 12), (322, 12), (323, 10), (324, 12), (326, 10), (330, 12), (332, 10), (334, 4), (340, 8), (341, 8), (342, 3), (347, 3), (352, 10), (353, 11), (354, 9), (355, 9), (356, 3), (357, 9), (358, 9), (359, 8), (360, 11), (361, 11), (362, 12), (363, 12), (364, 12), (368, 12), (369, 12), (373, 12), (374, 12), (375, 11), (377, 10), (378, 7), (379, 10), (380, 6), (383, 5), (385, 7), (387, 11), (389, 4), (390, 5), (396, 4), (398, 6), (402, 11), (403, 10), (404, 9), (405, 8), (407, 9), (412, 9), (414, 9), (415, 4), (417, 9), (418, 9), (420, 4), (423, 7), (425, 3), (429, 5), (430, 4), (431, 4), (433, 5), (435, 11), (436, 7), (437, 11), (439, 12), (443, 6)]
nb_edges_0 = 599 rho= 0.1 # of rows = 12 # of columns= 192 total_degree_0= 599 RHS= 59.900000000000006
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  15 with obj value: 134.02941176470588 KP time = 0.47016358410473913 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01506 - (Local CPU) 0.01506 - (Global CPU) 0.48522

 Solve status: Optimal Objective value: 19.45000 nb_rows 12 nb_cols 185
----------------------------------------
----------------------------------------

        Updated data after iteration: 15 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (12, 185) and density : 0.759 and number of remaining ones : 1705
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.759 density  and density_threshold= 0.900


I am in the while loop with i= 16 density= 0.7585585585585586 and fixed_threshold= 0.9

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 108.957
I solved model name = row_knapsack_problem for iteration i =  16 with obj value: 108.95737704918034 KP time = 0.4852233341662213 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01375 - (Local CPU) 0.01375 - (Global CPU) 0.49897

 Solve status: Optimal Objective value: 108.95738 nb_rows 11 nb_cols 185
----------------------------------------
----------------------------------------

        Updated data after iteration: 16 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (11, 185) and density : 0.767 and number of remaining ones : 1560
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(18, 8), (19, 7), (21, 10), (23, 9), (24, 9), (25, 10), (26, 9), (27, 10), (29, 9), (31, 10), (32, 9), (34, 9), (36, 10), (37, 9), (38, 8), (41, 9), (47, 10), (49, 9), (50, 10), (52, 10), (57, 9), (61, 9), (64, 7), (70, 10), (74, 6), (76, 8), (78, 10), (80, 10), (82, 8), (83, 9), (84, 9), (92, 9), (93, 8), (94, 8), (96, 7), (98, 9), (112, 6), (113, 3), (115, 5), (117, 5), (119, 7), (120, 5), (122, 6), (125, 5), (129, 7), (130, 5), (136, 5), (137, 10), (139, 9), (141, 10), (144, 8), (146, 9), (148, 10), (149, 10), (155, 8), (158, 8), (159, 4), (160, 9), (161, 6), (164, 3), (165, 10), (166, 7), (168, 9), (171, 9), (174, 8), (178, 9), (180, 6), (181, 6), (182, 9), (183, 8), (184, 9), (185, 7), (187, 9), (188, 7), (190, 8), (194, 8), (197, 7), (199, 8), (207, 9), (208, 8), (210, 5), (213, 8), (216, 11), (217, 6), (220, 9), (222, 9), (225, 8), (226, 6), (230, 7), (235, 4), (236, 9), (238, 10), (239, 8), (241, 8), (243, 11), (246, 11), (248, 11), (250, 11), (253, 9), (255, 9), (256, 11), (257, 11), (261, 11), (263, 11), (264, 11), (269, 9), (273, 9), (277, 11), (280, 10), (286, 10), (287, 10), (288, 9), (290, 11), (292, 9), (294, 10), (298, 8), (299, 9), (301, 11), (304, 8), (306, 11), (307, 10), (308, 11), (310, 11), (311, 11), (312, 11), (318, 9), (320, 11), (321, 11), (322, 11), (323, 9), (324, 11), (326, 9), (330, 11), (332, 9), (334, 4), (340, 8), (341, 7), (352, 9), (353, 10), (354, 8), (355, 8), (357, 8), (358, 8), (359, 7), (360, 10), (361, 10), (362, 11), (363, 11), (364, 11), (368, 11), (369, 11), (373, 11), (374, 11), (375, 10), (377, 10), (378, 7), (379, 10), (380, 6), (383, 4), (385, 6), (387, 11), (389, 4), (390, 5), (396, 4), (398, 5), (402, 10), (403, 9), (404, 8), (405, 7), (407, 8), (412, 8), (414, 8), (415, 4), (417, 8), (418, 9), (423, 6), (429, 4), (430, 4), (431, 4), (433, 4), (435, 10), (436, 7), (437, 10), (439, 11), (443, 6)]
nb_edges_0 = 475 rho= 0.1 # of rows = 11 # of columns= 185 total_degree_0= 475 RHS= 47.5
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  16 with obj value: 108.95737704918034 KP time = 0.498968459200114 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01570 - (Local CPU) 0.01570 - (Global CPU) 0.51467

 Solve status: Optimal Objective value: 24.00000 nb_rows 11 nb_cols 178
----------------------------------------
----------------------------------------

        Updated data after iteration: 16 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (11, 178) and density : 0.783 and number of remaining ones : 1560
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.783 density  and density_threshold= 0.900


I am in the while loop with i= 17 density= 0.7834525025536262 and fixed_threshold= 0.9

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 92.371
I solved model name = row_knapsack_problem for iteration i =  17 with obj value: 92.37142857142857 KP time = 0.5146693342830986 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01408 - (Local CPU) 0.01408 - (Global CPU) 0.52875

 Solve status: Optimal Objective value: 92.37143 nb_rows 10 nb_cols 178
----------------------------------------
----------------------------------------

        Updated data after iteration: 17 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (10, 178) and density : 0.793 and number of remaining ones : 1412
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(18, 8), (19, 7), (21, 9), (23, 8), (24, 8), (25, 9), (26, 8), (27, 9), (29, 8), (31, 9), (32, 8), (34, 8), (36, 9), (37, 8), (38, 7), (41, 8), (47, 9), (49, 8), (50, 10), (52, 9), (57, 9), (61, 8), (64, 7), (70, 9), (74, 6), (76, 8), (78, 10), (80, 9), (82, 8), (83, 9), (84, 8), (92, 9), (93, 8), (94, 8), (96, 7), (98, 9), (112, 6), (115, 5), (117, 5), (119, 6), (120, 4), (122, 6), (125, 5), (129, 7), (130, 5), (136, 4), (137, 9), (139, 9), (141, 9), (144, 8), (146, 8), (148, 9), (149, 9), (155, 8), (158, 8), (159, 4), (160, 9), (161, 6), (165, 9), (166, 7), (168, 8), (171, 9), (174, 8), (178, 8), (180, 6), (181, 6), (182, 9), (183, 8), (184, 9), (185, 7), (187, 8), (188, 7), (190, 8), (194, 8), (197, 7), (199, 8), (207, 8), (208, 7), (210, 4), (213, 7), (216, 10), (217, 6), (220, 9), (222, 9), (225, 7), (226, 6), (230, 7), (236, 8), (238, 9), (239, 7), (241, 7), (243, 10), (246, 10), (248, 10), (250, 10), (253, 8), (255, 8), (256, 10), (257, 10), (261, 10), (263, 10), (264, 10), (269, 8), (273, 8), (277, 10), (280, 9), (286, 9), (287, 9), (288, 8), (290, 10), (292, 8), (294, 9), (298, 7), (299, 8), (301, 10), (304, 7), (306, 10), (307, 9), (308, 10), (310, 10), (311, 10), (312, 10), (318, 8), (320, 10), (321, 10), (322, 10), (323, 8), (324, 10), (326, 8), (330, 10), (332, 8), (340, 7), (341, 6), (352, 8), (353, 9), (354, 7), (355, 7), (357, 7), (358, 7), (359, 6), (360, 9), (361, 9), (362, 10), (363, 10), (364, 10), (368, 10), (369, 10), (373, 10), (374, 10), (375, 9), (377, 9), (378, 7), (379, 9), (380, 6), (385, 5), (387, 10), (389, 4), (390, 5), (398, 4), (402, 9), (403, 8), (404, 7), (405, 6), (407, 7), (412, 7), (414, 7), (415, 3), (417, 7), (418, 8), (423, 6), (429, 4), (431, 4), (433, 3), (435, 9), (436, 7), (437, 9), (439, 10), (443, 5)]
nb_edges_0 = 368 rho= 0.1 # of rows = 10 # of columns= 178 total_degree_0= 368 RHS= 36.800000000000004
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  17 with obj value: 92.37142857142857 KP time = 0.5287483342690393 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01496 - (Local CPU) 0.01496 - (Global CPU) 0.54371

 Solve status: Optimal Objective value: 21.20000 nb_rows 10 nb_cols 172
----------------------------------------
----------------------------------------

        Updated data after iteration: 17 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (10, 172) and density : 0.808 and number of remaining ones : 1412
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.808 density  and density_threshold= 0.900


I am in the while loop with i= 18 density= 0.8081395348837209 and fixed_threshold= 0.9

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 80.520
I solved model name = row_knapsack_problem for iteration i =  18 with obj value: 80.52000000000001 KP time = 0.5437077512033284 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01378 - (Local CPU) 0.01378 - (Global CPU) 0.55748

 Solve status: Optimal Objective value: 80.52000 nb_rows 9 nb_cols 172
----------------------------------------
----------------------------------------

        Updated data after iteration: 18 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (9, 172) and density : 0.819 and number of remaining ones : 1268
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(18, 8), (19, 7), (21, 8), (23, 7), (24, 7), (25, 8), (26, 7), (27, 8), (29, 7), (31, 8), (32, 7), (34, 7), (36, 8), (37, 7), (38, 6), (41, 7), (47, 8), (49, 7), (50, 9), (52, 8), (57, 8), (61, 7), (64, 6), (70, 8), (74, 5), (76, 7), (78, 9), (80, 8), (82, 7), (83, 8), (84, 7), (92, 8), (93, 8), (94, 8), (96, 7), (98, 8), (112, 6), (115, 5), (117, 5), (119, 6), (122, 6), (125, 5), (129, 6), (130, 5), (136, 4), (137, 8), (139, 8), (141, 9), (144, 8), (146, 8), (148, 8), (149, 9), (155, 8), (158, 8), (159, 4), (160, 8), (161, 6), (165, 8), (166, 7), (168, 8), (171, 9), (174, 8), (178, 7), (180, 6), (181, 6), (182, 8), (183, 7), (184, 8), (185, 6), (187, 8), (188, 7), (190, 7), (194, 8), (197, 7), (199, 8), (207, 8), (208, 7), (213, 6), (216, 9), (217, 6), (220, 8), (222, 8), (225, 7), (226, 6), (230, 6), (236, 8), (238, 8), (239, 7), (241, 7), (243, 9), (246, 9), (248, 9), (250, 9), (253, 7), (255, 7), (256, 9), (257, 9), (261, 9), (263, 9), (264, 9), (269, 7), (273, 7), (277, 9), (280, 8), (286, 8), (287, 8), (288, 7), (290, 9), (292, 7), (294, 8), (298, 6), (299, 7), (301, 9), (304, 6), (306, 9), (307, 9), (308, 9), (310, 9), (311, 9), (312, 9), (318, 7), (320, 9), (321, 9), (322, 9), (323, 7), (324, 9), (326, 7), (330, 9), (332, 7), (340, 6), (341, 5), (352, 7), (353, 8), (354, 6), (355, 6), (357, 6), (358, 6), (359, 5), (360, 8), (361, 8), (362, 9), (363, 9), (364, 9), (368, 9), (369, 9), (373, 9), (374, 9), (375, 8), (377, 8), (378, 6), (379, 8), (380, 6), (385, 4), (387, 9), (389, 4), (390, 4), (402, 8), (403, 8), (404, 7), (405, 6), (407, 7), (412, 7), (414, 7), (417, 6), (418, 7), (423, 5), (431, 4), (435, 8), (436, 6), (437, 8), (439, 9), (443, 4)]
nb_edges_0 = 280 rho= 0.1 # of rows = 9 # of columns= 172 total_degree_0= 280 RHS= 28.0
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  18 with obj value: 80.52000000000001 KP time = 0.5574848351534456 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01470 - (Local CPU) 0.01470 - (Global CPU) 0.57219

 Solve status: Optimal Objective value: 22.40000 nb_rows 9 nb_cols 166
----------------------------------------
----------------------------------------

        Updated data after iteration: 18 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (9, 166) and density : 0.833 and number of remaining ones : 1268
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.833 density  and density_threshold= 0.900


I am in the while loop with i= 19 density= 0.8326639892904953 and fixed_threshold= 0.9

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 84.211
I solved model name = row_knapsack_problem for iteration i =  19 with obj value: 84.21052631578948 KP time = 0.5721860431367531 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01365 - (Local CPU) 0.01365 - (Global CPU) 0.58584

 Solve status: Optimal Objective value: 84.21053 nb_rows 8 nb_cols 166
----------------------------------------
----------------------------------------

        Updated data after iteration: 19 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (8, 166) and density : 0.840 and number of remaining ones : 1116
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(18, 7), (19, 6), (21, 7), (23, 6), (24, 6), (25, 7), (26, 6), (27, 7), (29, 6), (31, 7), (32, 6), (34, 6), (36, 7), (37, 6), (38, 5), (41, 6), (47, 7), (49, 6), (50, 8), (52, 7), (57, 7), (61, 6), (64, 5), (70, 7), (74, 4), (76, 6), (78, 8), (80, 7), (82, 6), (83, 7), (84, 6), (92, 7), (93, 7), (94, 7), (96, 6), (98, 7), (112, 5), (115, 4), (117, 4), (119, 5), (122, 5), (125, 4), (129, 5), (130, 4), (137, 7), (139, 7), (141, 8), (144, 7), (146, 7), (148, 7), (149, 8), (155, 8), (158, 8), (160, 8), (161, 6), (165, 8), (166, 7), (168, 8), (171, 8), (174, 7), (178, 7), (180, 6), (181, 6), (182, 7), (183, 7), (184, 8), (185, 6), (187, 7), (188, 7), (190, 7), (194, 8), (197, 7), (199, 7), (207, 8), (208, 7), (213, 5), (216, 8), (217, 6), (220, 7), (222, 7), (225, 7), (226, 6), (230, 6), (236, 7), (238, 8), (239, 7), (241, 7), (243, 8), (246, 8), (248, 8), (250, 8), (253, 6), (255, 7), (256, 8), (257, 8), (261, 8), (263, 8), (264, 8), (269, 6), (273, 6), (277, 8), (280, 7), (286, 7), (287, 7), (288, 6), (290, 8), (292, 6), (294, 7), (298, 6), (299, 7), (301, 8), (304, 6), (306, 8), (307, 8), (308, 8), (310, 8), (311, 8), (312, 8), (318, 6), (320, 8), (321, 8), (322, 8), (323, 6), (324, 8), (326, 6), (330, 8), (332, 6), (340, 6), (341, 4), (352, 7), (353, 7), (354, 6), (355, 6), (357, 6), (358, 6), (359, 5), (360, 7), (361, 7), (362, 8), (363, 8), (364, 8), (368, 8), (369, 8), (373, 8), (374, 8), (375, 7), (377, 7), (378, 5), (379, 7), (380, 5), (387, 8), (402, 7), (403, 7), (404, 6), (405, 5), (407, 6), (412, 6), (414, 6), (417, 6), (418, 6), (423, 4), (435, 7), (436, 5), (437, 7), (439, 8), (443, 3)]
nb_edges_0 = 212 rho= 0.1 # of rows = 8 # of columns= 166 total_degree_0= 212 RHS= 21.200000000000003
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  19 with obj value: 84.21052631578948 KP time = 0.5858366681495681 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01467 - (Local CPU) 0.01467 - (Global CPU) 0.60051

 Solve status: Optimal Objective value: 19.20000 nb_rows 8 nb_cols 160
----------------------------------------
----------------------------------------

        Updated data after iteration: 19 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (8, 160) and density : 0.854 and number of remaining ones : 1116
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.854 density  and density_threshold= 0.900


I am in the while loop with i= 20 density= 0.85390625 and fixed_threshold= 0.9

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 71.967
I solved model name = row_knapsack_problem for iteration i =  20 with obj value: 71.96666666666667 KP time = 0.6005089601967484 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01309 - (Local CPU) 0.01309 - (Global CPU) 0.61360

 Solve status: Optimal Objective value: 71.96667 nb_rows 7 nb_cols 160
----------------------------------------
----------------------------------------

        Updated data after iteration: 20 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (7, 160) and density : 0.863 and number of remaining ones : 966
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(18, 7), (19, 6), (21, 7), (23, 6), (24, 6), (25, 6), (26, 5), (27, 7), (29, 6), (31, 6), (32, 6), (34, 6), (36, 7), (37, 6), (38, 5), (41, 6), (47, 7), (49, 6), (50, 7), (52, 7), (57, 7), (61, 5), (64, 5), (70, 7), (76, 5), (78, 7), (80, 6), (82, 5), (83, 6), (84, 5), (92, 6), (93, 6), (94, 6), (96, 5), (98, 6), (112, 4), (115, 3), (117, 3), (119, 4), (122, 4), (129, 4), (137, 6), (139, 6), (141, 7), (144, 6), (146, 6), (148, 6), (149, 7), (155, 7), (158, 7), (160, 7), (161, 6), (165, 7), (166, 6), (168, 7), (171, 7), (174, 6), (178, 6), (180, 6), (181, 6), (182, 7), (183, 6), (184, 7), (185, 5), (187, 6), (188, 6), (190, 6), (194, 7), (197, 6), (199, 6), (207, 7), (208, 6), (213, 5), (216, 7), (217, 5), (220, 6), (222, 6), (225, 6), (226, 5), (230, 5), (236, 6), (238, 7), (239, 6), (241, 6), (243, 7), (246, 7), (248, 7), (250, 7), (253, 5), (255, 6), (256, 7), (257, 7), (261, 7), (263, 7), (264, 7), (269, 5), (273, 5), (277, 7), (280, 6), (286, 6), (287, 6), (288, 6), (290, 7), (292, 6), (294, 6), (298, 6), (299, 6), (301, 7), (304, 5), (306, 7), (307, 7), (308, 7), (310, 7), (311, 7), (312, 7), (318, 5), (320, 7), (321, 7), (322, 7), (323, 5), (324, 7), (326, 5), (330, 7), (332, 5), (340, 6), (352, 6), (353, 6), (354, 5), (355, 5), (357, 5), (358, 5), (359, 5), (360, 6), (361, 7), (362, 7), (363, 7), (364, 7), (368, 7), (369, 7), (373, 7), (374, 7), (375, 6), (377, 6), (378, 5), (379, 6), (380, 5), (387, 7), (402, 6), (403, 6), (404, 5), (405, 5), (407, 5), (412, 5), (414, 5), (417, 5), (418, 5), (435, 6), (436, 4), (437, 6), (439, 7)]
nb_edges_0 = 154 rho= 0.1 # of rows = 7 # of columns= 160 total_degree_0= 154 RHS= 15.4
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  20 with obj value: 71.96666666666667 KP time = 0.6136025012237951 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01588 - (Local CPU) 0.01588 - (Global CPU) 0.62949

 Solve status: Optimal Objective value: 15.86667 nb_rows 7 nb_cols 155
----------------------------------------
----------------------------------------

        Updated data after iteration: 20 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (7, 155) and density : 0.874 and number of remaining ones : 966
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.874 density  and density_threshold= 0.900


I am in the while loop with i= 21 density= 0.8737327188940092 and fixed_threshold= 0.9

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 64.948
I solved model name = row_knapsack_problem for iteration i =  21 with obj value: 64.94814814814815 KP time = 0.6294857932953164 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01407 - (Local CPU) 0.01407 - (Global CPU) 0.64355

 Solve status: Optimal Objective value: 64.94815 nb_rows 6 nb_cols 155
----------------------------------------
----------------------------------------

        Updated data after iteration: 21 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (6, 155) and density : 0.882 and number of remaining ones : 820
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(18, 6), (19, 6), (21, 6), (23, 6), (24, 6), (25, 6), (26, 5), (27, 6), (29, 6), (31, 6), (32, 6), (34, 6), (36, 6), (37, 6), (38, 5), (41, 6), (47, 6), (49, 5), (50, 6), (52, 6), (57, 6), (61, 5), (64, 5), (70, 6), (76, 4), (78, 6), (80, 6), (82, 5), (83, 6), (84, 5), (92, 5), (93, 6), (94, 6), (96, 5), (98, 5), (112, 4), (137, 5), (139, 5), (141, 6), (144, 5), (146, 5), (148, 5), (149, 6), (155, 6), (158, 6), (160, 6), (161, 5), (165, 6), (166, 5), (168, 6), (171, 6), (174, 5), (178, 5), (180, 5), (181, 5), (182, 6), (183, 5), (184, 6), (185, 5), (187, 6), (188, 6), (190, 6), (194, 6), (197, 5), (199, 5), (207, 6), (208, 5), (213, 4), (216, 6), (217, 4), (220, 5), (222, 5), (225, 5), (226, 4), (230, 4), (236, 5), (238, 6), (239, 5), (241, 5), (243, 6), (246, 6), (248, 6), (250, 6), (253, 4), (255, 5), (256, 6), (257, 6), (261, 6), (263, 6), (264, 6), (269, 4), (273, 4), (277, 6), (280, 5), (286, 5), (287, 5), (288, 5), (290, 6), (292, 5), (294, 5), (298, 5), (299, 5), (301, 6), (304, 4), (306, 6), (307, 6), (308, 6), (310, 6), (311, 6), (312, 6), (318, 4), (320, 6), (321, 6), (322, 6), (323, 4), (324, 6), (326, 4), (330, 6), (332, 4), (340, 5), (352, 5), (353, 5), (354, 4), (355, 4), (357, 4), (358, 4), (359, 4), (360, 5), (361, 6), (362, 6), (363, 6), (364, 6), (368, 6), (369, 6), (373, 6), (374, 6), (375, 5), (377, 5), (378, 4), (379, 5), (380, 4), (387, 6), (402, 5), (403, 5), (404, 4), (405, 4), (407, 4), (412, 4), (414, 4), (417, 5), (418, 4), (435, 5), (436, 3), (437, 5), (439, 6)]
nb_edges_0 = 110 rho= 0.1 # of rows = 6 # of columns= 155 total_degree_0= 110 RHS= 11.0
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  21 with obj value: 64.94814814814815 KP time = 0.6435541682876647 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01461 - (Local CPU) 0.01461 - (Global CPU) 0.65817

 Solve status: Optimal Objective value: 19.00000 nb_rows 6 nb_cols 150
----------------------------------------
----------------------------------------

        Updated data after iteration: 21 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (6, 150) and density : 0.890 and number of remaining ones : 820
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.890 density  and density_threshold= 0.900


I am in the while loop with i= 22 density= 0.89 and fixed_threshold= 0.9

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 57.600
I solved model name = row_knapsack_problem for iteration i =  22 with obj value: 57.6 KP time = 0.6581674183253199 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01339 - (Local CPU) 0.01340 - (Global CPU) 0.67156

 Solve status: Optimal Objective value: 57.60000 nb_rows 5 nb_cols 150
----------------------------------------
----------------------------------------

        Updated data after iteration: 22 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (5, 150) and density : 0.897 and number of remaining ones : 673
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(18, 5), (19, 5), (21, 5), (23, 5), (24, 5), (25, 5), (26, 4), (27, 5), (29, 5), (31, 5), (32, 5), (34, 5), (36, 5), (37, 5), (38, 4), (41, 5), (47, 5), (49, 4), (50, 5), (52, 5), (57, 5), (61, 4), (64, 4), (70, 5), (76, 3), (78, 5), (80, 5), (82, 4), (83, 5), (84, 4), (92, 4), (93, 5), (94, 5), (96, 4), (98, 4), (112, 3), (137, 4), (139, 4), (141, 5), (144, 4), (146, 4), (148, 4), (149, 5), (155, 5), (158, 5), (160, 5), (161, 4), (165, 5), (166, 4), (168, 5), (171, 5), (174, 4), (178, 4), (180, 4), (181, 4), (182, 5), (183, 4), (184, 5), (185, 5), (187, 5), (188, 5), (190, 5), (194, 5), (197, 5), (199, 5), (207, 5), (208, 5), (213, 4), (216, 5), (217, 4), (220, 4), (222, 4), (225, 5), (236, 5), (238, 5), (239, 5), (241, 5), (243, 5), (246, 5), (248, 5), (250, 5), (253, 4), (255, 4), (256, 5), (257, 5), (261, 5), (263, 5), (264, 5), (273, 3), (277, 5), (280, 4), (286, 4), (287, 4), (288, 4), (290, 5), (292, 4), (294, 4), (298, 4), (299, 4), (301, 5), (304, 3), (306, 5), (307, 5), (308, 5), (310, 5), (311, 5), (312, 5), (318, 4), (320, 5), (321, 5), (322, 5), (323, 4), (324, 5), (326, 4), (330, 5), (332, 4), (340, 4), (352, 4), (353, 5), (354, 4), (355, 4), (358, 4), (359, 4), (360, 4), (361, 5), (362, 5), (363, 5), (364, 5), (368, 5), (369, 5), (373, 5), (374, 5), (375, 4), (377, 4), (378, 3), (379, 4), (380, 3), (387, 5), (402, 4), (403, 4), (404, 3), (405, 3), (407, 3), (412, 3), (414, 4), (417, 4), (418, 4), (435, 4), (437, 4), (439, 5)]
nb_edges_0 = 77 rho= 0.1 # of rows = 5 # of columns= 150 total_degree_0= 77 RHS= 7.7
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  22 with obj value: 57.6 KP time = 0.6715624603675678 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01451 - (Local CPU) 0.01451 - (Global CPU) 0.68607

 Solve status: Optimal Objective value: 11.55000 nb_rows 5 nb_cols 146
----------------------------------------
----------------------------------------

        Updated data after iteration: 22 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (5, 146) and density : 0.905 and number of remaining ones : 673
        

----------------------------------------
----------------------------------------

----------------------------------------

            End of greedy approaches. Exit while loop. I did: 22 iterations
            Density : 0.905 > 0.900
            It took me : 0.686 time
            Found matrix of size : (5, 146) and density : 0.905
            
----------------------------------------

 Calling exact approaches for QB clique discovery with delta = 0.0
----------------------------------------

----------------------------------------

I am in warm_exact before calling max_e_h $$$$$$$$$$$$$$$$$$

----------------------------------------------------------------------
Model status: Optimal
----------------------------------------------------------------------
Computed by max_e_h Objective Value : 1076.000 
Model status: Optimal
Solution saved to Experiments/prob_8/results_h_2_M_1.csv

----------------------------------------------------------------------
Stats
 Model solved : max_e_h  Local Time:  - (real) 0.02797 - (Local CPU) 0.02797 - (Global CPU) 0.02797

 Solve status: Optimal Objective value: 1076.00000 nb_rows 5 nb_cols 83
----------------------------------------

----------------------------------------
Results from updating data after solving model = max_e_h  delta =   0.0
Number of Remaining number  Rows  : 5
Number of Remaining number Columns : 83
Remaining  number Edges_0 P: 0 Remaining  number Edges_1 : 415 Density : 1.0 current obj value 1076.0
----------------------------------------

----------------------------------------

Exit from the heuristic (or exact  approach)  max_e_c  with delta= 0.0 Found matrix with rows_res of lenght = 5  and cols_res of lenght = 83
----------------------------------------

        Exit from the exact approach: max_e_c for matrix 1
        with delta =  0.0
        Found matrix of size : (5, 83)
        and density : 1.000
        and # of ones : 415
        and Heuristic QBC time   : 0.02797
        and Global QBC  time  : 0.02797
        
 Remaining Rows  : [18, 29, 37, 5, 8]
 Remaining  Cols  : [141, 149, 155, 158, 160, 165, 168, 171, 18, 182, 184, 185, 187, 188, 19, 190, 194, 197, 199, 207, 208, 21, 216, 225, 23, 236, 238, 239, 24, 241, 243, 246, 248, 25, 250, 256, 257, 261, 263, 264, 27, 277, 29, 290, 301, 306, 307, 308, 31, 310, 311, 312, 32, 320, 321, 322, 324, 330, 34, 353, 36, 361, 362, 363, 364, 368, 369, 37, 373, 374, 387, 41, 439, 47, 50, 52, 57, 70, 78, 80, 83, 93, 94]

----------------------------------------------------------------------
 
    End of computations for matrix 1 in  data/prob_8.csv at level 2 and debug  2
    With  model: max_e_c and quasi-biclique error: 0.0 
    Size of Remaining matrix : (5,83), with  density : 1.0 and number of ones: 415
    Global Time (in sec): 0.714
    Total Time in QBC approaches: 0.028
    Time in greedy approach: 0.686,  size of matrix found by greedy : (5,146) 
    With density : 0.905 and # ones : 661 
    Time in heuristic only : 0.028 
    Time in warm start only : 0.000
    Number of iterations in greedy approach: 22
    Percentage of greedy approach run time in global run time : 96.08% 
    Percentage of heuristic run time in QBC run time : 100.00%
    With zero deletion rate (rho): 0.1 and threshold: 0.9
    
----------------------------------------------------------------------

dec_conq= 2

 Level 1, Matrix 2:
Size Rows: 59
Size Cols: 466

 Level 1 Matrix  3:
Size Rows: 64
Size Cols: 383

----------------------------------------------------------------------
***Stats Current Input for matrix 2 in  data/prob_8.csv at level 1 and with model:  max_e_c***
Size of current matrix :  59 * 466 = 27494 ; dec_conq: 1
Prev_lower_bound :  None number input zeros :  18063 ; number input ones :  9431
rho =  0.1 ; delta :  0.0
Input density : 0.343 ; density_threshold: 0.90000
----------------------------------------------------------------------
End Current  Stats
----------------------------------------------------------------------


calling greedy approaches for zero deletion, density= 0.343 density  and density_threshold= 0.900


I am in the while loop with i= 1 density= 0.3430202953371645 and fixed_threshold= 0.9

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 101.681
I solved model name = row_knapsack_problem for iteration i =  1 with obj value: 101.68133971291866 KP time = 0.6860725854057819 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01756 - (Local CPU) 0.01757 - (Global CPU) 0.70364

 Solve status: Optimal Objective value: 101.68134 nb_rows 56 nb_cols 466
----------------------------------------
----------------------------------------

        Updated data after iteration: 1 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (56, 466) and density : 0.356 and number of remaining ones : 9302
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(0, 3), (1, 15), (2, 5), (3, 13), (4, 4), (5, 17), (6, 8), (7, 10), (8, 13), (9, 15), (10, 20), (11, 18), (12, 19), (13, 21), (14, 21), (15, 22), (16, 16), (17, 1), (18, 46), (19, 34), (20, 7), (21, 43), (22, 6), (23, 42), (24, 31), (25, 32), (26, 32), (27, 44), (28, 23), (29, 38), (30, 13), (31, 36), (32, 38), (33, 7), (34, 34), (35, 11), (36, 31), (37, 25), (38, 34), (39, 18), (40, 14), (41, 30), (42, 13), (43, 13), (44, 21), (45, 11), (46, 10), (47, 35), (48, 12), (49, 22), (50, 28), (51, 10), (52, 22), (53, 14), (54, 16), (55, 17), (56, 13), (57, 23), (58, 13), (59, 19), (60, 17), (61, 23), (62, 27), (63, 23), (64, 14), (65, 9), (66, 9), (67, 11), (68, 14), (69, 10), (70, 26), (71, 13), (72, 18), (73, 16), (74, 25), (75, 11), (76, 22), (77, 17), (78, 26), (79, 24), (80, 34), (81, 22), (82, 16), (83, 26), (84, 27), (85, 12), (86, 11), (87, 9), (88, 10), (89, 12), (90, 11), (91, 13), (92, 28), (93, 25), (94, 16), (95, 23), (96, 16), (97, 17), (98, 22), (99, 16), (100, 11), (101, 16), (102, 11), (103, 12), (104, 15), (105, 10), (106, 17), (107, 8), (108, 18), (109, 15), (110, 24), (111, 10), (112, 14), (113, 27), (114, 10), (115, 14), (116, 11), (117, 10), (118, 18), (119, 33), (120, 17), (121, 21), (122, 22), (123, 24), (124, 23), (125, 15), (126, 14), (127, 14), (128, 12), (129, 23), (130, 15), (131, 14), (132, 16), (133, 7), (134, 16), (135, 10), (136, 24), (137, 25), (138, 14), (139, 43), (140, 17), (141, 34), (142, 13), (143, 22), (144, 26), (145, 12), (146, 26), (147, 14), (148, 37), (149, 34), (150, 13), (151, 13), (152, 14), (153, 8), (154, 19), (155, 21), (156, 11), (157, 14), (158, 25), (159, 17), (160, 23), (161, 17), (162, 14), (163, 19), (164, 21), (165, 31), (166, 19), (167, 22), (168, 23), (169, 18), (170, 11), (171, 16), (172, 19), (173, 25), (174, 23), (175, 11), (176, 16), (177, 22), (178, 23), (179, 16), (180, 27), (181, 25), (182, 22), (183, 28), (184, 29), (185, 21), (186, 18), (187, 17), (188, 25), (189, 13), (190, 20), (191, 16), (192, 19), (193, 15), (194, 14), (195, 22), (196, 22), (197, 16), (198, 12), (199, 19), (200, 18), (201, 21), (202, 15), (203, 15), (204, 9), (205, 10), (206, 9), (207, 16), (208, 25), (209, 18), (210, 13), (211, 13), (212, 18), (213, 23), (214, 16), (215, 19), (216, 54), (217, 25), (218, 7), (219, 20), (220, 27), (221, 9), (222, 24), (223, 24), (224, 12), (225, 20), (226, 14), (227, 15), (228, 13), (229, 14), (230, 20), (231, 12), (232, 19), (233, 15), (234, 24), (235, 23), (236, 25), (237, 13), (238, 32), (239, 21), (240, 18), (241, 21), (242, 7), (243, 35), (244, 14), (245, 14), (246, 31), (247, 12), (248, 35), (249, 7), (250, 25), (251, 17), (252, 11), (253, 26), (254, 7), (255, 19), (256, 26), (257, 42), (258, 11), (259, 10), (260, 18), (261, 34), (262, 9), (263, 23), (264, 25), (265, 16), (266, 13), (267, 18), (268, 14), (269, 23), (270, 14), (271, 10), (272, 7), (273, 25), (274, 11), (275, 9), (276, 13), (277, 33), (278, 14), (279, 13), (280, 31), (281, 18), (282, 14), (283, 11), (284, 15), (285, 9), (286, 35), (287, 35), (288, 25), (289, 19), (290, 31), (291, 10), (292, 34), (293, 8), (294, 27), (295, 9), (296, 8), (297, 14), (298, 26), (299, 21), (300, 8), (301, 35), (302, 15), (303, 17), (304, 33), (305, 17), (306, 33), (307, 27), (308, 28), (309, 15), (310, 46), (311, 46), (312, 34), (313, 12), (314, 13), (315, 4), (316, 16), (317, 17), (318, 31), (319, 13), (320, 38), (321, 38), (322, 40), (323, 30), (324, 40), (325, 17), (326, 33), (327, 19), (328, 21), (329, 3), (330, 44), (331, 20), (332, 27), (333, 19), (334, 32), (335, 18), (336, 14), (337, 23), (338, 21), (339, 13), (340, 27), (341, 26), (342, 21), (343, 28), (344, 11), (345, 31), (346, 13), (347, 30), (348, 11), (349, 10), (350, 28), (351, 28), (352, 20), (353, 38), (354, 19), (355, 16), (356, 28), (357, 14), (358, 21), (359, 14), (360, 41), (361, 38), (362, 43), (363, 44), (364, 43), (365, 9), (366, 13), (367, 10), (368, 46), (369, 39), (370, 11), (371, 12), (372, 12), (373, 51), (374, 33), (375, 46), (376, 13), (377, 35), (378, 20), (379, 40), (380, 29), (381, 27), (382, 14), (383, 33), (384, 24), (385, 18), (386, 10), (387, 28), (388, 13), (389, 20), (390, 20), (391, 12), (392, 12), (393, 13), (394, 22), (395, 23), (396, 20), (397, 10), (398, 24), (399, 20), (400, 19), (401, 11), (402, 35), (403, 34), (404, 34), (405, 24), (406, 4), (407, 36), (408, 14), (409, 5), (410, 10), (411, 12), (412, 40), (413, 13), (414, 40), (415, 24), (416, 13), (417, 28), (418, 33), (419, 23), (420, 20), (421, 8), (422, 13), (423, 25), (424, 12), (425, 20), (426, 16), (427, 12), (428, 10), (429, 21), (430, 17), (431, 19), (432, 10), (433, 18), (434, 10), (435, 35), (436, 21), (437, 34), (438, 13), (439, 30), (440, 3), (441, 18), (442, 19), (443, 36), (444, 17), (445, 17), (446, 16), (447, 18), (448, 16), (449, 22), (450, 20), (451, 5), (452, 19), (453, 24), (454, 8), (455, 15), (456, 17), (457, 7), (458, 15), (459, 12), (460, 15), (461, 18), (462, 15), (463, 22), (464, 19), (465, 13)]
nb_edges_0 = 16794 rho= 0.1 # of rows = 56 # of columns= 466 total_degree_0= 16794 RHS= 1679.4
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  1 with obj value: 101.68133971291866 KP time = 0.7036380023928359 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01826 - (Local CPU) 0.01826 - (Global CPU) 0.72190

 Solve status: Optimal Objective value: 223.88511 nb_rows 56 nb_cols 432
----------------------------------------
----------------------------------------

        Updated data after iteration: 1 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (56, 432) and density : 0.375 and number of remaining ones : 9302
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.375 density  and density_threshold= 0.900


I am in the while loop with i= 2 density= 0.37524801587301587 and fixed_threshold= 0.9

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 729.828
I solved model name = row_knapsack_problem for iteration i =  2 with obj value: 729.8281690140846 KP time = 0.7219025434460491 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01524 - (Local CPU) 0.01524 - (Global CPU) 0.73715

 Solve status: Optimal Objective value: 729.82817 nb_rows 50 nb_cols 432
----------------------------------------
----------------------------------------

        Updated data after iteration: 2 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (50, 432) and density : 0.381 and number of remaining ones : 8228
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(1, 14), (3, 11), (5, 16), (7, 9), (8, 12), (9, 14), (10, 18), (11, 17), (12, 19), (13, 20), (14, 20), (15, 21), (16, 15), (18, 41), (19, 32), (21, 38), (23, 38), (24, 29), (25, 30), (26, 30), (27, 39), (28, 19), (29, 36), (30, 13), (31, 33), (32, 37), (34, 32), (35, 10), (36, 28), (37, 24), (38, 30), (39, 18), (40, 12), (41, 27), (42, 12), (43, 13), (44, 18), (45, 9), (46, 9), (47, 32), (48, 12), (49, 21), (50, 28), (51, 8), (52, 21), (53, 12), (54, 14), (55, 15), (56, 11), (57, 21), (58, 12), (59, 14), (60, 14), (61, 21), (62, 25), (63, 21), (64, 14), (67, 10), (68, 12), (69, 10), (70, 24), (71, 11), (72, 17), (73, 14), (74, 22), (75, 7), (76, 21), (77, 16), (78, 26), (79, 23), (80, 31), (81, 17), (82, 15), (83, 24), (84, 26), (85, 11), (86, 9), (87, 8), (88, 9), (89, 10), (90, 9), (91, 11), (92, 26), (93, 25), (94, 14), (95, 21), (96, 15), (97, 15), (98, 21), (99, 12), (100, 9), (101, 15), (102, 10), (103, 10), (104, 13), (105, 9), (106, 15), (108, 16), (109, 15), (110, 22), (111, 9), (112, 13), (113, 23), (114, 9), (115, 14), (116, 9), (117, 9), (118, 16), (119, 30), (120, 16), (121, 18), (122, 19), (123, 19), (124, 20), (125, 14), (126, 12), (127, 11), (128, 10), (129, 21), (130, 13), (131, 14), (132, 15), (134, 13), (135, 8), (136, 21), (137, 23), (138, 12), (139, 38), (140, 13), (141, 31), (142, 13), (143, 20), (144, 23), (145, 12), (146, 23), (147, 14), (148, 34), (149, 31), (150, 13), (151, 13), (152, 13), (154, 18), (155, 21), (156, 8), (157, 13), (158, 23), (159, 14), (160, 21), (161, 15), (162, 9), (163, 16), (164, 19), (165, 30), (166, 18), (167, 20), (168, 22), (169, 16), (170, 9), (171, 14), (172, 15), (173, 23), (174, 22), (175, 10), (176, 14), (177, 19), (178, 20), (179, 14), (180, 25), (181, 22), (182, 20), (183, 28), (184, 26), (185, 21), (186, 17), (187, 16), (188, 23), (189, 13), (190, 19), (191, 15), (192, 17), (193, 14), (194, 13), (195, 19), (196, 20), (197, 14), (198, 8), (199, 16), (200, 15), (201, 18), (202, 14), (203, 13), (205, 10), (207, 14), (208, 22), (209, 15), (210, 12), (211, 12), (212, 17), (213, 23), (214, 13), (215, 17), (216, 48), (217, 22), (219, 18), (220, 25), (222, 20), (223, 22), (224, 10), (225, 20), (226, 12), (227, 13), (228, 9), (229, 14), (230, 19), (231, 9), (232, 18), (233, 12), (234, 21), (235, 18), (236, 25), (237, 12), (238, 29), (239, 20), (240, 15), (241, 20), (243, 33), (244, 12), (245, 14), (246, 28), (247, 9), (248, 32), (250, 23), (251, 16), (252, 10), (253, 24), (255, 18), (256, 25), (257, 40), (258, 10), (259, 9), (260, 18), (261, 31), (262, 8), (263, 20), (264, 24), (265, 15), (266, 11), (267, 16), (268, 13), (269, 21), (270, 12), (271, 8), (273, 22), (274, 9), (275, 7), (276, 12), (277, 30), (278, 12), (279, 11), (280, 26), (281, 15), (282, 13), (283, 10), (284, 14), (286, 30), (287, 32), (288, 22), (289, 17), (290, 28), (291, 9), (292, 30), (294, 25), (295, 8), (297, 13), (298, 24), (299, 19), (301, 32), (302, 14), (303, 15), (304, 29), (305, 12), (306, 31), (307, 24), (308, 26), (309, 11), (310, 41), (311, 43), (312, 30), (313, 12), (314, 10), (316, 14), (317, 15), (318, 27), (319, 12), (320, 35), (321, 35), (322, 37), (323, 27), (324, 36), (325, 16), (326, 29), (327, 18), (328, 19), (330, 41), (331, 19), (332, 23), (333, 19), (334, 31), (335, 17), (336, 11), (337, 21), (338, 20), (339, 11), (340, 25), (341, 22), (342, 20), (343, 25), (344, 10), (345, 28), (346, 10), (347, 28), (348, 9), (349, 9), (350, 26), (351, 25), (352, 19), (353, 35), (354, 18), (355, 14), (356, 25), (357, 13), (358, 19), (359, 12), (360, 39), (361, 36), (362, 41), (363, 42), (364, 40), (365, 6), (366, 11), (367, 8), (368, 42), (369, 36), (370, 9), (371, 9), (372, 9), (373, 47), (374, 32), (375, 42), (376, 10), (377, 33), (378, 19), (379, 36), (380, 25), (381, 22), (382, 10), (383, 29), (384, 18), (385, 17), (386, 8), (387, 28), (388, 13), (389, 18), (390, 19), (391, 12), (392, 12), (393, 12), (394, 18), (395, 18), (396, 19), (397, 9), (398, 22), (399, 20), (400, 18), (401, 10), (402, 31), (403, 31), (404, 29), (405, 21), (407, 32), (408, 13), (410, 10), (411, 12), (412, 36), (413, 13), (414, 37), (415, 20), (416, 13), (417, 24), (418, 31), (419, 22), (420, 18), (422, 11), (423, 23), (424, 11), (425, 20), (426, 16), (427, 10), (428, 8), (429, 19), (430, 17), (431, 18), (432, 10), (433, 15), (434, 8), (435, 32), (436, 20), (437, 31), (438, 12), (439, 26), (441, 17), (442, 18), (443, 34), (444, 17), (445, 15), (446, 15), (447, 17), (448, 15), (449, 21), (450, 19), (452, 17), (453, 23), (455, 14), (456, 15), (458, 14), (459, 11), (460, 14), (461, 17), (462, 14), (463, 21), (464, 18), (465, 13)]
nb_edges_0 = 13372 rho= 0.1 # of rows = 50 # of columns= 432 total_degree_0= 13372 RHS= 1337.2
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  2 with obj value: 729.8281690140846 KP time = 0.7371463765157387 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01836 - (Local CPU) 0.01837 - (Global CPU) 0.75551

 Solve status: Optimal Objective value: 270.36098 nb_rows 50 nb_cols 399
----------------------------------------
----------------------------------------

        Updated data after iteration: 2 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (50, 399) and density : 0.398 and number of remaining ones : 8228
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.398 density  and density_threshold= 0.900


I am in the while loop with i= 3 density= 0.39849624060150374 and fixed_threshold= 0.9

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 671.988
I solved model name = row_knapsack_problem for iteration i =  3 with obj value: 671.9881422924901 KP time = 0.7555116674629971 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01552 - (Local CPU) 0.01553 - (Global CPU) 0.77104

 Solve status: Optimal Objective value: 671.98814 nb_rows 45 nb_cols 399
----------------------------------------
----------------------------------------

        Updated data after iteration: 3 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (45, 399) and density : 0.403 and number of remaining ones : 7233
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(1, 13), (3, 11), (5, 15), (7, 9), (8, 12), (9, 14), (10, 17), (11, 17), (12, 19), (13, 20), (14, 20), (15, 19), (16, 15), (18, 36), (19, 27), (21, 34), (23, 34), (24, 25), (25, 26), (26, 26), (27, 35), (28, 18), (29, 31), (30, 12), (31, 30), (32, 34), (34, 29), (35, 7), (36, 25), (37, 22), (38, 26), (39, 16), (40, 12), (41, 24), (42, 11), (43, 11), (44, 16), (47, 28), (48, 11), (49, 20), (50, 25), (52, 20), (53, 12), (54, 13), (55, 13), (56, 11), (57, 19), (58, 10), (59, 14), (60, 12), (61, 19), (62, 22), (63, 20), (64, 14), (67, 7), (68, 10), (69, 9), (70, 22), (71, 10), (72, 16), (73, 12), (74, 20), (76, 21), (77, 14), (78, 23), (79, 21), (80, 27), (81, 13), (82, 15), (83, 22), (84, 23), (85, 10), (89, 8), (91, 9), (92, 25), (93, 24), (94, 14), (95, 18), (96, 13), (97, 13), (98, 19), (99, 11), (100, 9), (101, 14), (102, 10), (103, 9), (104, 11), (106, 14), (108, 14), (109, 13), (110, 20), (111, 7), (112, 12), (113, 19), (115, 13), (117, 9), (118, 13), (119, 27), (120, 15), (121, 16), (122, 18), (123, 16), (124, 16), (125, 14), (126, 10), (127, 9), (128, 8), (129, 20), (130, 13), (131, 13), (132, 12), (134, 12), (136, 19), (137, 22), (138, 10), (139, 34), (140, 11), (141, 29), (142, 11), (143, 17), (144, 22), (145, 11), (146, 22), (147, 14), (148, 32), (149, 30), (150, 11), (151, 11), (152, 11), (154, 14), (155, 20), (157, 13), (158, 18), (159, 11), (160, 18), (161, 12), (163, 13), (164, 18), (165, 28), (166, 16), (167, 19), (168, 20), (169, 14), (171, 14), (172, 14), (173, 22), (174, 20), (175, 10), (176, 12), (177, 17), (178, 19), (179, 13), (180, 22), (181, 19), (182, 18), (183, 26), (184, 22), (185, 19), (186, 14), (187, 16), (188, 21), (189, 12), (190, 17), (191, 15), (192, 15), (193, 13), (194, 13), (195, 18), (196, 19), (197, 13), (199, 14), (200, 14), (201, 15), (202, 13), (203, 12), (205, 10), (207, 13), (208, 21), (209, 12), (210, 10), (211, 11), (212, 15), (213, 22), (214, 13), (215, 15), (216, 43), (217, 19), (219, 17), (220, 24), (222, 19), (223, 18), (224, 7), (225, 17), (226, 12), (227, 11), (229, 13), (230, 18), (232, 16), (233, 10), (234, 18), (235, 17), (236, 23), (237, 12), (238, 28), (239, 17), (240, 14), (241, 19), (243, 30), (244, 9), (245, 13), (246, 27), (247, 9), (248, 31), (250, 21), (251, 14), (252, 8), (253, 22), (255, 16), (256, 24), (257, 38), (258, 7), (260, 17), (261, 31), (263, 18), (264, 23), (265, 13), (266, 10), (267, 16), (268, 12), (269, 19), (270, 10), (273, 20), (276, 12), (277, 26), (278, 10), (279, 9), (280, 23), (281, 12), (282, 11), (283, 9), (284, 11), (286, 28), (287, 29), (288, 21), (289, 14), (290, 26), (292, 28), (294, 21), (297, 10), (298, 20), (299, 17), (301, 29), (302, 13), (303, 14), (304, 27), (305, 11), (306, 29), (307, 22), (308, 23), (309, 10), (310, 37), (311, 39), (312, 27), (313, 11), (314, 8), (316, 14), (317, 14), (318, 23), (319, 11), (320, 33), (321, 33), (322, 35), (323, 26), (324, 34), (325, 14), (326, 27), (327, 16), (328, 17), (330, 38), (331, 18), (332, 21), (333, 18), (334, 28), (335, 15), (336, 10), (337, 18), (338, 19), (339, 9), (340, 24), (341, 19), (342, 17), (343, 22), (344, 9), (345, 23), (346, 8), (347, 26), (350, 23), (351, 21), (352, 17), (353, 32), (354, 18), (355, 14), (356, 23), (357, 13), (358, 18), (359, 12), (360, 37), (361, 34), (362, 39), (363, 39), (364, 38), (366, 9), (368, 40), (369, 34), (371, 6), (372, 6), (373, 42), (374, 30), (375, 39), (376, 6), (377, 33), (378, 19), (379, 34), (380, 23), (381, 17), (382, 8), (383, 24), (384, 16), (385, 15), (387, 27), (388, 11), (389, 17), (390, 19), (391, 12), (392, 12), (393, 11), (394, 16), (395, 16), (396, 19), (397, 7), (398, 20), (399, 17), (400, 15), (401, 10), (402, 28), (403, 27), (404, 25), (405, 18), (407, 28), (408, 12), (410, 10), (411, 12), (412, 32), (413, 11), (414, 33), (415, 18), (416, 12), (417, 23), (418, 29), (419, 19), (420, 17), (422, 10), (423, 20), (424, 11), (425, 19), (426, 14), (427, 8), (429, 16), (430, 15), (431, 16), (432, 10), (433, 14), (435, 29), (436, 19), (437, 28), (438, 9), (439, 22), (441, 17), (442, 18), (443, 31), (444, 15), (445, 15), (446, 14), (447, 16), (448, 14), (449, 20), (450, 19), (452, 17), (453, 22), (455, 14), (456, 14), (458, 14), (459, 11), (460, 14), (461, 15), (462, 14), (463, 20), (464, 18), (465, 13)]
nb_edges_0 = 10722 rho= 0.1 # of rows = 45 # of columns= 399 total_degree_0= 10722 RHS= 1072.2
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  3 with obj value: 671.9881422924901 KP time = 0.7710378335323185 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01827 - (Local CPU) 0.01827 - (Global CPU) 0.78931

 Solve status: Optimal Objective value: 233.05000 nb_rows 45 nb_cols 369
----------------------------------------
----------------------------------------

        Updated data after iteration: 3 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (45, 369) and density : 0.421 and number of remaining ones : 7233
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.421 density  and density_threshold= 0.900


I am in the while loop with i= 4 density= 0.42101776573321287 and fixed_threshold= 0.9

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 607.509
I solved model name = row_knapsack_problem for iteration i =  4 with obj value: 607.5089285714286 KP time = 0.7893065835814923 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01541 - (Local CPU) 0.01541 - (Global CPU) 0.80472

 Solve status: Optimal Objective value: 607.50893 nb_rows 40 nb_cols 369
----------------------------------------
----------------------------------------

        Updated data after iteration: 4 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (40, 369) and density : 0.425 and number of remaining ones : 6275
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(1, 11), (3, 10), (5, 13), (8, 9), (9, 12), (10, 14), (11, 13), (12, 17), (13, 18), (14, 18), (15, 17), (16, 12), (18, 32), (19, 23), (21, 31), (23, 30), (24, 22), (25, 23), (26, 23), (27, 32), (28, 17), (29, 27), (30, 9), (31, 27), (32, 30), (34, 25), (36, 23), (37, 19), (38, 23), (39, 15), (40, 12), (41, 23), (42, 11), (43, 11), (44, 15), (47, 26), (48, 9), (49, 18), (50, 24), (52, 19), (53, 9), (54, 10), (55, 11), (56, 8), (57, 18), (58, 10), (59, 11), (60, 11), (61, 18), (62, 21), (63, 17), (64, 14), (68, 10), (70, 22), (71, 8), (72, 15), (73, 8), (74, 18), (76, 20), (77, 12), (78, 20), (79, 17), (80, 25), (81, 12), (82, 15), (83, 20), (84, 21), (85, 8), (92, 22), (93, 20), (94, 14), (95, 17), (96, 12), (97, 11), (98, 18), (99, 8), (101, 13), (102, 7), (103, 6), (104, 11), (106, 11), (108, 13), (109, 11), (110, 17), (112, 11), (113, 17), (115, 11), (118, 12), (119, 22), (120, 14), (121, 15), (122, 14), (123, 14), (124, 16), (125, 11), (126, 10), (129, 17), (130, 11), (131, 13), (132, 11), (134, 12), (136, 18), (137, 19), (138, 9), (139, 31), (140, 11), (141, 25), (142, 9), (143, 17), (144, 19), (145, 10), (146, 18), (147, 13), (148, 28), (149, 25), (150, 10), (151, 11), (152, 10), (154, 13), (155, 17), (157, 11), (158, 16), (159, 11), (160, 18), (161, 10), (163, 13), (164, 17), (165, 25), (166, 15), (167, 18), (168, 18), (169, 12), (171, 14), (172, 12), (173, 22), (174, 17), (175, 9), (176, 12), (177, 16), (178, 18), (179, 12), (180, 21), (181, 18), (182, 17), (183, 24), (184, 21), (185, 19), (186, 14), (187, 14), (188, 20), (189, 9), (190, 16), (191, 12), (192, 14), (193, 12), (194, 13), (195, 16), (196, 17), (197, 12), (199, 12), (200, 12), (201, 14), (202, 9), (203, 11), (205, 9), (207, 13), (208, 19), (209, 12), (210, 10), (211, 10), (212, 13), (213, 20), (214, 13), (215, 12), (216, 38), (217, 18), (219, 15), (220, 21), (222, 18), (223, 14), (225, 14), (226, 10), (227, 9), (229, 11), (230, 16), (232, 15), (233, 10), (234, 15), (235, 16), (236, 19), (237, 10), (238, 25), (239, 16), (240, 12), (241, 18), (243, 28), (245, 10), (246, 24), (248, 30), (250, 21), (251, 11), (253, 21), (255, 16), (256, 23), (257, 35), (260, 16), (261, 29), (263, 18), (264, 22), (265, 13), (266, 8), (267, 15), (268, 9), (269, 19), (270, 10), (273, 17), (276, 11), (277, 23), (278, 8), (280, 21), (281, 10), (282, 9), (284, 10), (286, 25), (287, 25), (288, 18), (289, 14), (290, 23), (292, 25), (294, 19), (297, 10), (298, 19), (299, 16), (301, 27), (302, 12), (303, 13), (304, 24), (305, 10), (306, 27), (307, 20), (308, 22), (309, 8), (310, 34), (311, 36), (312, 25), (313, 8), (316, 12), (317, 12), (318, 22), (319, 10), (320, 30), (321, 31), (322, 33), (323, 25), (324, 29), (325, 12), (326, 24), (327, 14), (328, 15), (330, 33), (331, 15), (332, 20), (333, 15), (334, 25), (335, 13), (336, 8), (337, 17), (338, 16), (340, 21), (341, 16), (342, 15), (343, 19), (345, 20), (347, 24), (350, 20), (351, 18), (352, 16), (353, 29), (354, 17), (355, 13), (356, 21), (357, 12), (358, 15), (359, 10), (360, 34), (361, 30), (362, 34), (363, 36), (364, 34), (368, 36), (369, 31), (373, 38), (374, 27), (375, 35), (377, 30), (378, 18), (379, 31), (380, 20), (381, 13), (383, 20), (384, 12), (385, 13), (387, 26), (388, 10), (389, 15), (390, 18), (391, 10), (392, 10), (393, 10), (394, 13), (395, 14), (396, 18), (398, 18), (399, 13), (400, 13), (401, 10), (402, 26), (403, 23), (404, 23), (405, 15), (407, 24), (408, 11), (410, 9), (411, 11), (412, 27), (413, 9), (414, 29), (415, 15), (416, 10), (417, 22), (418, 25), (419, 17), (420, 16), (422, 10), (423, 18), (424, 10), (425, 18), (426, 12), (429, 15), (430, 14), (431, 16), (432, 8), (433, 14), (435, 26), (436, 17), (437, 28), (439, 21), (441, 15), (442, 16), (443, 29), (444, 14), (445, 12), (446, 12), (447, 14), (448, 11), (449, 18), (450, 17), (452, 15), (453, 20), (455, 12), (456, 12), (458, 12), (459, 10), (460, 12), (461, 14), (462, 12), (463, 17), (464, 16), (465, 11)]
nb_edges_0 = 8485 rho= 0.1 # of rows = 40 # of columns= 369 total_degree_0= 8485 RHS= 848.5
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  4 with obj value: 607.5089285714286 KP time = 0.8047207925701514 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01791 - (Local CPU) 0.01791 - (Global CPU) 0.82263

 Solve status: Optimal Objective value: 225.69355 nb_rows 40 nb_cols 342
----------------------------------------
----------------------------------------

        Updated data after iteration: 4 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (40, 342) and density : 0.442 and number of remaining ones : 6275
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.442 density  and density_threshold= 0.900


I am in the while loop with i= 5 density= 0.4421052631578947 and fixed_threshold= 0.9

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 520.900
I solved model name = row_knapsack_problem for iteration i =  5 with obj value: 520.9004926108375 KP time = 0.8226270005106926 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01473 - (Local CPU) 0.01474 - (Global CPU) 0.83736

 Solve status: Optimal Objective value: 520.90049 nb_rows 36 nb_cols 342
----------------------------------------
----------------------------------------

        Updated data after iteration: 5 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (36, 342) and density : 0.446 and number of remaining ones : 5493
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(1, 9), (3, 9), (5, 11), (9, 10), (10, 11), (11, 11), (12, 15), (13, 16), (14, 16), (15, 15), (16, 10), (18, 30), (19, 23), (21, 28), (23, 27), (24, 21), (25, 22), (26, 23), (27, 29), (28, 14), (29, 25), (31, 27), (32, 26), (34, 23), (36, 22), (37, 17), (38, 22), (39, 13), (40, 11), (41, 22), (42, 10), (43, 10), (44, 14), (47, 23), (49, 17), (50, 22), (52, 16), (54, 7), (55, 11), (57, 16), (58, 10), (59, 10), (60, 9), (61, 18), (62, 18), (63, 16), (64, 14), (68, 9), (70, 21), (72, 14), (74, 17), (76, 18), (77, 11), (78, 17), (79, 16), (80, 25), (81, 10), (82, 15), (83, 20), (84, 18), (92, 20), (93, 19), (94, 13), (95, 15), (96, 12), (97, 11), (98, 16), (101, 10), (104, 10), (106, 10), (108, 12), (109, 10), (110, 13), (112, 10), (113, 15), (115, 10), (118, 11), (119, 18), (120, 12), (121, 13), (122, 12), (123, 12), (124, 15), (125, 9), (126, 9), (129, 15), (130, 10), (131, 12), (132, 9), (134, 10), (136, 16), (137, 18), (139, 29), (140, 10), (141, 23), (143, 16), (144, 17), (145, 9), (146, 17), (147, 12), (148, 26), (149, 22), (150, 9), (151, 9), (152, 9), (154, 13), (155, 16), (157, 9), (158, 15), (159, 11), (160, 18), (161, 8), (163, 12), (164, 17), (165, 24), (166, 15), (167, 16), (168, 18), (169, 10), (171, 14), (172, 10), (173, 19), (174, 17), (176, 11), (177, 14), (178, 17), (179, 10), (180, 20), (181, 17), (182, 17), (183, 21), (184, 20), (185, 16), (186, 12), (187, 13), (188, 18), (190, 16), (191, 8), (192, 12), (193, 12), (194, 12), (195, 15), (196, 14), (197, 11), (199, 11), (200, 12), (201, 12), (203, 8), (205, 8), (207, 11), (208, 16), (209, 11), (210, 7), (211, 9), (212, 11), (213, 17), (214, 11), (215, 11), (216, 35), (217, 15), (219, 15), (220, 18), (222, 15), (223, 13), (225, 12), (226, 8), (229, 11), (230, 15), (232, 12), (233, 8), (234, 13), (235, 16), (236, 17), (237, 9), (238, 22), (239, 15), (240, 11), (241, 16), (243, 27), (245, 10), (246, 23), (248, 28), (250, 20), (251, 10), (253, 20), (255, 15), (256, 22), (257, 33), (260, 15), (261, 26), (263, 17), (264, 21), (265, 13), (267, 14), (269, 17), (270, 8), (273, 17), (276, 9), (277, 22), (280, 18), (281, 8), (284, 8), (286, 23), (287, 24), (288, 16), (289, 12), (290, 22), (292, 24), (294, 18), (297, 9), (298, 18), (299, 15), (301, 23), (302, 11), (303, 10), (304, 22), (305, 8), (306, 26), (307, 18), (308, 20), (310, 31), (311, 34), (312, 23), (316, 11), (317, 11), (318, 21), (319, 9), (320, 29), (321, 30), (322, 31), (323, 24), (324, 28), (325, 11), (326, 21), (327, 13), (328, 13), (330, 30), (331, 14), (332, 18), (333, 14), (334, 24), (335, 13), (337, 15), (338, 14), (340, 20), (341, 13), (342, 14), (343, 18), (345, 18), (347, 22), (350, 19), (351, 17), (352, 15), (353, 27), (354, 15), (355, 12), (356, 20), (357, 11), (358, 13), (359, 9), (360, 32), (361, 28), (362, 31), (363, 32), (364, 31), (368, 33), (369, 30), (373, 34), (374, 25), (375, 33), (377, 27), (378, 17), (379, 29), (380, 19), (381, 11), (383, 18), (384, 10), (385, 11), (387, 25), (388, 10), (389, 13), (390, 15), (391, 10), (392, 7), (393, 9), (394, 11), (395, 13), (396, 18), (398, 15), (399, 12), (400, 12), (401, 10), (402, 24), (403, 21), (404, 20), (405, 13), (407, 21), (408, 10), (411, 10), (412, 23), (414, 25), (415, 13), (416, 8), (417, 20), (418, 22), (419, 16), (420, 14), (422, 9), (423, 17), (424, 9), (425, 17), (426, 11), (429, 14), (430, 12), (431, 14), (433, 14), (435, 23), (436, 14), (437, 24), (439, 19), (441, 13), (442, 14), (443, 26), (444, 13), (445, 10), (446, 10), (447, 12), (448, 9), (449, 16), (450, 14), (452, 13), (453, 18), (455, 10), (456, 10), (458, 10), (459, 8), (460, 10), (461, 12), (462, 10), (463, 15), (464, 14), (465, 9)]
nb_edges_0 = 6819 rho= 0.1 # of rows = 36 # of columns= 342 total_degree_0= 6819 RHS= 681.9000000000001
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  5 with obj value: 520.9004926108375 KP time = 0.8373624595114961 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01711 - (Local CPU) 0.01711 - (Global CPU) 0.85447

 Solve status: Optimal Objective value: 203.30000 nb_rows 36 nb_cols 317
----------------------------------------
----------------------------------------

        Updated data after iteration: 5 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (36, 317) and density : 0.463 and number of remaining ones : 5493
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.463 density  and density_threshold= 0.900


I am in the while loop with i= 6 density= 0.46319663512092535 and fixed_threshold= 0.9

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 435.242
I solved model name = row_knapsack_problem for iteration i =  6 with obj value: 435.24175824175825 KP time = 0.8544733754824847 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01626 - (Local CPU) 0.01626 - (Global CPU) 0.87074

 Solve status: Optimal Objective value: 435.24176 nb_rows 32 nb_cols 317
----------------------------------------
----------------------------------------

        Updated data after iteration: 6 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (32, 317) and density : 0.469 and number of remaining ones : 4757
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(3, 7), (5, 9), (9, 9), (10, 9), (11, 9), (12, 12), (13, 13), (14, 13), (15, 12), (16, 8), (18, 28), (19, 21), (21, 26), (23, 25), (24, 19), (25, 20), (26, 21), (27, 26), (28, 12), (29, 21), (31, 26), (32, 25), (34, 22), (36, 22), (37, 17), (38, 21), (39, 11), (40, 8), (41, 19), (42, 8), (43, 8), (44, 12), (47, 21), (49, 16), (50, 21), (52, 16), (55, 10), (57, 15), (58, 9), (59, 9), (60, 8), (61, 17), (62, 14), (63, 12), (64, 12), (68, 8), (70, 19), (72, 11), (74, 16), (76, 17), (77, 10), (78, 15), (79, 12), (80, 24), (81, 8), (82, 14), (83, 18), (84, 15), (92, 17), (93, 16), (94, 10), (95, 13), (96, 10), (97, 10), (98, 14), (101, 10), (104, 9), (106, 9), (108, 10), (109, 7), (110, 13), (112, 8), (113, 14), (115, 8), (118, 10), (119, 16), (120, 11), (121, 11), (122, 11), (123, 10), (124, 13), (125, 8), (129, 13), (130, 9), (131, 12), (132, 7), (134, 8), (136, 15), (137, 17), (139, 26), (140, 9), (141, 21), (143, 14), (144, 16), (145, 6), (146, 17), (147, 11), (148, 25), (149, 19), (150, 6), (151, 7), (152, 7), (154, 12), (155, 15), (158, 15), (159, 10), (160, 18), (163, 12), (164, 15), (165, 23), (166, 14), (167, 14), (168, 17), (169, 8), (171, 12), (172, 9), (173, 16), (174, 16), (176, 10), (177, 12), (178, 17), (179, 10), (180, 17), (181, 16), (182, 17), (183, 19), (184, 20), (185, 16), (186, 10), (187, 12), (188, 16), (190, 15), (192, 10), (193, 12), (194, 11), (195, 14), (196, 14), (197, 11), (199, 11), (200, 9), (201, 9), (207, 11), (208, 14), (209, 11), (212, 9), (213, 16), (214, 8), (215, 9), (216, 31), (217, 14), (219, 13), (220, 17), (222, 14), (223, 12), (225, 12), (229, 10), (230, 12), (232, 11), (234, 11), (235, 15), (236, 16), (237, 9), (238, 21), (239, 13), (240, 10), (241, 14), (243, 23), (245, 9), (246, 21), (248, 25), (250, 18), (251, 8), (253, 19), (255, 14), (256, 19), (257, 29), (260, 13), (261, 25), (263, 15), (264, 19), (265, 11), (267, 13), (269, 14), (273, 16), (276, 7), (277, 21), (280, 17), (286, 20), (287, 23), (288, 15), (289, 11), (290, 21), (292, 22), (294, 17), (297, 7), (298, 18), (299, 15), (301, 20), (302, 11), (303, 7), (304, 21), (306, 24), (307, 17), (308, 18), (310, 28), (311, 31), (312, 22), (316, 8), (317, 9), (318, 20), (320, 27), (321, 28), (322, 29), (323, 22), (324, 26), (325, 10), (326, 19), (327, 11), (328, 11), (330, 29), (331, 11), (332, 18), (333, 13), (334, 22), (335, 10), (337, 14), (338, 12), (340, 18), (341, 12), (342, 12), (343, 17), (345, 17), (347, 19), (350, 16), (351, 14), (352, 14), (353, 25), (354, 14), (355, 12), (356, 18), (357, 11), (358, 13), (360, 30), (361, 26), (362, 28), (363, 29), (364, 29), (368, 29), (369, 28), (373, 31), (374, 23), (375, 30), (377, 24), (378, 16), (379, 27), (380, 18), (381, 10), (383, 17), (384, 8), (385, 9), (387, 22), (388, 9), (389, 12), (390, 12), (391, 9), (393, 9), (394, 11), (395, 12), (396, 16), (398, 13), (399, 12), (400, 11), (401, 10), (402, 22), (403, 19), (404, 18), (405, 13), (407, 19), (408, 9), (411, 8), (412, 20), (414, 22), (415, 10), (417, 19), (418, 18), (419, 14), (420, 13), (423, 14), (425, 15), (426, 9), (429, 13), (430, 11), (431, 13), (433, 13), (435, 22), (436, 13), (437, 24), (439, 17), (441, 10), (442, 12), (443, 22), (444, 11), (445, 8), (446, 8), (447, 10), (449, 13), (450, 12), (452, 11), (453, 15), (455, 8), (456, 9), (458, 8), (460, 8), (461, 10), (462, 8), (463, 13), (464, 12)]
nb_edges_0 = 5387 rho= 0.1 # of rows = 32 # of columns= 317 total_degree_0= 5387 RHS= 538.7
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  6 with obj value: 435.24175824175825 KP time = 0.8707364174770191 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01776 - (Local CPU) 0.01776 - (Global CPU) 0.88850

 Solve status: Optimal Objective value: 163.56667 nb_rows 32 nb_cols 295
----------------------------------------
----------------------------------------

        Updated data after iteration: 6 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (32, 295) and density : 0.487 and number of remaining ones : 4757
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.487 density  and density_threshold= 0.900


I am in the while loop with i= 7 density= 0.4865466101694915 and fixed_threshold= 0.9

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 387.007
I solved model name = row_knapsack_problem for iteration i =  7 with obj value: 387.00679012345677 KP time = 0.8884950844803825 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01555 - (Local CPU) 0.01555 - (Global CPU) 0.90404

 Solve status: Optimal Objective value: 387.00679 nb_rows 29 nb_cols 295
----------------------------------------
----------------------------------------

        Updated data after iteration: 7 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (29, 295) and density : 0.491 and number of remaining ones : 4200
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(5, 8), (9, 7), (10, 7), (11, 7), (12, 9), (13, 11), (14, 11), (15, 9), (16, 6), (18, 25), (19, 19), (21, 24), (23, 23), (24, 18), (25, 19), (26, 20), (27, 24), (28, 10), (29, 19), (31, 24), (32, 23), (34, 20), (36, 20), (37, 17), (38, 20), (39, 9), (40, 8), (41, 17), (44, 10), (47, 19), (49, 15), (50, 18), (52, 15), (55, 10), (57, 14), (58, 8), (59, 8), (61, 16), (62, 13), (63, 11), (64, 11), (68, 8), (70, 18), (72, 11), (74, 15), (76, 14), (77, 9), (78, 14), (79, 9), (80, 22), (81, 8), (82, 12), (83, 17), (84, 14), (92, 16), (93, 14), (94, 8), (95, 12), (96, 9), (97, 10), (98, 12), (101, 10), (104, 8), (106, 8), (108, 9), (110, 12), (112, 7), (113, 13), (115, 8), (118, 10), (119, 16), (120, 10), (121, 10), (122, 10), (123, 10), (124, 11), (129, 11), (130, 8), (131, 10), (136, 14), (137, 15), (139, 24), (140, 9), (141, 18), (143, 12), (144, 15), (146, 17), (147, 10), (148, 23), (149, 19), (154, 10), (155, 14), (158, 14), (159, 9), (160, 17), (163, 10), (164, 13), (165, 20), (166, 14), (167, 12), (168, 16), (171, 12), (172, 8), (173, 15), (174, 16), (176, 8), (177, 12), (178, 17), (179, 9), (180, 14), (181, 14), (182, 16), (183, 19), (184, 19), (185, 15), (186, 8), (187, 12), (188, 15), (190, 14), (192, 8), (193, 11), (194, 10), (195, 11), (196, 13), (197, 10), (199, 11), (200, 8), (201, 9), (207, 11), (208, 13), (209, 9), (212, 8), (213, 15), (214, 8), (215, 7), (216, 28), (217, 13), (219, 10), (220, 17), (222, 14), (223, 11), (225, 10), (229, 9), (230, 11), (232, 11), (234, 9), (235, 15), (236, 14), (237, 8), (238, 20), (239, 11), (240, 9), (241, 12), (243, 22), (245, 7), (246, 20), (248, 23), (250, 17), (251, 6), (253, 19), (255, 14), (256, 19), (257, 26), (260, 11), (261, 23), (263, 15), (264, 18), (265, 10), (267, 12), (269, 14), (273, 16), (277, 20), (280, 17), (286, 18), (287, 23), (288, 15), (289, 9), (290, 21), (292, 19), (294, 16), (298, 16), (299, 15), (301, 19), (302, 9), (304, 19), (306, 23), (307, 17), (308, 18), (310, 26), (311, 29), (312, 20), (316, 8), (317, 8), (318, 18), (320, 26), (321, 26), (322, 27), (323, 21), (324, 25), (325, 9), (326, 19), (327, 10), (328, 10), (330, 27), (331, 9), (332, 18), (333, 11), (334, 21), (335, 8), (337, 13), (338, 11), (340, 15), (341, 11), (342, 11), (343, 16), (345, 15), (347, 18), (350, 15), (351, 13), (352, 13), (353, 23), (354, 13), (355, 11), (356, 17), (357, 10), (358, 12), (360, 27), (361, 23), (362, 25), (363, 26), (364, 26), (368, 26), (369, 25), (373, 28), (374, 20), (375, 27), (377, 22), (378, 14), (379, 24), (380, 16), (381, 9), (383, 15), (384, 7), (385, 9), (387, 20), (388, 8), (389, 11), (390, 11), (391, 8), (393, 8), (394, 10), (395, 12), (396, 15), (398, 12), (399, 11), (400, 9), (401, 9), (402, 20), (403, 16), (404, 17), (405, 11), (407, 16), (408, 8), (411, 8), (412, 19), (414, 21), (415, 10), (417, 17), (418, 16), (419, 13), (420, 12), (423, 14), (425, 14), (426, 7), (429, 12), (430, 11), (431, 12), (433, 12), (435, 21), (436, 12), (437, 23), (439, 17), (441, 8), (442, 10), (443, 20), (444, 10), (447, 7), (449, 11), (450, 9), (452, 9), (453, 12), (456, 7), (461, 8), (463, 11), (464, 10)]
nb_edges_0 = 4355 rho= 0.1 # of rows = 29 # of columns= 295 total_degree_0= 4355 RHS= 435.5
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  7 with obj value: 387.00679012345677 KP time = 0.9040424175327644 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01776 - (Local CPU) 0.01776 - (Global CPU) 0.92180

 Solve status: Optimal Objective value: 146.57143 nb_rows 29 nb_cols 274
----------------------------------------
----------------------------------------

        Updated data after iteration: 7 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (29, 274) and density : 0.509 and number of remaining ones : 4200
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.509 density  and density_threshold= 0.900


I am in the while loop with i= 8 density= 0.5091870123332495 and fixed_threshold= 0.9

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 339.407
I solved model name = row_knapsack_problem for iteration i =  8 with obj value: 339.4068965517241 KP time = 0.9218001255067065 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01537 - (Local CPU) 0.01537 - (Global CPU) 0.93717

 Solve status: Optimal Objective value: 339.40690 nb_rows 26 nb_cols 274
----------------------------------------
----------------------------------------

        Updated data after iteration: 8 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (26, 274) and density : 0.514 and number of remaining ones : 3663
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(5, 5), (12, 6), (13, 9), (14, 8), (15, 6), (18, 22), (19, 17), (21, 22), (23, 20), (24, 17), (25, 18), (26, 19), (27, 22), (28, 8), (29, 18), (31, 23), (32, 21), (34, 19), (36, 19), (37, 16), (38, 19), (39, 6), (40, 6), (41, 16), (44, 9), (47, 17), (49, 14), (50, 16), (52, 14), (55, 8), (57, 13), (58, 7), (59, 7), (61, 14), (62, 11), (63, 9), (64, 11), (68, 6), (70, 16), (72, 9), (74, 13), (76, 13), (77, 9), (78, 14), (79, 7), (80, 19), (82, 10), (83, 16), (84, 14), (92, 16), (93, 12), (94, 8), (95, 10), (96, 9), (97, 10), (98, 12), (101, 9), (106, 8), (108, 8), (110, 11), (113, 12), (115, 8), (118, 7), (119, 14), (120, 10), (121, 8), (122, 10), (123, 8), (124, 8), (129, 11), (130, 8), (131, 9), (136, 11), (137, 15), (139, 21), (140, 8), (141, 16), (143, 11), (144, 13), (146, 15), (147, 9), (148, 20), (149, 16), (154, 9), (155, 12), (158, 12), (159, 7), (160, 14), (163, 9), (164, 11), (165, 18), (166, 11), (167, 12), (168, 14), (171, 12), (172, 8), (173, 13), (174, 15), (176, 8), (177, 11), (178, 14), (179, 8), (180, 12), (181, 11), (182, 16), (183, 17), (184, 17), (185, 13), (186, 8), (187, 10), (188, 12), (190, 13), (192, 7), (193, 10), (194, 8), (195, 11), (196, 12), (197, 8), (199, 8), (200, 8), (201, 8), (207, 11), (208, 11), (209, 9), (213, 15), (216, 25), (217, 12), (219, 8), (220, 16), (222, 13), (223, 9), (225, 8), (229, 9), (230, 9), (232, 10), (234, 8), (235, 14), (236, 13), (237, 8), (238, 19), (239, 10), (240, 9), (241, 10), (243, 21), (246, 19), (248, 23), (250, 17), (253, 17), (255, 14), (256, 18), (257, 24), (260, 9), (261, 21), (263, 14), (264, 18), (265, 8), (267, 10), (269, 14), (273, 15), (277, 19), (280, 16), (286, 17), (287, 20), (288, 15), (289, 7), (290, 21), (292, 17), (294, 16), (298, 13), (299, 15), (301, 18), (302, 7), (304, 18), (306, 22), (307, 16), (308, 18), (310, 24), (311, 26), (312, 18), (318, 17), (320, 25), (321, 25), (322, 25), (323, 19), (324, 24), (325, 8), (326, 17), (327, 9), (328, 9), (330, 25), (331, 8), (332, 17), (333, 9), (334, 19), (335, 8), (337, 11), (338, 10), (340, 14), (341, 11), (342, 9), (343, 15), (345, 14), (347, 16), (350, 13), (351, 12), (352, 12), (353, 22), (354, 12), (355, 11), (356, 16), (357, 9), (358, 12), (360, 26), (361, 22), (362, 23), (363, 24), (364, 24), (368, 24), (369, 24), (373, 26), (374, 19), (375, 25), (377, 19), (378, 13), (379, 22), (380, 15), (381, 8), (383, 14), (385, 9), (387, 17), (388, 5), (389, 8), (390, 9), (394, 9), (395, 11), (396, 13), (398, 11), (399, 8), (400, 8), (401, 8), (402, 19), (403, 16), (404, 16), (405, 10), (407, 16), (408, 6), (411, 6), (412, 19), (414, 19), (415, 10), (417, 15), (418, 15), (419, 12), (420, 10), (423, 13), (425, 13), (429, 12), (430, 11), (431, 9), (433, 10), (435, 20), (436, 12), (437, 21), (439, 17), (441, 5), (442, 7), (443, 17), (444, 9), (449, 8), (450, 6), (452, 6), (453, 9), (463, 8), (464, 7)]
nb_edges_0 = 3461 rho= 0.1 # of rows = 26 # of columns= 274 total_degree_0= 3461 RHS= 346.1
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  8 with obj value: 339.4068965517241 KP time = 0.937169250450097 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01775 - (Local CPU) 0.01775 - (Global CPU) 0.95492

 Solve status: Optimal Objective value: 106.98421 nb_rows 26 nb_cols 256
----------------------------------------
----------------------------------------

        Updated data after iteration: 8 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (26, 256) and density : 0.534 and number of remaining ones : 3663
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.534 density  and density_threshold= 0.900


I am in the while loop with i= 9 density= 0.5336538461538461 and fixed_threshold= 0.9

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 297.146
I solved model name = row_knapsack_problem for iteration i =  9 with obj value: 297.1464566929134 KP time = 0.9549212923739105 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01590 - (Local CPU) 0.01590 - (Global CPU) 0.97083

 Solve status: Optimal Objective value: 297.14646 nb_rows 23 nb_cols 256
----------------------------------------
----------------------------------------

        Updated data after iteration: 9 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (23, 256) and density : 0.539 and number of remaining ones : 3174
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(13, 8), (14, 7), (18, 19), (19, 15), (21, 21), (23, 20), (24, 16), (25, 18), (26, 18), (27, 22), (28, 5), (29, 17), (31, 21), (32, 18), (34, 18), (36, 19), (37, 15), (38, 18), (41, 14), (44, 7), (47, 17), (49, 13), (50, 14), (52, 12), (55, 8), (57, 13), (61, 12), (62, 10), (63, 6), (64, 8), (70, 16), (72, 6), (74, 12), (76, 11), (77, 8), (78, 12), (80, 18), (82, 10), (83, 16), (84, 12), (92, 14), (93, 11), (94, 8), (95, 9), (96, 9), (97, 9), (98, 12), (101, 7), (106, 7), (108, 7), (110, 9), (113, 10), (115, 6), (118, 6), (119, 13), (120, 8), (121, 6), (122, 9), (123, 8), (124, 7), (129, 11), (130, 7), (131, 7), (136, 11), (137, 15), (139, 18), (140, 8), (141, 15), (143, 10), (144, 11), (146, 15), (147, 7), (148, 18), (149, 16), (154, 8), (155, 10), (158, 11), (160, 14), (163, 7), (164, 10), (165, 17), (166, 10), (167, 11), (168, 11), (171, 11), (172, 7), (173, 10), (174, 13), (176, 7), (177, 9), (178, 14), (179, 7), (180, 10), (181, 10), (182, 14), (183, 16), (184, 15), (185, 13), (186, 6), (187, 10), (188, 11), (190, 12), (192, 6), (193, 10), (194, 8), (195, 11), (196, 11), (197, 8), (199, 5), (200, 8), (201, 8), (207, 10), (208, 8), (209, 9), (213, 15), (216, 22), (217, 10), (219, 8), (220, 16), (222, 13), (223, 7), (225, 8), (229, 8), (230, 9), (232, 9), (234, 7), (235, 12), (236, 13), (237, 7), (238, 17), (239, 9), (240, 8), (241, 10), (243, 18), (246, 17), (248, 21), (250, 15), (253, 14), (255, 12), (256, 15), (257, 21), (260, 8), (261, 19), (263, 12), (264, 16), (265, 7), (267, 9), (269, 12), (273, 13), (277, 16), (280, 14), (286, 15), (287, 17), (288, 13), (289, 7), (290, 19), (292, 16), (294, 14), (298, 12), (299, 13), (301, 17), (302, 5), (304, 17), (306, 20), (307, 14), (308, 16), (310, 21), (311, 23), (312, 15), (318, 15), (320, 22), (321, 22), (322, 22), (323, 17), (324, 21), (325, 7), (326, 15), (327, 8), (328, 8), (330, 22), (331, 7), (332, 15), (333, 8), (334, 16), (335, 7), (337, 9), (338, 9), (340, 13), (341, 9), (342, 9), (343, 12), (345, 11), (347, 13), (350, 11), (351, 9), (352, 12), (353, 19), (354, 12), (355, 11), (356, 13), (357, 9), (358, 12), (360, 23), (361, 19), (362, 20), (363, 21), (364, 21), (368, 21), (369, 21), (373, 23), (374, 16), (375, 22), (377, 16), (378, 10), (379, 19), (380, 13), (381, 8), (383, 13), (385, 9), (387, 14), (389, 6), (390, 7), (394, 8), (395, 10), (396, 12), (398, 10), (399, 8), (400, 6), (401, 7), (402, 16), (403, 14), (404, 15), (405, 10), (407, 15), (412, 17), (414, 17), (415, 9), (417, 13), (418, 14), (419, 10), (420, 9), (423, 11), (425, 11), (429, 11), (430, 11), (431, 8), (433, 8), (435, 18), (436, 12), (437, 18), (439, 16), (443, 16), (444, 7), (449, 6), (453, 7), (463, 6)]
nb_edges_0 = 2714 rho= 0.1 # of rows = 23 # of columns= 256 total_degree_0= 2714 RHS= 271.40000000000003
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  9 with obj value: 297.1464566929134 KP time = 0.9708252924028784 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01604 - (Local CPU) 0.01604 - (Global CPU) 0.98686

 Solve status: Optimal Objective value: 94.30000 nb_rows 23 nb_cols 240
----------------------------------------
----------------------------------------

        Updated data after iteration: 9 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (23, 240) and density : 0.558 and number of remaining ones : 3174
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.558 density  and density_threshold= 0.900


I am in the while loop with i= 10 density= 0.5577898550724638 and fixed_threshold= 0.9

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 256.978
I solved model name = row_knapsack_problem for iteration i =  10 with obj value: 256.9782608695652 KP time = 0.9868614594452083 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01468 - (Local CPU) 0.01468 - (Global CPU) 1.00155

 Solve status: Optimal Objective value: 256.97826 nb_rows 20 nb_cols 240
----------------------------------------
----------------------------------------

        Updated data after iteration: 10 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (20, 240) and density : 0.564 and number of remaining ones : 2708
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(13, 7), (14, 7), (18, 16), (19, 12), (21, 18), (23, 17), (24, 13), (25, 15), (26, 15), (27, 19), (29, 14), (31, 19), (32, 15), (34, 15), (36, 16), (37, 12), (38, 15), (41, 12), (44, 5), (47, 15), (49, 13), (50, 13), (52, 12), (55, 6), (57, 13), (61, 10), (62, 8), (64, 8), (70, 13), (74, 11), (76, 11), (77, 7), (78, 11), (80, 15), (82, 10), (83, 14), (84, 12), (92, 13), (93, 10), (94, 7), (95, 7), (96, 8), (97, 7), (98, 12), (101, 6), (106, 5), (108, 6), (110, 7), (113, 9), (119, 10), (120, 8), (122, 9), (123, 7), (124, 5), (129, 11), (130, 7), (131, 6), (136, 9), (137, 14), (139, 16), (140, 6), (141, 14), (143, 8), (144, 10), (146, 13), (147, 6), (148, 17), (149, 14), (154, 6), (155, 9), (158, 9), (160, 12), (163, 5), (164, 9), (165, 14), (166, 9), (167, 9), (168, 9), (171, 10), (172, 6), (173, 8), (174, 11), (176, 6), (177, 7), (178, 12), (180, 9), (181, 7), (182, 13), (183, 14), (184, 12), (185, 12), (187, 9), (188, 8), (190, 11), (193, 10), (194, 8), (195, 8), (196, 8), (197, 6), (200, 7), (201, 6), (207, 10), (208, 7), (209, 7), (213, 14), (216, 19), (217, 10), (219, 7), (220, 15), (222, 12), (223, 5), (225, 5), (229, 6), (230, 9), (232, 7), (235, 10), (236, 11), (237, 6), (238, 15), (239, 8), (240, 8), (241, 8), (243, 17), (246, 15), (248, 18), (250, 14), (253, 13), (255, 12), (256, 14), (257, 20), (260, 5), (261, 18), (263, 12), (264, 15), (265, 5), (267, 8), (269, 11), (273, 12), (277, 14), (280, 14), (286, 13), (287, 15), (288, 13), (289, 5), (290, 17), (292, 14), (294, 12), (298, 11), (299, 12), (301, 15), (304, 15), (306, 17), (307, 14), (308, 14), (310, 19), (311, 20), (312, 15), (318, 15), (320, 20), (321, 20), (322, 20), (323, 15), (324, 20), (325, 5), (326, 15), (327, 5), (328, 5), (330, 20), (331, 5), (332, 14), (333, 5), (334, 14), (335, 5), (337, 8), (338, 7), (340, 10), (341, 9), (342, 8), (343, 10), (345, 9), (347, 11), (350, 9), (351, 7), (352, 12), (353, 17), (354, 11), (355, 11), (356, 11), (357, 9), (358, 12), (360, 20), (361, 17), (362, 18), (363, 18), (364, 18), (368, 18), (369, 18), (373, 20), (374, 16), (375, 19), (377, 15), (378, 9), (379, 17), (380, 12), (381, 6), (383, 10), (385, 9), (387, 13), (390, 7), (394, 7), (395, 8), (396, 11), (398, 10), (399, 6), (401, 6), (402, 16), (403, 14), (404, 12), (405, 10), (407, 15), (412, 15), (414, 14), (415, 6), (417, 12), (418, 14), (419, 7), (420, 6), (423, 11), (425, 10), (429, 9), (430, 11), (431, 7), (433, 6), (435, 16), (436, 12), (437, 17), (439, 15), (443, 13), (444, 5), (453, 6)]
nb_edges_0 = 2092 rho= 0.1 # of rows = 20 # of columns= 240 total_degree_0= 2092 RHS= 209.20000000000002
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  10 with obj value: 256.9782608695652 KP time = 1.0015462094452232 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01664 - (Local CPU) 0.01664 - (Global CPU) 1.01819

 Solve status: Optimal Objective value: 69.73333 nb_rows 20 nb_cols 226
----------------------------------------
----------------------------------------

        Updated data after iteration: 10 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (20, 226) and density : 0.584 and number of remaining ones : 2708
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.584 density  and density_threshold= 0.900


I am in the while loop with i= 11 density= 0.5836283185840708 and fixed_threshold= 0.9

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 210.421
I solved model name = row_knapsack_problem for iteration i =  11 with obj value: 210.42095238095237 KP time = 1.0181901254691184 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01483 - (Local CPU) 0.01483 - (Global CPU) 1.03302

 Solve status: Optimal Objective value: 210.42095 nb_rows 18 nb_cols 226
----------------------------------------
----------------------------------------

        Updated data after iteration: 11 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (18, 226) and density : 0.590 and number of remaining ones : 2399
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(13, 7), (14, 6), (18, 14), (19, 10), (21, 16), (23, 15), (24, 11), (25, 13), (26, 13), (27, 17), (29, 12), (31, 17), (32, 13), (34, 14), (36, 14), (37, 11), (38, 13), (41, 10), (47, 13), (49, 13), (50, 13), (52, 12), (55, 4), (57, 12), (61, 9), (62, 6), (64, 8), (70, 12), (74, 11), (76, 11), (77, 7), (78, 11), (80, 13), (82, 10), (83, 12), (84, 12), (92, 13), (93, 10), (94, 7), (95, 6), (96, 8), (97, 5), (98, 12), (101, 4), (108, 4), (110, 5), (113, 7), (119, 8), (120, 8), (122, 8), (123, 5), (129, 11), (130, 7), (131, 6), (136, 7), (137, 14), (139, 14), (140, 4), (141, 14), (143, 6), (144, 10), (146, 12), (147, 5), (148, 17), (149, 13), (154, 5), (155, 9), (158, 8), (160, 11), (164, 9), (165, 13), (166, 8), (167, 7), (168, 9), (171, 9), (172, 6), (173, 8), (174, 10), (176, 4), (177, 5), (178, 11), (180, 8), (181, 6), (182, 12), (183, 13), (184, 12), (185, 11), (187, 8), (188, 8), (190, 9), (193, 9), (194, 7), (195, 8), (196, 6), (197, 5), (200, 5), (201, 6), (207, 8), (208, 7), (209, 7), (213, 12), (216, 17), (217, 8), (219, 5), (220, 13), (222, 12), (229, 4), (230, 9), (232, 5), (235, 8), (236, 9), (237, 4), (238, 13), (239, 8), (240, 6), (241, 8), (243, 15), (246, 15), (248, 16), (250, 14), (253, 13), (255, 12), (256, 14), (257, 18), (261, 17), (263, 12), (264, 14), (265, 3), (267, 7), (269, 11), (273, 11), (277, 14), (280, 14), (286, 12), (287, 14), (288, 13), (289, 4), (290, 16), (292, 14), (294, 12), (298, 11), (299, 12), (301, 15), (304, 13), (306, 16), (307, 13), (308, 14), (310, 17), (311, 18), (312, 15), (318, 15), (320, 18), (321, 18), (322, 18), (323, 15), (324, 18), (326, 15), (330, 18), (332, 14), (334, 12), (337, 8), (338, 5), (340, 8), (341, 9), (342, 8), (343, 8), (345, 7), (347, 9), (350, 7), (351, 5), (352, 12), (353, 15), (354, 11), (355, 11), (356, 9), (357, 9), (358, 12), (360, 18), (361, 15), (362, 16), (363, 16), (364, 16), (368, 16), (369, 16), (373, 18), (374, 14), (375, 17), (377, 14), (378, 8), (379, 15), (380, 10), (381, 5), (383, 10), (385, 9), (387, 12), (390, 6), (394, 6), (395, 7), (396, 10), (398, 9), (399, 6), (401, 5), (402, 15), (403, 13), (404, 11), (405, 9), (407, 13), (412, 13), (414, 12), (415, 4), (417, 10), (418, 13), (419, 6), (420, 5), (423, 10), (425, 9), (429, 8), (430, 10), (431, 7), (433, 5), (435, 15), (436, 12), (437, 16), (439, 15), (443, 12), (453, 6)]
nb_edges_0 = 1669 rho= 0.1 # of rows = 18 # of columns= 226 total_degree_0= 1669 RHS= 166.9
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  11 with obj value: 210.42095238095237 KP time = 1.0330246664816514 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01560 - (Local CPU) 0.01561 - (Global CPU) 1.04863

 Solve status: Optimal Objective value: 48.96154 nb_rows 18 nb_cols 214
----------------------------------------
----------------------------------------

        Updated data after iteration: 11 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (18, 214) and density : 0.610 and number of remaining ones : 2399
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.610 density  and density_threshold= 0.900


I am in the while loop with i= 12 density= 0.6100726895119418 and fixed_threshold= 0.9

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 187.191
I solved model name = row_knapsack_problem for iteration i =  12 with obj value: 187.1914893617021 KP time = 1.0486315414309502 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01400 - (Local CPU) 0.01400 - (Global CPU) 1.06263

 Solve status: Optimal Objective value: 187.19149 nb_rows 16 nb_cols 214
----------------------------------------
----------------------------------------

        Updated data after iteration: 12 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (16, 214) and density : 0.617 and number of remaining ones : 2112
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(13, 6), (14, 5), (18, 13), (19, 9), (21, 14), (23, 13), (24, 10), (25, 11), (26, 11), (27, 15), (29, 10), (31, 15), (32, 11), (34, 12), (36, 12), (37, 9), (38, 11), (41, 8), (47, 11), (49, 12), (50, 12), (52, 11), (57, 11), (61, 7), (62, 5), (64, 7), (70, 10), (74, 10), (76, 10), (77, 7), (78, 10), (80, 11), (82, 9), (83, 10), (84, 11), (92, 12), (93, 9), (94, 6), (95, 5), (96, 7), (97, 4), (98, 11), (110, 4), (113, 6), (119, 7), (120, 7), (122, 7), (123, 4), (129, 10), (130, 7), (131, 5), (136, 5), (137, 13), (139, 13), (141, 13), (143, 4), (144, 10), (146, 11), (147, 4), (148, 16), (149, 12), (155, 9), (158, 8), (160, 10), (164, 8), (165, 12), (166, 8), (167, 6), (168, 8), (171, 9), (172, 4), (173, 6), (174, 9), (177, 4), (178, 10), (180, 7), (181, 5), (182, 10), (183, 11), (184, 11), (185, 9), (187, 7), (188, 8), (190, 7), (193, 7), (194, 6), (195, 7), (196, 6), (197, 5), (200, 4), (201, 5), (207, 7), (208, 7), (209, 6), (213, 10), (216, 15), (217, 6), (219, 4), (220, 12), (222, 12), (230, 9), (232, 4), (235, 7), (236, 7), (238, 12), (239, 8), (240, 5), (241, 7), (243, 14), (246, 14), (248, 15), (250, 14), (253, 13), (255, 12), (256, 14), (257, 16), (261, 16), (263, 12), (264, 13), (267, 5), (269, 11), (273, 11), (277, 14), (280, 14), (286, 11), (287, 13), (288, 12), (290, 14), (292, 13), (294, 12), (298, 10), (299, 12), (301, 15), (304, 13), (306, 15), (307, 13), (308, 14), (310, 15), (311, 16), (312, 14), (318, 14), (320, 16), (321, 16), (322, 16), (323, 14), (324, 16), (326, 14), (330, 16), (332, 13), (334, 10), (337, 7), (338, 4), (340, 7), (341, 8), (342, 8), (343, 7), (345, 6), (347, 7), (350, 6), (351, 4), (352, 11), (353, 13), (354, 10), (355, 10), (356, 8), (357, 8), (358, 11), (360, 16), (361, 13), (362, 14), (363, 14), (364, 14), (368, 14), (369, 14), (373, 16), (374, 13), (375, 16), (377, 12), (378, 7), (379, 14), (380, 9), (381, 4), (383, 10), (385, 9), (387, 10), (390, 5), (394, 5), (395, 6), (396, 8), (398, 9), (399, 5), (402, 14), (403, 12), (404, 10), (405, 9), (407, 12), (412, 12), (414, 11), (417, 9), (418, 12), (419, 5), (420, 4), (423, 9), (425, 8), (429, 6), (430, 9), (431, 7), (433, 4), (435, 13), (436, 11), (437, 14), (439, 13), (443, 10), (453, 6)]
nb_edges_0 = 1312 rho= 0.1 # of rows = 16 # of columns= 214 total_degree_0= 1312 RHS= 131.20000000000002
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  12 with obj value: 187.1914893617021 KP time = 1.0626294574467465 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01541 - (Local CPU) 0.01541 - (Global CPU) 1.07804

 Solve status: Optimal Objective value: 43.73333 nb_rows 16 nb_cols 203
----------------------------------------
----------------------------------------

        Updated data after iteration: 12 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (16, 203) and density : 0.637 and number of remaining ones : 2112
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.637 density  and density_threshold= 0.900


I am in the while loop with i= 13 density= 0.6366995073891626 and fixed_threshold= 0.9

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 168.157
I solved model name = row_knapsack_problem for iteration i =  13 with obj value: 168.1566265060241 KP time = 1.0780379994539544 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01420 - (Local CPU) 0.01420 - (Global CPU) 1.09224

 Solve status: Optimal Objective value: 168.15663 nb_rows 14 nb_cols 203
----------------------------------------
----------------------------------------

        Updated data after iteration: 13 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (14, 203) and density : 0.644 and number of remaining ones : 1829
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(13, 5), (14, 4), (18, 11), (19, 8), (21, 12), (23, 12), (24, 9), (25, 10), (26, 10), (27, 13), (29, 9), (31, 13), (32, 10), (34, 11), (36, 11), (37, 8), (38, 10), (41, 7), (47, 10), (49, 11), (50, 10), (52, 10), (57, 9), (61, 7), (62, 4), (64, 6), (70, 10), (74, 9), (76, 9), (77, 6), (78, 9), (80, 10), (82, 7), (83, 9), (84, 10), (92, 11), (93, 8), (94, 5), (95, 4), (96, 6), (97, 4), (98, 10), (110, 3), (113, 5), (119, 6), (120, 5), (122, 7), (129, 10), (130, 7), (131, 4), (136, 4), (137, 12), (139, 12), (141, 11), (144, 9), (146, 9), (148, 14), (149, 10), (155, 8), (158, 7), (160, 9), (164, 7), (165, 11), (166, 6), (167, 5), (168, 7), (171, 9), (173, 5), (174, 9), (178, 10), (180, 6), (181, 5), (182, 9), (183, 11), (184, 10), (185, 9), (187, 7), (188, 8), (190, 7), (193, 5), (194, 4), (195, 6), (196, 5), (197, 5), (201, 5), (207, 6), (208, 6), (209, 6), (213, 8), (216, 13), (217, 4), (219, 3), (220, 11), (222, 10), (230, 8), (232, 4), (235, 7), (236, 7), (238, 10), (239, 6), (240, 5), (241, 5), (243, 12), (246, 12), (248, 13), (250, 12), (253, 11), (255, 10), (256, 12), (257, 14), (261, 14), (263, 11), (264, 12), (267, 4), (269, 10), (273, 11), (277, 12), (280, 12), (286, 10), (287, 11), (288, 11), (290, 12), (292, 12), (294, 10), (298, 9), (299, 10), (301, 14), (304, 12), (306, 13), (307, 12), (308, 13), (310, 14), (311, 14), (312, 13), (318, 12), (320, 14), (321, 14), (322, 14), (323, 12), (324, 14), (326, 12), (330, 14), (332, 11), (334, 8), (337, 5), (340, 6), (341, 7), (342, 7), (343, 6), (345, 5), (347, 7), (350, 6), (352, 9), (353, 11), (354, 9), (355, 8), (356, 7), (357, 7), (358, 9), (360, 14), (361, 11), (362, 12), (363, 12), (364, 12), (368, 12), (369, 12), (373, 14), (374, 11), (375, 14), (377, 10), (378, 6), (379, 12), (380, 8), (383, 9), (385, 9), (387, 10), (390, 5), (394, 4), (395, 5), (396, 7), (398, 8), (399, 3), (402, 12), (403, 11), (404, 9), (405, 8), (407, 11), (412, 10), (414, 10), (417, 8), (418, 11), (419, 5), (423, 8), (425, 7), (429, 6), (430, 9), (431, 7), (435, 12), (436, 11), (437, 13), (439, 12), (443, 9), (453, 5)]
nb_edges_0 = 1013 rho= 0.1 # of rows = 14 # of columns= 203 total_degree_0= 1013 RHS= 101.30000000000001
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  13 with obj value: 168.1566265060241 KP time = 1.0922387083992362 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01504 - (Local CPU) 0.01504 - (Global CPU) 1.10728

 Solve status: Optimal Objective value: 36.32000 nb_rows 14 nb_cols 193
----------------------------------------
----------------------------------------

        Updated data after iteration: 13 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (14, 193) and density : 0.663 and number of remaining ones : 1829
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.663 density  and density_threshold= 0.900


I am in the while loop with i= 14 density= 0.6632124352331606 and fixed_threshold= 0.9

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 135.453
I solved model name = row_knapsack_problem for iteration i =  14 with obj value: 135.45333333333332 KP time = 1.107277833390981 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01364 - (Local CPU) 0.01364 - (Global CPU) 1.12092

 Solve status: Optimal Objective value: 135.45333 nb_rows 12 nb_cols 193
----------------------------------------
----------------------------------------

        Updated data after iteration: 14 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (12, 193) and density : 0.673 and number of remaining ones : 1559
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(13, 4), (14, 3), (18, 9), (19, 6), (21, 10), (23, 10), (24, 8), (25, 9), (26, 9), (27, 11), (29, 8), (31, 11), (32, 9), (34, 9), (36, 9), (37, 7), (38, 8), (41, 7), (47, 10), (49, 10), (50, 10), (52, 10), (57, 8), (61, 7), (64, 6), (70, 9), (74, 7), (76, 9), (77, 5), (78, 8), (80, 9), (82, 7), (83, 8), (84, 9), (92, 9), (93, 7), (94, 5), (95, 3), (96, 6), (98, 10), (113, 5), (119, 5), (120, 4), (122, 6), (129, 9), (130, 6), (137, 10), (139, 10), (141, 9), (144, 7), (146, 7), (148, 12), (149, 8), (155, 6), (158, 5), (160, 7), (164, 7), (165, 10), (166, 5), (167, 5), (168, 6), (171, 7), (173, 5), (174, 7), (178, 9), (180, 5), (181, 4), (182, 8), (183, 9), (184, 9), (185, 7), (187, 6), (188, 7), (190, 6), (193, 5), (195, 6), (196, 4), (197, 4), (201, 5), (207, 5), (208, 5), (209, 6), (213, 7), (216, 11), (220, 10), (222, 9), (230, 8), (235, 6), (236, 6), (238, 8), (239, 5), (240, 5), (241, 4), (243, 11), (246, 11), (248, 11), (250, 11), (253, 11), (255, 10), (256, 11), (257, 12), (261, 12), (263, 10), (264, 11), (267, 2), (269, 10), (273, 11), (277, 12), (280, 11), (286, 10), (287, 11), (288, 9), (290, 12), (292, 10), (294, 10), (298, 8), (299, 9), (301, 12), (304, 10), (306, 11), (307, 10), (308, 11), (310, 12), (311, 12), (312, 11), (318, 10), (320, 12), (321, 12), (322, 12), (323, 10), (324, 12), (326, 10), (330, 12), (332, 9), (334, 6), (337, 3), (340, 6), (341, 7), (342, 6), (343, 5), (345, 4), (347, 5), (350, 5), (352, 8), (353, 9), (354, 8), (355, 7), (356, 6), (357, 6), (358, 8), (360, 12), (361, 9), (362, 10), (363, 10), (364, 10), (368, 10), (369, 10), (373, 12), (374, 10), (375, 12), (377, 9), (378, 6), (379, 10), (380, 7), (383, 7), (385, 8), (387, 9), (390, 4), (394, 3), (395, 4), (396, 6), (398, 7), (402, 11), (403, 9), (404, 8), (405, 7), (407, 9), (412, 8), (414, 8), (417, 8), (418, 9), (419, 3), (423, 6), (425, 6), (429, 5), (430, 7), (431, 6), (435, 11), (436, 10), (437, 12), (439, 11), (443, 7), (453, 4)]
nb_edges_0 = 757 rho= 0.1 # of rows = 12 # of columns= 193 total_degree_0= 757 RHS= 75.7
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  14 with obj value: 135.45333333333332 KP time = 1.1209170003421605 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01522 - (Local CPU) 0.01522 - (Global CPU) 1.13614

 Solve status: Optimal Objective value: 27.35000 nb_rows 12 nb_cols 184
----------------------------------------
----------------------------------------

        Updated data after iteration: 14 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (12, 184) and density : 0.693 and number of remaining ones : 1559
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.693 density  and density_threshold= 0.900


I am in the while loop with i= 15 density= 0.6929347826086957 and fixed_threshold= 0.9

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 121.375
I solved model name = row_knapsack_problem for iteration i =  15 with obj value: 121.375 KP time = 1.1361372913233936 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01395 - (Local CPU) 0.01396 - (Global CPU) 1.15009

 Solve status: Optimal Objective value: 121.37500 nb_rows 10 nb_cols 184
----------------------------------------
----------------------------------------

        Updated data after iteration: 15 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (10, 184) and density : 0.702 and number of remaining ones : 1292
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(13, 3), (18, 7), (19, 6), (21, 9), (23, 8), (24, 8), (25, 9), (26, 9), (27, 9), (29, 8), (31, 9), (32, 8), (34, 8), (36, 9), (37, 7), (38, 7), (41, 6), (47, 8), (49, 9), (50, 8), (52, 8), (57, 6), (61, 6), (64, 5), (70, 8), (74, 6), (76, 7), (77, 4), (78, 8), (80, 8), (82, 6), (83, 7), (84, 8), (92, 8), (93, 6), (94, 4), (96, 4), (98, 8), (113, 4), (119, 5), (120, 4), (122, 6), (129, 8), (130, 6), (137, 9), (139, 8), (141, 8), (144, 6), (146, 7), (148, 10), (149, 7), (155, 5), (158, 4), (160, 6), (164, 5), (165, 8), (166, 4), (167, 4), (168, 5), (171, 6), (173, 4), (174, 6), (178, 8), (180, 4), (181, 3), (182, 7), (183, 8), (184, 7), (185, 6), (187, 5), (188, 5), (190, 5), (193, 4), (195, 5), (196, 3), (201, 3), (207, 5), (208, 5), (209, 4), (213, 6), (216, 9), (220, 9), (222, 9), (230, 8), (235, 6), (236, 4), (238, 8), (239, 4), (240, 4), (243, 9), (246, 9), (248, 9), (250, 9), (253, 9), (255, 8), (256, 9), (257, 10), (261, 10), (263, 8), (264, 9), (269, 9), (273, 9), (277, 10), (280, 9), (286, 8), (287, 9), (288, 7), (290, 10), (292, 8), (294, 8), (298, 6), (299, 7), (301, 10), (304, 8), (306, 10), (307, 9), (308, 10), (310, 10), (311, 10), (312, 10), (318, 9), (320, 10), (321, 10), (322, 10), (323, 9), (324, 10), (326, 9), (330, 10), (332, 9), (334, 5), (340, 4), (341, 7), (342, 5), (343, 3), (345, 3), (347, 4), (350, 4), (352, 7), (353, 7), (354, 7), (355, 6), (356, 5), (357, 5), (358, 7), (360, 10), (361, 7), (362, 8), (363, 8), (364, 8), (368, 8), (369, 8), (373, 10), (374, 8), (375, 10), (377, 7), (378, 4), (379, 8), (380, 5), (383, 7), (385, 7), (387, 7), (395, 3), (396, 5), (398, 6), (402, 9), (403, 8), (404, 7), (405, 6), (407, 7), (412, 7), (414, 6), (417, 7), (418, 8), (423, 5), (425, 4), (429, 4), (430, 6), (431, 5), (435, 10), (436, 8), (437, 10), (439, 10), (443, 6), (453, 3)]
nb_edges_0 = 548 rho= 0.1 # of rows = 10 # of columns= 184 total_degree_0= 548 RHS= 54.800000000000004
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  15 with obj value: 121.375 KP time = 1.1500933333300054 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01489 - (Local CPU) 0.01489 - (Global CPU) 1.16499

 Solve status: Optimal Objective value: 23.48571 nb_rows 10 nb_cols 176
----------------------------------------
----------------------------------------

        Updated data after iteration: 15 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (10, 176) and density : 0.720 and number of remaining ones : 1292
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.720 density  and density_threshold= 0.900


I am in the while loop with i= 16 density= 0.7204545454545455 and fixed_threshold= 0.9

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 90.465
I solved model name = row_knapsack_problem for iteration i =  16 with obj value: 90.46451612903226 KP time = 1.1649862503400072 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01342 - (Local CPU) 0.01342 - (Global CPU) 1.17840

 Solve status: Optimal Objective value: 90.46452 nb_rows 9 nb_cols 176
----------------------------------------
----------------------------------------

        Updated data after iteration: 16 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (9, 176) and density : 0.729 and number of remaining ones : 1154
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(18, 6), (19, 5), (21, 8), (23, 7), (24, 7), (25, 8), (26, 8), (27, 8), (29, 7), (31, 8), (32, 7), (34, 7), (36, 8), (37, 7), (38, 7), (41, 6), (47, 8), (49, 8), (50, 8), (52, 8), (57, 6), (61, 6), (64, 5), (70, 7), (74, 5), (76, 7), (77, 3), (78, 7), (80, 7), (82, 6), (83, 6), (84, 8), (92, 7), (93, 5), (94, 4), (96, 4), (98, 7), (113, 3), (119, 5), (120, 4), (122, 5), (129, 7), (130, 5), (137, 8), (139, 8), (141, 7), (144, 6), (146, 6), (148, 9), (149, 6), (155, 4), (158, 4), (160, 5), (164, 5), (165, 8), (166, 4), (167, 3), (168, 5), (171, 5), (173, 3), (174, 6), (178, 8), (180, 3), (182, 6), (183, 7), (184, 7), (185, 5), (187, 5), (188, 4), (190, 5), (193, 4), (195, 5), (207, 4), (208, 4), (209, 4), (213, 6), (216, 8), (220, 8), (222, 8), (230, 7), (235, 5), (236, 4), (238, 7), (239, 4), (240, 3), (243, 8), (246, 8), (248, 8), (250, 8), (253, 8), (255, 7), (256, 8), (257, 9), (261, 9), (263, 7), (264, 8), (269, 9), (273, 8), (277, 9), (280, 8), (286, 7), (287, 9), (288, 7), (290, 9), (292, 8), (294, 8), (298, 6), (299, 7), (301, 9), (304, 7), (306, 9), (307, 8), (308, 9), (310, 9), (311, 9), (312, 9), (318, 8), (320, 9), (321, 9), (322, 9), (323, 8), (324, 9), (326, 8), (330, 9), (332, 8), (334, 4), (340, 4), (341, 6), (342, 4), (347, 4), (350, 3), (352, 6), (353, 7), (354, 6), (355, 6), (356, 4), (357, 5), (358, 6), (360, 9), (361, 7), (362, 8), (363, 8), (364, 8), (368, 8), (369, 8), (373, 9), (374, 8), (375, 9), (377, 7), (378, 4), (379, 7), (380, 4), (383, 6), (385, 7), (387, 7), (396, 5), (398, 5), (402, 8), (403, 7), (404, 6), (405, 5), (407, 6), (412, 6), (414, 5), (417, 7), (418, 7), (423, 4), (425, 4), (429, 4), (430, 5), (431, 4), (435, 9), (436, 7), (437, 9), (439, 9), (443, 6)]
nb_edges_0 = 430 rho= 0.1 # of rows = 9 # of columns= 176 total_degree_0= 430 RHS= 43.0
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  16 with obj value: 90.46451612903226 KP time = 1.1784040002385154 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01505 - (Local CPU) 0.01505 - (Global CPU) 1.19346

 Solve status: Optimal Objective value: 21.80000 nb_rows 9 nb_cols 168
----------------------------------------
----------------------------------------

        Updated data after iteration: 16 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (9, 168) and density : 0.747 and number of remaining ones : 1154
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.747 density  and density_threshold= 0.900


I am in the while loop with i= 17 density= 0.7466931216931217 and fixed_threshold= 0.9

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 83.104
I solved model name = row_knapsack_problem for iteration i =  17 with obj value: 83.10377358490565 KP time = 1.193457875167951 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01365 - (Local CPU) 0.01365 - (Global CPU) 1.20711

 Solve status: Optimal Objective value: 83.10377 nb_rows 8 nb_cols 168
----------------------------------------
----------------------------------------

        Updated data after iteration: 17 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (8, 168) and density : 0.754 and number of remaining ones : 1014
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(18, 5), (19, 4), (21, 7), (23, 6), (24, 6), (25, 7), (26, 7), (27, 7), (29, 6), (31, 7), (32, 6), (34, 6), (36, 7), (37, 6), (38, 6), (41, 6), (47, 7), (49, 7), (50, 7), (52, 7), (57, 5), (61, 5), (64, 4), (70, 6), (74, 5), (76, 7), (78, 7), (80, 6), (82, 5), (83, 5), (84, 7), (92, 6), (93, 4), (94, 3), (96, 3), (98, 6), (119, 4), (120, 4), (122, 4), (129, 6), (130, 4), (137, 8), (139, 7), (141, 6), (144, 5), (146, 5), (148, 8), (149, 5), (155, 3), (158, 3), (160, 5), (164, 4), (165, 7), (166, 3), (168, 4), (171, 4), (174, 5), (178, 7), (182, 5), (183, 6), (184, 6), (185, 4), (187, 4), (188, 3), (190, 4), (193, 4), (195, 4), (207, 4), (208, 3), (209, 3), (213, 5), (216, 8), (220, 7), (222, 7), (230, 6), (235, 4), (236, 4), (238, 7), (239, 4), (243, 8), (246, 8), (248, 8), (250, 8), (253, 7), (255, 7), (256, 8), (257, 8), (261, 8), (263, 7), (264, 8), (269, 8), (273, 8), (277, 8), (280, 8), (286, 7), (287, 8), (288, 7), (290, 8), (292, 7), (294, 8), (298, 6), (299, 7), (301, 8), (304, 7), (306, 8), (307, 7), (308, 8), (310, 8), (311, 8), (312, 8), (318, 7), (320, 8), (321, 8), (322, 8), (323, 7), (324, 8), (326, 7), (330, 8), (332, 7), (340, 4), (341, 5), (342, 3), (347, 3), (352, 6), (353, 7), (354, 5), (355, 5), (356, 3), (357, 5), (358, 5), (360, 8), (361, 7), (362, 8), (363, 8), (364, 8), (368, 8), (369, 8), (373, 8), (374, 8), (375, 8), (377, 7), (378, 4), (379, 6), (380, 3), (383, 5), (385, 7), (387, 7), (396, 4), (398, 5), (402, 8), (403, 6), (404, 6), (405, 5), (407, 6), (412, 6), (414, 5), (417, 6), (418, 6), (423, 4), (425, 3), (429, 4), (430, 4), (431, 3), (435, 8), (436, 6), (437, 8), (439, 8), (443, 5)]
nb_edges_0 = 330 rho= 0.1 # of rows = 8 # of columns= 168 total_degree_0= 330 RHS= 33.0
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  17 with obj value: 83.10377358490565 KP time = 1.2071090842364356 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01529 - (Local CPU) 0.01529 - (Global CPU) 1.22240

 Solve status: Optimal Objective value: 19.80000 nb_rows 8 nb_cols 161
----------------------------------------
----------------------------------------

        Updated data after iteration: 17 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (8, 161) and density : 0.771 and number of remaining ones : 1014
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.771 density  and density_threshold= 0.900


I am in the while loop with i= 18 density= 0.7709627329192547 and fixed_threshold= 0.9

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 80.953
I solved model name = row_knapsack_problem for iteration i =  18 with obj value: 80.95348837209302 KP time = 1.2224032923113555 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01363 - (Local CPU) 0.01363 - (Global CPU) 1.23604

 Solve status: Optimal Objective value: 80.95349 nb_rows 7 nb_cols 161
----------------------------------------
----------------------------------------

        Updated data after iteration: 18 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (7, 161) and density : 0.776 and number of remaining ones : 875
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(18, 4), (19, 3), (21, 6), (23, 5), (24, 5), (25, 6), (26, 6), (27, 6), (29, 5), (31, 6), (32, 5), (34, 5), (36, 6), (37, 5), (38, 5), (41, 5), (47, 6), (49, 6), (50, 6), (52, 6), (57, 4), (61, 5), (64, 4), (70, 5), (74, 5), (76, 6), (78, 6), (80, 6), (82, 5), (83, 5), (84, 6), (92, 6), (93, 3), (94, 3), (96, 3), (98, 6), (119, 4), (120, 3), (122, 4), (129, 5), (130, 4), (137, 7), (139, 6), (141, 5), (144, 4), (146, 5), (148, 7), (149, 5), (158, 3), (160, 4), (164, 3), (165, 6), (168, 4), (171, 4), (174, 5), (178, 6), (182, 4), (183, 5), (184, 5), (185, 3), (187, 4), (190, 3), (193, 3), (195, 3), (207, 4), (208, 3), (213, 4), (216, 7), (220, 6), (222, 6), (230, 5), (235, 4), (236, 4), (238, 6), (239, 3), (243, 7), (246, 7), (248, 7), (250, 7), (253, 6), (255, 6), (256, 7), (257, 7), (261, 7), (263, 6), (264, 7), (269, 7), (273, 7), (277, 7), (280, 7), (286, 6), (287, 7), (288, 6), (290, 7), (292, 6), (294, 7), (298, 5), (299, 6), (301, 7), (304, 6), (306, 7), (307, 6), (308, 7), (310, 7), (311, 7), (312, 7), (318, 6), (320, 7), (321, 7), (322, 7), (323, 6), (324, 7), (326, 6), (330, 7), (332, 6), (340, 4), (341, 5), (347, 2), (352, 6), (353, 6), (354, 5), (355, 5), (356, 2), (357, 5), (358, 5), (360, 7), (361, 6), (362, 7), (363, 7), (364, 7), (368, 7), (369, 7), (373, 7), (374, 7), (375, 7), (377, 6), (378, 4), (379, 6), (380, 3), (383, 4), (385, 6), (387, 6), (396, 3), (398, 5), (402, 7), (403, 6), (404, 6), (405, 5), (407, 6), (412, 6), (414, 5), (417, 5), (418, 5), (423, 4), (429, 3), (430, 3), (435, 7), (436, 5), (437, 7), (439, 7), (443, 5)]
nb_edges_0 = 252 rho= 0.1 # of rows = 7 # of columns= 161 total_degree_0= 252 RHS= 25.200000000000003
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  18 with obj value: 80.95348837209302 KP time = 1.2360367922810838 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01488 - (Local CPU) 0.01488 - (Global CPU) 1.25092

 Solve status: Optimal Objective value: 15.40000 nb_rows 7 nb_cols 155
----------------------------------------
----------------------------------------

        Updated data after iteration: 18 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (7, 155) and density : 0.792 and number of remaining ones : 875
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.792 density  and density_threshold= 0.900


I am in the while loop with i= 19 density= 0.791705069124424 and fixed_threshold= 0.9

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 72.076
I solved model name = row_knapsack_problem for iteration i =  19 with obj value: 72.07567567567568 KP time = 1.2509167091920972 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01349 - (Local CPU) 0.01349 - (Global CPU) 1.26441

 Solve status: Optimal Objective value: 72.07568 nb_rows 6 nb_cols 155
----------------------------------------
----------------------------------------

        Updated data after iteration: 19 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (6, 155) and density : 0.797 and number of remaining ones : 741
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(18, 4), (21, 5), (23, 4), (24, 4), (25, 5), (26, 5), (27, 5), (29, 4), (31, 5), (32, 4), (34, 4), (36, 5), (37, 4), (38, 4), (41, 4), (47, 5), (49, 5), (50, 6), (52, 5), (57, 4), (61, 4), (64, 4), (70, 4), (74, 5), (76, 6), (78, 6), (80, 5), (82, 5), (83, 5), (84, 5), (92, 6), (93, 3), (96, 3), (98, 6), (119, 3), (120, 2), (122, 4), (129, 5), (130, 4), (137, 6), (139, 6), (141, 4), (144, 4), (146, 4), (148, 6), (149, 4), (158, 3), (160, 4), (164, 2), (165, 5), (168, 3), (171, 4), (174, 5), (178, 5), (182, 4), (183, 5), (184, 5), (185, 3), (187, 3), (190, 3), (195, 3), (207, 3), (208, 2), (213, 3), (216, 6), (220, 6), (222, 6), (230, 5), (235, 3), (236, 3), (238, 5), (243, 6), (246, 6), (248, 6), (250, 6), (253, 5), (255, 5), (256, 6), (257, 6), (261, 6), (263, 5), (264, 6), (269, 6), (273, 6), (277, 6), (280, 6), (286, 5), (287, 6), (288, 5), (290, 6), (292, 5), (294, 6), (298, 4), (299, 5), (301, 6), (304, 5), (306, 6), (307, 5), (308, 6), (310, 6), (311, 6), (312, 6), (318, 5), (320, 6), (321, 6), (322, 6), (323, 5), (324, 6), (326, 5), (330, 6), (332, 5), (340, 3), (341, 4), (352, 5), (353, 5), (354, 4), (355, 4), (357, 4), (358, 4), (360, 6), (361, 5), (362, 6), (363, 6), (364, 6), (368, 6), (369, 6), (373, 6), (374, 6), (375, 6), (377, 5), (378, 4), (379, 5), (380, 3), (383, 3), (385, 5), (387, 5), (396, 2), (398, 4), (402, 6), (403, 5), (404, 5), (405, 4), (407, 5), (412, 5), (414, 4), (417, 4), (418, 4), (423, 4), (429, 3), (430, 3), (435, 6), (436, 5), (437, 6), (439, 6), (443, 4)]
nb_edges_0 = 189 rho= 0.1 # of rows = 6 # of columns= 155 total_degree_0= 189 RHS= 18.900000000000002
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  19 with obj value: 72.07567567567568 KP time = 1.264408250222914 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01452 - (Local CPU) 0.01452 - (Global CPU) 1.27893

 Solve status: Optimal Objective value: 10.90000 nb_rows 6 nb_cols 150
----------------------------------------
----------------------------------------

        Updated data after iteration: 19 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (6, 150) and density : 0.811 and number of remaining ones : 741
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.811 density  and density_threshold= 0.900


I am in the while loop with i= 20 density= 0.8111111111111111 and fixed_threshold= 0.9

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 58.000
I solved model name = row_knapsack_problem for iteration i =  20 with obj value: 58.0 KP time = 1.2789267911575735 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01305 - (Local CPU) 0.01305 - (Global CPU) 1.29198

 Solve status: Optimal Objective value: 58.00000 nb_rows 5 nb_cols 150
----------------------------------------
----------------------------------------

        Updated data after iteration: 20 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (5, 150) and density : 0.819 and number of remaining ones : 614
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(18, 4), (21, 5), (23, 4), (24, 4), (25, 4), (26, 4), (27, 5), (29, 4), (31, 4), (32, 4), (34, 4), (36, 5), (37, 4), (38, 4), (41, 4), (47, 5), (49, 5), (50, 5), (52, 5), (57, 4), (61, 3), (64, 4), (70, 4), (74, 4), (76, 5), (78, 5), (80, 4), (82, 4), (83, 4), (84, 4), (92, 5), (93, 2), (96, 2), (98, 5), (122, 3), (129, 4), (130, 3), (137, 5), (139, 5), (141, 3), (144, 3), (146, 3), (148, 5), (149, 3), (158, 2), (160, 3), (165, 4), (168, 2), (171, 3), (174, 4), (178, 4), (182, 4), (183, 4), (184, 4), (185, 2), (187, 2), (190, 2), (195, 3), (207, 2), (213, 3), (216, 5), (220, 5), (222, 5), (230, 4), (235, 3), (236, 2), (238, 4), (243, 5), (246, 5), (248, 5), (250, 5), (253, 4), (255, 4), (256, 5), (257, 5), (261, 5), (263, 4), (264, 5), (269, 5), (273, 5), (277, 5), (280, 5), (286, 4), (287, 5), (288, 5), (290, 5), (292, 5), (294, 5), (298, 4), (299, 4), (301, 5), (304, 4), (306, 5), (307, 4), (308, 5), (310, 5), (311, 5), (312, 5), (318, 4), (320, 5), (321, 5), (322, 5), (323, 4), (324, 5), (326, 4), (330, 5), (332, 4), (340, 3), (341, 4), (352, 4), (353, 4), (354, 3), (355, 3), (357, 3), (358, 3), (360, 5), (361, 5), (362, 5), (363, 5), (364, 5), (368, 5), (369, 5), (373, 5), (374, 5), (375, 5), (377, 4), (378, 4), (379, 4), (380, 3), (383, 2), (385, 4), (387, 4), (398, 4), (402, 5), (403, 4), (404, 4), (405, 4), (407, 4), (412, 4), (414, 3), (417, 3), (418, 3), (423, 4), (429, 3), (430, 2), (435, 5), (436, 4), (437, 5), (439, 5), (443, 3)]
nb_edges_0 = 136 rho= 0.1 # of rows = 5 # of columns= 150 total_degree_0= 136 RHS= 13.600000000000001
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  20 with obj value: 58.0 KP time = 1.2919793321052566 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01487 - (Local CPU) 0.01487 - (Global CPU) 1.30685

 Solve status: Optimal Objective value: 9.06667 nb_rows 5 nb_cols 145
----------------------------------------
----------------------------------------

        Updated data after iteration: 20 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (5, 145) and density : 0.833 and number of remaining ones : 614
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.833 density  and density_threshold= 0.900


I am in the while loop with i= 21 density= 0.833103448275862 and fixed_threshold= 0.9

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 48.400
I solved model name = row_knapsack_problem for iteration i =  21 with obj value: 48.4 KP time = 1.3068483740789816 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01337 - (Local CPU) 0.01337 - (Global CPU) 1.32022

 Solve status: Optimal Objective value: 48.40000 nb_rows 4 nb_cols 145
----------------------------------------
----------------------------------------

        Updated data after iteration: 21 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (4, 145) and density : 0.841 and number of remaining ones : 488
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(18, 3), (21, 4), (23, 3), (24, 3), (25, 3), (26, 3), (27, 4), (29, 3), (31, 3), (32, 3), (34, 3), (36, 4), (37, 3), (38, 3), (41, 3), (47, 4), (49, 4), (50, 4), (52, 4), (57, 4), (61, 3), (64, 3), (70, 4), (74, 3), (76, 4), (78, 4), (80, 3), (82, 3), (83, 3), (84, 3), (92, 4), (93, 2), (96, 2), (98, 4), (122, 3), (129, 3), (130, 2), (137, 4), (139, 4), (141, 3), (144, 3), (146, 3), (148, 4), (149, 3), (158, 2), (160, 3), (165, 3), (171, 3), (174, 3), (178, 3), (182, 4), (183, 3), (184, 3), (190, 2), (195, 2), (207, 2), (213, 3), (216, 4), (220, 4), (222, 4), (230, 3), (235, 2), (238, 3), (243, 4), (246, 4), (248, 4), (250, 4), (253, 3), (255, 3), (256, 4), (257, 4), (261, 4), (263, 4), (264, 4), (269, 4), (273, 4), (277, 4), (280, 4), (286, 4), (287, 4), (288, 4), (290, 4), (292, 4), (294, 4), (298, 3), (299, 3), (301, 4), (304, 3), (306, 4), (307, 3), (308, 4), (310, 4), (311, 4), (312, 4), (318, 3), (320, 4), (321, 4), (322, 4), (323, 3), (324, 4), (326, 3), (330, 4), (332, 3), (340, 3), (341, 3), (352, 3), (353, 3), (354, 2), (355, 2), (357, 2), (358, 2), (360, 4), (361, 4), (362, 4), (363, 4), (364, 4), (368, 4), (369, 4), (373, 4), (374, 4), (375, 4), (377, 4), (378, 4), (379, 4), (380, 3), (385, 3), (387, 4), (398, 3), (402, 4), (403, 3), (404, 3), (405, 3), (407, 3), (412, 3), (414, 2), (417, 2), (418, 3), (423, 3), (429, 2), (430, 2), (435, 4), (436, 4), (437, 4), (439, 4), (443, 3)]
nb_edges_0 = 92 rho= 0.1 # of rows = 4 # of columns= 145 total_degree_0= 92 RHS= 9.200000000000001
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  21 with obj value: 48.4 KP time = 1.3202205820707604 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01465 - (Local CPU) 0.01465 - (Global CPU) 1.33487

 Solve status: Optimal Objective value: 9.20000 nb_rows 4 nb_cols 140
----------------------------------------
----------------------------------------

        Updated data after iteration: 21 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (4, 140) and density : 0.854 and number of remaining ones : 488
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.854 density  and density_threshold= 0.900


I am in the while loop with i= 22 density= 0.8535714285714285 and fixed_threshold= 0.9

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 34.319
I solved model name = row_knapsack_problem for iteration i =  22 with obj value: 34.318518518518516 KP time = 1.3348666240926832 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01360 - (Local CPU) 0.01360 - (Global CPU) 1.34847

 Solve status: Optimal Objective value: 34.31852 nb_rows 3 nb_cols 140
----------------------------------------
----------------------------------------

        Updated data after iteration: 22 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (3, 140) and density : 0.869 and number of remaining ones : 365
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(18, 2), (21, 3), (23, 3), (24, 3), (25, 3), (26, 3), (27, 3), (29, 3), (31, 3), (32, 3), (34, 3), (36, 3), (37, 3), (38, 3), (41, 3), (47, 3), (49, 3), (50, 3), (52, 3), (57, 3), (61, 3), (64, 3), (70, 3), (74, 3), (76, 3), (78, 3), (80, 3), (82, 3), (83, 3), (84, 3), (92, 3), (93, 2), (96, 2), (98, 3), (122, 2), (129, 3), (137, 3), (139, 3), (141, 2), (144, 2), (146, 2), (148, 3), (149, 2), (160, 2), (165, 2), (171, 2), (174, 2), (178, 2), (182, 3), (183, 2), (184, 2), (190, 2), (195, 2), (207, 1), (213, 2), (216, 3), (220, 3), (222, 3), (230, 2), (235, 2), (238, 2), (243, 3), (246, 3), (248, 3), (250, 3), (253, 2), (255, 2), (256, 3), (257, 3), (261, 3), (263, 3), (264, 3), (269, 3), (273, 3), (277, 3), (280, 3), (286, 3), (287, 3), (288, 3), (290, 3), (292, 3), (294, 3), (298, 2), (299, 2), (301, 3), (304, 2), (306, 3), (307, 2), (308, 3), (310, 3), (311, 3), (312, 3), (318, 2), (320, 3), (321, 3), (322, 3), (323, 2), (324, 3), (326, 2), (330, 3), (332, 2), (340, 2), (341, 2), (352, 2), (353, 2), (354, 1), (355, 1), (360, 3), (361, 3), (362, 3), (363, 3), (364, 3), (368, 3), (369, 3), (373, 3), (374, 3), (375, 3), (377, 3), (378, 3), (379, 3), (380, 2), (385, 2), (387, 3), (398, 2), (402, 3), (403, 2), (404, 2), (405, 2), (407, 2), (412, 2), (414, 1), (417, 2), (418, 2), (423, 2), (430, 2), (435, 3), (436, 3), (437, 3), (439, 3), (443, 3)]
nb_edges_0 = 55 rho= 0.1 # of rows = 3 # of columns= 140 total_degree_0= 55 RHS= 5.5
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  22 with obj value: 34.318518518518516 KP time = 1.34846758202184 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01437 - (Local CPU) 0.01437 - (Global CPU) 1.36284

 Solve status: Optimal Objective value: 2.75000 nb_rows 3 nb_cols 137
----------------------------------------
----------------------------------------

        Updated data after iteration: 22 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (3, 137) and density : 0.881 and number of remaining ones : 365
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.881 density  and density_threshold= 0.900


I am in the while loop with i= 23 density= 0.8807785888077859 and fixed_threshold= 0.9

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 34.588
I solved model name = row_knapsack_problem for iteration i =  23 with obj value: 34.58823529411765 KP time = 1.3628407900687307 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01360 - (Local CPU) 0.01360 - (Global CPU) 1.37644

 Solve status: Optimal Objective value: 34.58824 nb_rows 2 nb_cols 137
----------------------------------------
----------------------------------------

        Updated data after iteration: 23 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (2, 137) and density : 0.883 and number of remaining ones : 242
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(18, 1), (21, 2), (23, 2), (24, 2), (25, 2), (26, 2), (27, 2), (29, 2), (31, 2), (32, 2), (34, 2), (36, 2), (37, 2), (38, 2), (41, 2), (47, 2), (49, 2), (50, 2), (52, 2), (57, 2), (61, 2), (64, 2), (70, 2), (74, 2), (76, 2), (78, 2), (80, 2), (82, 2), (83, 2), (84, 2), (92, 2), (93, 1), (96, 1), (98, 2), (122, 1), (129, 2), (137, 2), (139, 2), (141, 1), (144, 1), (146, 1), (148, 2), (149, 1), (160, 2), (165, 2), (171, 1), (174, 1), (178, 2), (182, 2), (183, 2), (184, 2), (190, 2), (195, 1), (213, 1), (216, 2), (220, 2), (222, 2), (230, 2), (235, 2), (238, 2), (243, 2), (246, 2), (248, 2), (250, 2), (253, 1), (255, 2), (256, 2), (257, 2), (261, 2), (263, 2), (264, 2), (269, 2), (273, 2), (277, 2), (280, 2), (286, 2), (287, 2), (288, 2), (290, 2), (292, 2), (294, 2), (298, 2), (299, 2), (301, 2), (304, 2), (306, 2), (307, 1), (308, 2), (310, 2), (311, 2), (312, 2), (318, 1), (320, 2), (321, 2), (322, 2), (323, 1), (324, 2), (326, 1), (330, 2), (332, 1), (340, 2), (341, 1), (352, 2), (353, 1), (354, 1), (360, 2), (361, 2), (362, 2), (363, 2), (364, 2), (368, 2), (369, 2), (373, 2), (374, 2), (375, 2), (377, 2), (378, 2), (379, 2), (380, 1), (385, 1), (387, 2), (398, 1), (402, 2), (403, 1), (404, 1), (405, 1), (407, 1), (412, 1), (417, 2), (418, 1), (423, 1), (430, 1), (435, 2), (436, 2), (437, 2), (439, 2), (443, 2)]
nb_edges_0 = 32 rho= 0.1 # of rows = 2 # of columns= 137 total_degree_0= 32 RHS= 3.2
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  23 with obj value: 34.58823529411765 KP time = 1.3764426650013775 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01363 - (Local CPU) 0.01364 - (Global CPU) 1.39008

 Solve status: Optimal Objective value: 3.20000 nb_rows 2 nb_cols 133
----------------------------------------
----------------------------------------

        Updated data after iteration: 23 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (2, 133) and density : 0.895 and number of remaining ones : 242
        

----------------------------------------
----------------------------------------

----------------------------------------

            End of greedy approaches. Exit while loop. I did: 23 iterations
            Density : 0.895 > 0.900
            It took me : 1.390 time
            Found matrix of size : (2, 133) and density : 0.895
            
----------------------------------------

 Calling exact approaches for QB clique discovery with delta = 0.0
----------------------------------------

----------------------------------------

I am in warm_exact before calling max_e_h $$$$$$$$$$$$$$$$$$

----------------------------------------------------------------------
Model status: Optimal
----------------------------------------------------------------------
Computed by max_e_h Objective Value : 448.000 
Model status: Optimal
Solution saved to Experiments/prob_8/results_h_1_M_2.csv

----------------------------------------------------------------------
Stats
 Model solved : max_e_h  Local Time:  - (real) 0.01861 - (Local CPU) 0.01861 - (Global CPU) 0.01861

 Solve status: Optimal Objective value: 448.00000 nb_rows 2 nb_cols 105
----------------------------------------

----------------------------------------
Results from updating data after solving model = max_e_h  delta =   0.0
Number of Remaining number  Rows  : 2
Number of Remaining number Columns : 105
Remaining  number Edges_0 P: 0 Remaining  number Edges_1 : 210 Density : 1.0 current obj value 448.0
----------------------------------------

----------------------------------------

Exit from the heuristic (or exact  approach)  max_e_c  with delta= 0.0 Found matrix with rows_res of lenght = 2  and cols_res of lenght = 105
----------------------------------------

        Exit from the exact approach: max_e_c for matrix 2
        with delta =  0.0
        Found matrix of size : (2, 105)
        and density : 1.000
        and # of ones : 210
        and Heuristic QBC time   : 0.01861
        and Global QBC  time  : 0.01861
        
 Remaining Rows  : [0, 4]
 Remaining  Cols  : [129, 137, 139, 148, 160, 165, 178, 182, 183, 184, 190, 21, 216, 220, 222, 23, 230, 235, 238, 24, 243, 246, 248, 25, 250, 255, 256, 257, 26, 261, 263, 264, 269, 27, 273, 277, 280, 286, 287, 288, 29, 290, 292, 294, 298, 299, 301, 304, 306, 308, 31, 310, 311, 312, 32, 320, 321, 322, 324, 330, 34, 340, 352, 36, 360, 361, 362, 363, 364, 368, 369, 37, 373, 374, 375, 377, 378, 379, 38, 387, 402, 41, 417, 435, 436, 437, 439, 443, 47, 49, 50, 52, 57, 61, 64, 70, 74, 76, 78, 80, 82, 83, 84, 92, 98]

----------------------------------------------------------------------
 
    End of computations for matrix 2 in  data/prob_8.csv at level 1 and debug  2
    With  model: max_e_c and quasi-biclique error: 0.0 
    Size of Remaining matrix : (2,105), with  density : 1.0 and number of ones: 210
    Global Time (in sec): 1.409
    Total Time in QBC approaches: 0.019
    Time in greedy approach: 1.390,  size of matrix found by greedy : (2,133) 
    With density : 0.895 and # ones : 238 
    Time in heuristic only : 0.019 
    Time in warm start only : 0.000
    Number of iterations in greedy approach: 23
    Percentage of greedy approach run time in global run time : 98.68% 
    Percentage of heuristic run time in QBC run time : 100.00%
    With zero deletion rate (rho): 0.1 and threshold: 0.9
    
----------------------------------------------------------------------


Zero clique of size (2,105) has been found. Too small!! Task with matrix 2 with size (59,466) has been added to the queue.

 Return from 2 with winning node = 2

calling decrease_and_conquer for node 3

----------------------------------------------------------------------
***Stats Current Input for matrix 3 in  data/prob_8.csv at level 1 and with model:  max_e_c***
Size of current matrix :  64 * 383 = 24512 ; dec_conq: 1
Prev_lower_bound :  None number input zeros :  17219 ; number input ones :  7293
rho =  0.1 ; delta :  0.0
Input density : 0.298 ; density_threshold: 0.90000
----------------------------------------------------------------------
End Current  Stats
----------------------------------------------------------------------


calling greedy approaches for zero deletion, density= 0.298 density  and density_threshold= 0.900


I am in the while loop with i= 1 density= 0.2975277415143603 and fixed_threshold= 0.9

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 116.880
I solved model name = row_knapsack_problem for iteration i =  1 with obj value: 116.88017751479289 KP time = 0.6860725854057819 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01816 - (Local CPU) 0.01816 - (Global CPU) 0.70423

 Solve status: Optimal Objective value: 116.88018 nb_rows 61 nb_cols 383
----------------------------------------
----------------------------------------

        Updated data after iteration: 1 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (61, 383) and density : 0.307 and number of remaining ones : 7176
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(0, 3), (1, 15), (2, 5), (3, 13), (4, 5), (5, 17), (6, 8), (7, 10), (8, 15), (9, 15), (10, 20), (11, 18), (12, 19), (13, 21), (14, 21), (15, 22), (16, 16), (17, 1), (20, 7), (22, 6), (26, 36), (28, 23), (30, 13), (33, 7), (35, 11), (38, 38), (39, 19), (40, 14), (42, 14), (43, 14), (44, 21), (45, 13), (46, 10), (48, 12), (49, 26), (51, 10), (53, 15), (54, 17), (55, 17), (56, 13), (58, 13), (59, 20), (60, 17), (61, 27), (62, 27), (63, 23), (64, 18), (65, 9), (66, 10), (67, 12), (68, 15), (69, 10), (71, 13), (72, 18), (73, 16), (74, 27), (75, 13), (76, 25), (77, 17), (79, 24), (81, 23), (82, 20), (84, 31), (85, 12), (86, 11), (87, 10), (88, 10), (89, 12), (90, 12), (91, 14), (92, 32), (95, 23), (96, 20), (97, 17), (98, 26), (99, 16), (100, 11), (101, 16), (102, 11), (103, 12), (104, 15), (105, 10), (106, 18), (107, 9), (108, 19), (109, 15), (110, 24), (111, 11), (112, 17), (113, 29), (114, 11), (115, 16), (116, 12), (117, 12), (118, 20), (119, 36), (120, 20), (121, 22), (122, 24), (123, 26), (124, 24), (125, 17), (126, 14), (127, 16), (128, 13), (129, 26), (130, 17), (131, 15), (132, 17), (133, 8), (134, 16), (135, 13), (136, 27), (137, 29), (138, 14), (139, 47), (140, 17), (142, 13), (143, 22), (144, 30), (145, 12), (146, 30), (147, 14), (148, 41), (150, 13), (151, 14), (152, 14), (153, 8), (154, 19), (156, 11), (157, 15), (159, 19), (161, 21), (162, 16), (163, 20), (164, 22), (166, 23), (167, 22), (169, 19), (170, 11), (172, 20), (173, 25), (174, 27), (175, 11), (176, 16), (177, 22), (178, 27), (179, 17), (180, 31), (181, 29), (183, 32), (186, 18), (189, 13), (191, 16), (192, 19), (193, 15), (195, 22), (196, 22), (198, 12), (200, 18), (201, 21), (202, 15), (203, 15), (204, 9), (205, 10), (206, 9), (209, 18), (210, 16), (211, 13), (212, 18), (213, 27), (214, 16), (215, 19), (217, 29), (218, 8), (219, 21), (220, 31), (221, 9), (222, 28), (223, 25), (224, 12), (226, 18), (227, 16), (228, 13), (229, 15), (230, 23), (231, 12), (232, 20), (233, 16), (234, 25), (235, 24), (237, 13), (240, 18), (242, 7), (244, 14), (245, 14), (247, 12), (249, 7), (251, 17), (252, 11), (253, 30), (254, 7), (255, 23), (258, 11), (259, 10), (260, 18), (262, 9), (265, 16), (266, 14), (267, 19), (268, 16), (269, 26), (270, 14), (271, 10), (272, 7), (273, 28), (274, 11), (275, 10), (276, 13), (278, 15), (279, 13), (280, 35), (281, 18), (282, 15), (283, 12), (284, 16), (285, 10), (286, 39), (287, 39), (288, 29), (289, 19), (291, 10), (292, 38), (293, 8), (294, 31), (295, 9), (296, 8), (297, 15), (298, 30), (299, 25), (300, 8), (302, 15), (303, 18), (304, 36), (305, 17), (309, 15), (313, 12), (314, 13), (315, 4), (316, 16), (317, 18), (318, 35), (319, 14), (323, 34), (325, 18), (326, 37), (327, 21), (328, 22), (329, 3), (331, 21), (332, 31), (333, 20), (334, 33), (335, 19), (336, 17), (337, 23), (338, 22), (339, 13), (340, 31), (341, 29), (342, 22), (343, 29), (344, 11), (345, 33), (346, 13), (347, 31), (348, 12), (349, 10), (350, 29), (351, 29), (352, 24), (354, 23), (355, 20), (356, 29), (357, 18), (358, 25), (359, 18), (360, 45), (365, 9), (366, 14), (367, 10), (370, 11), (371, 13), (372, 12), (375, 50), (376, 14), (377, 39), (378, 23), (379, 44), (380, 32), (381, 28), (382, 14), (383, 34), (384, 24), (385, 19), (386, 11), (388, 14), (389, 22), (390, 23), (391, 13), (392, 13), (393, 14), (394, 23), (395, 24), (396, 21), (397, 11), (398, 25), (399, 21), (400, 20), (401, 12), (402, 39), (403, 38), (404, 37), (405, 27), (406, 6), (407, 39), (408, 14), (409, 5), (410, 11), (411, 14), (412, 43), (413, 14), (414, 44), (415, 26), (416, 13), (417, 32), (418, 37), (419, 23), (420, 22), (421, 9), (422, 15), (423, 28), (424, 14), (425, 21), (426, 16), (427, 14), (428, 12), (429, 23), (430, 18), (431, 20), (432, 11), (433, 21), (434, 11), (435, 39), (436, 23), (437, 38), (438, 14), (440, 3), (441, 18), (442, 19), (443, 37), (444, 17), (445, 17), (446, 16), (447, 18), (448, 16), (449, 23), (450, 22), (451, 5), (452, 19), (453, 24), (454, 10), (455, 15), (456, 17), (457, 7), (458, 15), (459, 12), (460, 15), (461, 18), (462, 15), (463, 22), (464, 19), (465, 13)]
nb_edges_0 = 16187 rho= 0.1 # of rows = 61 # of columns= 383 total_degree_0= 16187 RHS= 1618.7
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  1 with obj value: 116.88017751479289 KP time = 0.70423037733417 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01773 - (Local CPU) 0.01774 - (Global CPU) 0.72197

 Solve status: Optimal Objective value: 193.35192 nb_rows 61 nb_cols 353
----------------------------------------
----------------------------------------

        Updated data after iteration: 1 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (61, 353) and density : 0.324 and number of remaining ones : 7176
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.324 density  and density_threshold= 0.900


I am in the while loop with i= 2 density= 0.3241536246691125 and fixed_threshold= 0.9

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 509.870
I solved model name = row_knapsack_problem for iteration i =  2 with obj value: 509.87015503875966 KP time = 0.7219675023807213 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01547 - (Local CPU) 0.01547 - (Global CPU) 0.73744

 Solve status: Optimal Objective value: 509.87016 nb_rows 55 nb_cols 353
----------------------------------------
----------------------------------------

        Updated data after iteration: 2 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (55, 353) and density : 0.331 and number of remaining ones : 6429
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(1, 15), (3, 13), (5, 17), (7, 10), (8, 12), (9, 15), (10, 20), (11, 18), (12, 18), (13, 20), (14, 20), (15, 22), (16, 16), (26, 31), (28, 23), (30, 13), (35, 10), (38, 34), (39, 18), (40, 13), (42, 13), (43, 12), (44, 20), (45, 11), (46, 10), (48, 12), (49, 22), (51, 10), (53, 13), (54, 16), (55, 17), (56, 13), (58, 12), (59, 19), (60, 17), (61, 22), (62, 27), (63, 22), (64, 14), (66, 8), (67, 10), (68, 13), (69, 10), (71, 13), (72, 18), (73, 16), (74, 23), (75, 11), (76, 21), (77, 17), (79, 24), (81, 22), (82, 15), (84, 26), (85, 12), (86, 11), (87, 9), (88, 10), (89, 12), (90, 11), (91, 13), (92, 27), (95, 23), (96, 15), (97, 17), (98, 21), (99, 16), (100, 11), (101, 16), (102, 11), (103, 12), (104, 15), (105, 10), (106, 17), (108, 18), (109, 15), (110, 24), (111, 10), (112, 13), (113, 27), (114, 10), (115, 13), (116, 11), (117, 9), (118, 18), (119, 32), (120, 17), (121, 21), (122, 21), (123, 24), (124, 23), (125, 14), (126, 14), (127, 14), (128, 12), (129, 22), (130, 14), (131, 14), (132, 16), (134, 16), (135, 10), (136, 24), (137, 24), (138, 14), (139, 42), (140, 17), (142, 13), (143, 22), (144, 25), (145, 12), (146, 25), (147, 14), (148, 36), (150, 13), (151, 13), (152, 14), (154, 19), (156, 11), (157, 14), (159, 17), (161, 17), (162, 14), (163, 19), (164, 21), (166, 18), (167, 22), (169, 18), (170, 11), (172, 19), (173, 25), (174, 22), (175, 11), (176, 16), (177, 22), (178, 22), (179, 16), (180, 27), (181, 25), (183, 27), (186, 18), (189, 13), (191, 16), (192, 19), (193, 15), (195, 22), (196, 22), (198, 11), (200, 17), (201, 21), (202, 14), (203, 15), (204, 8), (205, 10), (206, 9), (209, 18), (210, 13), (211, 12), (212, 17), (213, 24), (214, 16), (215, 18), (217, 25), (219, 20), (220, 26), (222, 23), (223, 24), (224, 12), (226, 14), (227, 15), (228, 13), (229, 14), (230, 19), (231, 12), (232, 19), (233, 15), (234, 24), (235, 22), (237, 13), (240, 17), (244, 14), (245, 14), (247, 12), (251, 17), (252, 10), (253, 26), (255, 18), (258, 11), (259, 10), (260, 18), (265, 16), (266, 13), (267, 18), (268, 14), (269, 22), (270, 14), (271, 10), (273, 24), (274, 11), (275, 9), (276, 13), (278, 14), (279, 13), (280, 30), (281, 18), (282, 14), (283, 11), (284, 15), (285, 9), (286, 34), (287, 34), (288, 25), (289, 19), (291, 10), (292, 34), (294, 26), (295, 9), (297, 14), (298, 26), (299, 20), (302, 15), (303, 17), (304, 32), (305, 17), (309, 15), (313, 12), (314, 13), (316, 16), (317, 17), (318, 30), (319, 13), (323, 29), (325, 17), (326, 32), (327, 19), (328, 21), (331, 20), (332, 26), (333, 19), (334, 31), (335, 18), (336, 14), (337, 23), (338, 21), (339, 13), (340, 27), (341, 26), (342, 19), (343, 29), (344, 10), (345, 32), (346, 12), (347, 30), (348, 10), (349, 10), (350, 29), (351, 29), (352, 18), (354, 18), (355, 15), (356, 28), (357, 13), (358, 20), (359, 14), (360, 40), (365, 9), (366, 13), (367, 10), (370, 11), (371, 12), (372, 12), (375, 45), (376, 13), (377, 34), (378, 20), (379, 39), (380, 29), (381, 27), (382, 14), (383, 32), (384, 24), (385, 17), (386, 10), (388, 13), (389, 20), (390, 20), (391, 12), (392, 12), (393, 12), (394, 21), (395, 23), (396, 19), (397, 10), (398, 24), (399, 20), (400, 19), (401, 11), (402, 34), (403, 33), (404, 33), (405, 24), (407, 35), (408, 14), (410, 10), (411, 12), (412, 39), (413, 13), (414, 40), (415, 24), (416, 13), (417, 27), (418, 33), (419, 23), (420, 21), (422, 14), (423, 25), (424, 13), (425, 19), (426, 16), (427, 13), (428, 11), (429, 21), (430, 16), (431, 18), (432, 10), (433, 19), (434, 10), (435, 34), (436, 19), (437, 33), (438, 13), (441, 18), (442, 19), (443, 35), (444, 16), (445, 17), (446, 16), (447, 18), (448, 16), (449, 22), (450, 20), (452, 19), (453, 24), (454, 8), (455, 15), (456, 17), (458, 15), (459, 12), (460, 15), (461, 18), (462, 15), (463, 21), (464, 19), (465, 13)]
nb_edges_0 = 12986 rho= 0.1 # of rows = 55 # of columns= 353 total_degree_0= 12986 RHS= 1298.6000000000001
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  2 with obj value: 509.87015503875966 KP time = 0.7374390442855656 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01711 - (Local CPU) 0.01711 - (Global CPU) 0.75455

 Solve status: Optimal Objective value: 272.68889 nb_rows 55 nb_cols 324
----------------------------------------
----------------------------------------

        Updated data after iteration: 2 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (55, 324) and density : 0.345 and number of remaining ones : 6429
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.345 density  and density_threshold= 0.900


I am in the while loop with i= 3 density= 0.3452300785634119 and fixed_threshold= 0.9

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 481.461
I solved model name = row_knapsack_problem for iteration i =  3 with obj value: 481.4607929515418 KP time = 0.7545527532929555 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01532 - (Local CPU) 0.01532 - (Global CPU) 0.76987

 Solve status: Optimal Objective value: 481.46079 nb_rows 49 nb_cols 324
----------------------------------------
----------------------------------------

        Updated data after iteration: 3 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (49, 324) and density : 0.352 and number of remaining ones : 5582
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(1, 14), (3, 13), (5, 16), (8, 11), (9, 14), (10, 20), (11, 18), (12, 18), (13, 20), (14, 20), (15, 21), (16, 16), (26, 25), (28, 23), (30, 13), (35, 8), (38, 28), (39, 17), (40, 13), (42, 12), (43, 11), (44, 20), (45, 9), (48, 12), (49, 17), (53, 11), (54, 15), (55, 15), (56, 11), (58, 12), (59, 17), (60, 15), (61, 21), (62, 24), (63, 21), (64, 13), (68, 11), (69, 8), (71, 12), (72, 18), (73, 13), (74, 20), (75, 11), (76, 19), (77, 15), (79, 22), (81, 20), (82, 14), (84, 22), (85, 11), (86, 11), (88, 10), (89, 9), (90, 9), (91, 12), (92, 25), (95, 21), (96, 12), (97, 17), (98, 19), (99, 14), (100, 11), (101, 16), (102, 9), (103, 9), (104, 15), (106, 14), (108, 18), (109, 14), (110, 22), (112, 11), (113, 23), (114, 10), (115, 12), (116, 11), (118, 18), (119, 28), (120, 15), (121, 21), (122, 18), (123, 24), (124, 22), (125, 11), (126, 13), (127, 13), (128, 11), (129, 17), (130, 11), (131, 12), (132, 16), (134, 16), (136, 24), (137, 20), (138, 14), (139, 36), (140, 17), (142, 11), (143, 20), (144, 20), (145, 11), (146, 21), (147, 14), (148, 30), (150, 13), (151, 13), (152, 13), (154, 17), (156, 10), (157, 14), (159, 14), (161, 16), (162, 12), (163, 18), (164, 20), (166, 15), (167, 21), (169, 16), (170, 10), (172, 17), (173, 24), (174, 18), (175, 10), (176, 14), (177, 21), (178, 20), (179, 15), (180, 25), (181, 24), (183, 24), (186, 16), (189, 11), (191, 14), (192, 19), (193, 13), (195, 19), (196, 21), (198, 10), (200, 15), (201, 19), (202, 13), (203, 15), (209, 16), (210, 12), (211, 11), (212, 16), (213, 21), (214, 14), (215, 16), (217, 22), (219, 19), (220, 22), (222, 20), (223, 21), (224, 11), (226, 13), (227, 14), (228, 11), (229, 13), (230, 15), (231, 11), (232, 17), (233, 14), (234, 22), (235, 20), (237, 12), (240, 16), (244, 13), (245, 14), (247, 10), (251, 17), (253, 23), (255, 15), (258, 10), (260, 17), (265, 15), (266, 13), (267, 18), (268, 13), (269, 18), (270, 13), (273, 20), (274, 10), (276, 13), (278, 12), (279, 13), (280, 25), (281, 18), (282, 13), (283, 11), (284, 14), (286, 30), (287, 29), (288, 21), (289, 18), (292, 30), (294, 21), (297, 13), (298, 21), (299, 16), (302, 14), (303, 17), (304, 27), (305, 17), (309, 15), (313, 11), (314, 13), (316, 15), (317, 14), (318, 26), (319, 10), (323, 27), (325, 14), (326, 29), (327, 15), (328, 18), (331, 17), (332, 23), (333, 16), (334, 27), (335, 15), (336, 13), (337, 22), (338, 17), (339, 12), (340, 23), (341, 25), (342, 18), (343, 25), (344, 9), (345, 28), (346, 12), (347, 25), (349, 10), (350, 24), (351, 24), (352, 17), (354, 17), (355, 14), (356, 23), (357, 12), (358, 19), (359, 13), (360, 35), (366, 12), (370, 11), (371, 11), (372, 12), (375, 40), (376, 11), (377, 32), (378, 19), (379, 36), (380, 26), (381, 23), (382, 12), (383, 27), (384, 22), (385, 15), (388, 12), (389, 18), (390, 18), (391, 12), (392, 12), (393, 11), (394, 19), (395, 21), (396, 18), (398, 22), (399, 19), (400, 18), (401, 11), (402, 28), (403, 28), (404, 28), (405, 19), (407, 30), (408, 14), (411, 11), (412, 34), (413, 12), (414, 36), (415, 22), (416, 13), (417, 22), (418, 30), (419, 23), (420, 19), (422, 11), (423, 24), (424, 11), (425, 18), (426, 16), (427, 11), (428, 9), (429, 19), (430, 15), (431, 17), (433, 18), (435, 29), (436, 16), (437, 29), (438, 12), (441, 18), (442, 19), (443, 32), (444, 15), (445, 16), (446, 16), (447, 17), (448, 16), (449, 21), (450, 19), (452, 19), (453, 23), (455, 15), (456, 16), (458, 15), (459, 12), (460, 15), (461, 17), (462, 15), (463, 20), (464, 19), (465, 13)]
nb_edges_0 = 10294 rho= 0.1 # of rows = 49 # of columns= 324 total_degree_0= 10294 RHS= 1029.4
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  3 with obj value: 481.4607929515418 KP time = 0.7698723372304812 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01679 - (Local CPU) 0.01679 - (Global CPU) 0.78666

 Solve status: Optimal Objective value: 258.01053 nb_rows 49 nb_cols 297
----------------------------------------
----------------------------------------

        Updated data after iteration: 3 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (49, 297) and density : 0.365 and number of remaining ones : 5582
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.365 density  and density_threshold= 0.900


I am in the while loop with i= 4 density= 0.365285508142651 and fixed_threshold= 0.9

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 410.889
I solved model name = row_knapsack_problem for iteration i =  4 with obj value: 410.88861386138615 KP time = 0.7866626292234287 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01479 - (Local CPU) 0.01479 - (Global CPU) 0.80145

 Solve status: Optimal Objective value: 410.88861 nb_rows 44 nb_cols 297
----------------------------------------
----------------------------------------

        Updated data after iteration: 4 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (44, 297) and density : 0.372 and number of remaining ones : 4857
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(1, 14), (3, 12), (5, 16), (8, 11), (9, 14), (10, 19), (11, 18), (12, 18), (13, 20), (14, 20), (15, 20), (16, 16), (26, 21), (28, 22), (30, 13), (38, 24), (39, 16), (40, 11), (42, 11), (43, 10), (44, 19), (48, 10), (49, 16), (53, 11), (54, 14), (55, 14), (56, 11), (58, 11), (59, 15), (60, 14), (61, 20), (62, 21), (63, 19), (64, 11), (68, 9), (71, 10), (72, 17), (73, 13), (74, 18), (75, 9), (76, 18), (77, 15), (79, 21), (81, 18), (82, 11), (84, 19), (85, 9), (86, 10), (91, 12), (92, 22), (95, 20), (96, 10), (97, 17), (98, 17), (99, 12), (100, 10), (101, 15), (104, 14), (106, 12), (108, 15), (109, 13), (110, 21), (113, 22), (115, 11), (116, 9), (118, 18), (119, 26), (120, 12), (121, 21), (122, 17), (123, 21), (124, 21), (125, 10), (126, 10), (127, 11), (128, 10), (129, 14), (130, 9), (131, 10), (132, 16), (134, 14), (136, 21), (137, 17), (138, 14), (139, 34), (140, 15), (142, 10), (143, 19), (144, 19), (145, 9), (146, 19), (147, 13), (148, 27), (150, 13), (151, 12), (152, 13), (154, 15), (157, 12), (159, 12), (161, 16), (162, 10), (163, 17), (164, 18), (166, 13), (167, 18), (169, 15), (172, 12), (173, 21), (174, 17), (176, 13), (177, 19), (178, 19), (179, 14), (180, 22), (181, 23), (183, 22), (186, 16), (189, 9), (191, 12), (192, 18), (193, 11), (195, 17), (196, 21), (200, 13), (201, 18), (202, 11), (203, 13), (209, 14), (210, 11), (212, 13), (213, 18), (214, 12), (215, 14), (217, 19), (219, 16), (220, 22), (222, 18), (223, 19), (226, 12), (227, 12), (229, 12), (230, 13), (231, 9), (232, 17), (233, 14), (234, 20), (235, 18), (237, 12), (240, 16), (244, 11), (245, 14), (251, 17), (253, 21), (255, 13), (260, 16), (265, 13), (266, 11), (267, 15), (268, 12), (269, 16), (270, 12), (273, 19), (276, 9), (278, 10), (279, 12), (280, 23), (281, 16), (282, 13), (284, 14), (286, 25), (287, 27), (288, 17), (289, 18), (292, 26), (294, 19), (297, 12), (298, 19), (299, 14), (302, 13), (303, 16), (304, 25), (305, 14), (309, 14), (313, 11), (314, 12), (316, 14), (317, 14), (318, 21), (323, 22), (325, 14), (326, 24), (327, 15), (328, 18), (331, 16), (332, 19), (333, 16), (334, 23), (335, 15), (336, 12), (337, 19), (338, 16), (339, 10), (340, 22), (341, 23), (342, 17), (343, 23), (345, 27), (346, 11), (347, 22), (350, 21), (351, 21), (352, 16), (354, 16), (355, 13), (356, 19), (357, 11), (358, 18), (359, 12), (360, 31), (366, 10), (370, 10), (371, 10), (372, 11), (375, 36), (377, 28), (378, 18), (379, 32), (380, 24), (381, 21), (382, 11), (383, 24), (384, 19), (385, 14), (388, 11), (389, 17), (390, 17), (391, 9), (392, 12), (393, 10), (394, 18), (395, 18), (396, 15), (398, 19), (399, 17), (400, 16), (402, 25), (403, 25), (404, 25), (405, 17), (407, 27), (408, 13), (411, 11), (412, 30), (413, 11), (414, 32), (415, 19), (416, 13), (417, 19), (418, 27), (419, 20), (420, 16), (422, 8), (423, 23), (424, 9), (425, 17), (426, 15), (427, 9), (429, 17), (430, 14), (431, 17), (433, 15), (435, 26), (436, 15), (437, 26), (438, 11), (441, 18), (442, 19), (443, 30), (444, 14), (445, 16), (446, 16), (447, 17), (448, 16), (449, 21), (450, 19), (452, 19), (453, 22), (455, 15), (456, 16), (458, 15), (459, 12), (460, 15), (461, 17), (462, 15), (463, 20), (464, 19), (465, 13)]
nb_edges_0 = 8211 rho= 0.1 # of rows = 44 # of columns= 297 total_degree_0= 8211 RHS= 821.1
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  4 with obj value: 410.88861386138615 KP time = 0.8014494202798232 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01635 - (Local CPU) 0.01635 - (Global CPU) 0.81780

 Solve status: Optimal Objective value: 223.38235 nb_rows 44 nb_cols 273
----------------------------------------
----------------------------------------

        Updated data after iteration: 4 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (44, 273) and density : 0.386 and number of remaining ones : 4857
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.386 density  and density_threshold= 0.900


I am in the while loop with i= 5 density= 0.38553113553113555 and fixed_threshold= 0.9

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 366.185
I solved model name = row_knapsack_problem for iteration i =  5 with obj value: 366.185 KP time = 0.8178026282694191 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01451 - (Local CPU) 0.01451 - (Global CPU) 0.83232

 Solve status: Optimal Objective value: 366.18500 nb_rows 39 nb_cols 273
----------------------------------------
----------------------------------------

        Updated data after iteration: 5 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (39, 273) and density : 0.392 and number of remaining ones : 4176
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(1, 14), (3, 12), (5, 15), (8, 10), (9, 14), (10, 18), (11, 18), (12, 17), (13, 20), (14, 20), (15, 18), (16, 16), (26, 19), (28, 19), (30, 11), (38, 21), (39, 13), (40, 9), (42, 9), (44, 17), (49, 14), (53, 11), (54, 13), (55, 14), (56, 10), (58, 9), (59, 13), (60, 13), (61, 17), (62, 20), (63, 16), (64, 7), (71, 10), (72, 15), (73, 13), (74, 17), (76, 15), (77, 14), (79, 18), (81, 17), (82, 8), (84, 15), (91, 12), (92, 18), (95, 18), (97, 16), (98, 15), (99, 11), (101, 14), (104, 12), (106, 12), (108, 14), (109, 12), (110, 20), (113, 20), (115, 9), (118, 18), (119, 24), (120, 10), (121, 20), (122, 15), (123, 21), (124, 20), (125, 8), (126, 9), (127, 10), (128, 10), (129, 12), (132, 16), (134, 13), (136, 21), (137, 15), (138, 14), (139, 30), (140, 15), (142, 9), (143, 17), (144, 17), (146, 18), (147, 12), (148, 24), (150, 13), (151, 10), (152, 12), (154, 13), (157, 11), (159, 9), (161, 14), (162, 10), (163, 14), (164, 15), (166, 11), (167, 17), (169, 12), (172, 10), (173, 18), (174, 15), (176, 11), (177, 17), (178, 18), (179, 13), (180, 19), (181, 20), (183, 21), (186, 13), (191, 12), (192, 14), (193, 10), (195, 15), (196, 20), (200, 12), (201, 16), (202, 9), (203, 11), (209, 11), (210, 11), (212, 13), (213, 15), (214, 12), (215, 12), (217, 16), (219, 15), (220, 20), (222, 17), (223, 17), (226, 12), (227, 11), (229, 11), (230, 12), (232, 17), (233, 13), (234, 18), (235, 15), (237, 11), (240, 14), (244, 11), (245, 14), (251, 17), (253, 17), (255, 10), (260, 15), (265, 11), (266, 10), (267, 15), (268, 11), (269, 12), (270, 11), (273, 16), (279, 10), (280, 20), (281, 15), (282, 12), (284, 14), (286, 21), (287, 23), (288, 14), (289, 16), (292, 23), (294, 16), (297, 12), (298, 18), (299, 11), (302, 12), (303, 13), (304, 22), (305, 13), (309, 14), (313, 11), (314, 12), (316, 14), (317, 13), (318, 18), (323, 19), (325, 12), (326, 21), (327, 13), (328, 16), (331, 14), (332, 17), (333, 14), (334, 19), (335, 13), (336, 11), (337, 17), (338, 14), (340, 19), (341, 21), (342, 15), (343, 19), (345, 24), (346, 11), (347, 18), (350, 18), (351, 18), (352, 15), (354, 14), (355, 11), (356, 15), (357, 10), (358, 16), (359, 11), (360, 26), (370, 9), (372, 10), (375, 31), (377, 24), (378, 14), (379, 27), (380, 19), (381, 20), (382, 10), (383, 23), (384, 16), (385, 14), (388, 11), (389, 15), (390, 15), (392, 10), (394, 16), (395, 18), (396, 12), (398, 17), (399, 15), (400, 13), (402, 21), (403, 22), (404, 23), (405, 16), (407, 25), (408, 12), (411, 8), (412, 28), (413, 10), (414, 29), (415, 19), (416, 12), (417, 15), (418, 25), (419, 19), (420, 15), (423, 21), (425, 14), (426, 14), (429, 15), (430, 13), (431, 14), (433, 12), (435, 24), (436, 13), (437, 22), (438, 10), (441, 18), (442, 18), (443, 28), (444, 13), (445, 16), (446, 16), (447, 16), (448, 16), (449, 20), (450, 17), (452, 19), (453, 19), (455, 14), (456, 16), (458, 15), (459, 12), (460, 15), (461, 17), (462, 15), (463, 19), (464, 18), (465, 13)]
nb_edges_0 = 6471 rho= 0.1 # of rows = 39 # of columns= 273 total_degree_0= 6471 RHS= 647.1
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  5 with obj value: 366.185 KP time = 0.832316170213744 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01656 - (Local CPU) 0.01656 - (Global CPU) 0.84887

 Solve status: Optimal Objective value: 198.93103 nb_rows 39 nb_cols 251
----------------------------------------
----------------------------------------

        Updated data after iteration: 5 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (39, 251) and density : 0.406 and number of remaining ones : 4176
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.406 density  and density_threshold= 0.900


I am in the while loop with i= 6 density= 0.4059658800694657 and fixed_threshold= 0.9

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 310.170
I solved model name = row_knapsack_problem for iteration i =  6 with obj value: 310.16975308641975 KP time = 0.8488730452954769 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01513 - (Local CPU) 0.01513 - (Global CPU) 0.86401

 Solve status: Optimal Objective value: 310.16975 nb_rows 35 nb_cols 251
----------------------------------------
----------------------------------------

        Updated data after iteration: 6 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (35, 251) and density : 0.413 and number of remaining ones : 3624
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(1, 14), (3, 12), (5, 15), (8, 9), (9, 14), (10, 18), (11, 17), (12, 17), (13, 20), (14, 20), (15, 18), (16, 16), (26, 18), (28, 16), (30, 9), (38, 20), (39, 11), (44, 14), (49, 13), (53, 9), (54, 10), (55, 14), (59, 12), (60, 12), (61, 16), (62, 17), (63, 14), (72, 13), (73, 10), (74, 16), (76, 12), (77, 13), (79, 16), (81, 17), (84, 12), (91, 11), (92, 15), (95, 15), (97, 14), (98, 14), (99, 11), (101, 11), (104, 10), (106, 12), (108, 12), (109, 10), (110, 18), (113, 18), (118, 17), (119, 21), (120, 7), (121, 17), (122, 12), (123, 20), (124, 19), (128, 9), (129, 11), (132, 14), (134, 12), (136, 20), (137, 14), (138, 13), (139, 28), (140, 13), (143, 15), (144, 16), (146, 18), (147, 10), (148, 21), (150, 11), (151, 10), (152, 12), (154, 12), (157, 9), (161, 11), (163, 14), (164, 13), (166, 11), (167, 14), (169, 11), (173, 15), (174, 15), (176, 10), (177, 16), (178, 16), (179, 11), (180, 19), (181, 19), (183, 20), (186, 13), (191, 10), (192, 14), (195, 14), (196, 20), (200, 12), (201, 14), (203, 10), (209, 9), (210, 11), (212, 13), (213, 14), (214, 10), (215, 10), (217, 15), (219, 14), (220, 19), (222, 15), (223, 16), (226, 10), (227, 9), (229, 11), (230, 9), (232, 16), (233, 12), (234, 16), (235, 13), (237, 10), (240, 12), (244, 11), (245, 14), (251, 16), (253, 15), (260, 15), (265, 11), (266, 10), (267, 13), (268, 11), (269, 10), (270, 10), (273, 13), (279, 10), (280, 16), (281, 14), (282, 11), (284, 14), (286, 17), (287, 20), (288, 11), (289, 16), (292, 20), (294, 13), (297, 12), (298, 15), (299, 8), (302, 12), (303, 13), (304, 19), (305, 12), (309, 12), (313, 11), (314, 11), (316, 14), (317, 13), (318, 14), (323, 16), (325, 12), (326, 18), (327, 13), (328, 15), (331, 14), (332, 14), (333, 14), (334, 18), (335, 12), (336, 9), (337, 16), (338, 14), (340, 17), (341, 18), (342, 14), (343, 17), (345, 22), (346, 11), (347, 16), (350, 17), (351, 16), (352, 13), (354, 12), (355, 8), (356, 13), (357, 8), (358, 14), (359, 9), (360, 23), (372, 9), (375, 27), (377, 21), (378, 11), (379, 24), (380, 16), (381, 19), (382, 9), (383, 21), (384, 15), (385, 12), (388, 11), (389, 14), (390, 13), (392, 8), (394, 15), (395, 16), (396, 11), (398, 14), (399, 14), (400, 13), (402, 18), (403, 20), (404, 20), (405, 14), (407, 23), (408, 11), (412, 25), (414, 27), (415, 17), (416, 10), (417, 14), (418, 22), (419, 18), (420, 14), (423, 19), (425, 13), (426, 13), (429, 13), (430, 11), (431, 13), (433, 11), (435, 22), (436, 10), (437, 20), (441, 18), (442, 18), (443, 26), (444, 12), (445, 15), (446, 16), (447, 16), (448, 16), (449, 19), (450, 17), (452, 18), (453, 18), (455, 14), (456, 16), (458, 15), (459, 12), (460, 15), (461, 17), (462, 15), (463, 18), (464, 18), (465, 12)]
nb_edges_0 = 5161 rho= 0.1 # of rows = 35 # of columns= 251 total_degree_0= 5161 RHS= 516.1
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  6 with obj value: 310.16975308641975 KP time = 0.8640058792661875 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01626 - (Local CPU) 0.01627 - (Global CPU) 0.88027

 Solve status: Optimal Objective value: 174.24000 nb_rows 35 nb_cols 231
----------------------------------------
----------------------------------------

        Updated data after iteration: 6 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (35, 231) and density : 0.426 and number of remaining ones : 3624
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.426 density  and density_threshold= 0.900


I am in the while loop with i= 7 density= 0.42634508348794065 and fixed_threshold= 0.9

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 260.743
I solved model name = row_knapsack_problem for iteration i =  7 with obj value: 260.7434482758621 KP time = 0.8802715042838827 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01445 - (Local CPU) 0.01445 - (Global CPU) 0.89472

 Solve status: Optimal Objective value: 260.74345 nb_rows 31 nb_cols 231
----------------------------------------
----------------------------------------

        Updated data after iteration: 7 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (31, 231) and density : 0.435 and number of remaining ones : 3112
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(1, 14), (3, 12), (5, 15), (9, 14), (10, 18), (11, 16), (12, 16), (13, 19), (14, 19), (15, 17), (16, 16), (26, 15), (28, 15), (38, 17), (39, 9), (44, 12), (49, 10), (54, 10), (55, 14), (59, 11), (60, 11), (61, 13), (62, 17), (63, 14), (72, 12), (73, 9), (74, 14), (76, 10), (77, 12), (79, 14), (81, 16), (84, 8), (91, 11), (92, 12), (95, 14), (97, 12), (98, 12), (99, 11), (101, 10), (104, 10), (106, 11), (108, 11), (109, 9), (110, 17), (113, 16), (118, 16), (119, 19), (121, 16), (122, 11), (123, 18), (124, 18), (129, 9), (132, 13), (134, 12), (136, 19), (137, 11), (138, 12), (139, 26), (140, 11), (143, 14), (144, 15), (146, 16), (147, 9), (148, 18), (150, 11), (151, 10), (152, 11), (154, 10), (161, 10), (163, 12), (164, 11), (166, 11), (167, 13), (169, 9), (173, 14), (174, 13), (177, 15), (178, 14), (179, 10), (180, 18), (181, 18), (183, 19), (186, 11), (192, 12), (195, 12), (196, 19), (200, 12), (201, 14), (210, 10), (212, 12), (213, 12), (214, 10), (215, 9), (217, 14), (219, 13), (220, 17), (222, 13), (223, 13), (226, 10), (229, 10), (232, 15), (233, 11), (234, 14), (235, 11), (237, 10), (240, 10), (244, 10), (245, 13), (251, 16), (253, 11), (260, 15), (265, 10), (266, 10), (267, 13), (268, 11), (269, 6), (270, 10), (273, 9), (279, 9), (280, 13), (281, 13), (282, 10), (284, 12), (286, 14), (287, 16), (288, 8), (289, 15), (292, 17), (294, 9), (297, 11), (298, 12), (302, 12), (303, 12), (304, 17), (305, 12), (309, 12), (313, 11), (314, 10), (316, 14), (317, 13), (318, 10), (323, 12), (325, 12), (326, 14), (327, 13), (328, 15), (331, 14), (332, 10), (333, 14), (334, 16), (335, 12), (337, 14), (338, 13), (340, 16), (341, 14), (342, 13), (343, 14), (345, 19), (346, 10), (347, 15), (350, 15), (351, 14), (352, 10), (354, 10), (356, 12), (358, 11), (360, 19), (375, 23), (377, 19), (378, 10), (379, 21), (380, 14), (381, 17), (383, 18), (384, 14), (385, 9), (388, 10), (389, 13), (390, 13), (394, 14), (395, 14), (396, 10), (398, 11), (399, 12), (400, 11), (402, 15), (403, 17), (404, 16), (405, 11), (407, 20), (408, 10), (412, 21), (414, 23), (415, 15), (416, 9), (417, 12), (418, 20), (419, 16), (420, 11), (423, 17), (425, 13), (426, 12), (429, 11), (430, 10), (431, 12), (433, 8), (435, 18), (436, 9), (437, 16), (441, 17), (442, 17), (443, 24), (444, 11), (445, 15), (446, 16), (447, 15), (448, 15), (449, 19), (450, 17), (452, 16), (453, 17), (455, 14), (456, 16), (458, 15), (459, 12), (460, 15), (461, 16), (462, 15), (463, 18), (464, 17), (465, 12)]
nb_edges_0 = 4049 rho= 0.1 # of rows = 31 # of columns= 231 total_degree_0= 4049 RHS= 404.90000000000003
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  7 with obj value: 260.7434482758621 KP time = 0.8947239622939378 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01569 - (Local CPU) 0.01570 - (Global CPU) 0.91042

 Solve status: Optimal Objective value: 158.85714 nb_rows 31 nb_cols 212
----------------------------------------
----------------------------------------

        Updated data after iteration: 7 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (31, 212) and density : 0.448 and number of remaining ones : 3112
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.448 density  and density_threshold= 0.900


I am in the while loop with i= 8 density= 0.4481132075471698 and fixed_threshold= 0.9

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 216.173
I solved model name = row_knapsack_problem for iteration i =  8 with obj value: 216.17328244274808 KP time = 0.9104196293046698 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01407 - (Local CPU) 0.01407 - (Global CPU) 0.92449

 Solve status: Optimal Objective value: 216.17328 nb_rows 28 nb_cols 212
----------------------------------------
----------------------------------------

        Updated data after iteration: 8 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (28, 212) and density : 0.456 and number of remaining ones : 2707
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(1, 14), (3, 12), (5, 15), (9, 14), (10, 17), (11, 16), (12, 16), (13, 18), (14, 18), (15, 17), (16, 16), (26, 15), (28, 13), (38, 15), (44, 12), (49, 8), (54, 9), (55, 14), (59, 11), (60, 9), (61, 13), (62, 14), (63, 14), (72, 12), (74, 13), (76, 8), (77, 10), (79, 14), (81, 14), (91, 10), (92, 10), (95, 11), (97, 11), (98, 11), (99, 9), (101, 9), (104, 8), (106, 9), (108, 11), (110, 16), (113, 15), (118, 16), (119, 18), (121, 15), (122, 9), (123, 17), (124, 17), (132, 13), (134, 12), (136, 17), (137, 8), (138, 12), (139, 23), (140, 11), (143, 14), (144, 12), (146, 13), (148, 15), (150, 11), (151, 10), (152, 11), (154, 10), (161, 7), (163, 11), (164, 11), (166, 9), (167, 12), (173, 14), (174, 11), (177, 14), (178, 12), (179, 9), (180, 16), (181, 16), (183, 16), (186, 10), (192, 11), (195, 12), (196, 18), (200, 12), (201, 14), (210, 8), (212, 11), (213, 10), (214, 9), (217, 12), (219, 12), (220, 15), (222, 11), (223, 11), (226, 9), (229, 9), (232, 13), (233, 10), (234, 13), (235, 10), (237, 9), (240, 10), (244, 10), (245, 13), (251, 15), (253, 10), (260, 15), (265, 10), (266, 8), (267, 11), (268, 10), (270, 10), (280, 11), (281, 11), (282, 8), (284, 10), (286, 13), (287, 15), (289, 14), (292, 15), (297, 9), (298, 11), (302, 10), (303, 10), (304, 14), (305, 12), (309, 12), (313, 11), (314, 10), (316, 14), (317, 13), (318, 8), (323, 10), (325, 11), (326, 11), (327, 12), (328, 15), (331, 13), (333, 14), (334, 15), (335, 12), (337, 12), (338, 12), (340, 14), (341, 12), (342, 13), (343, 13), (345, 18), (346, 10), (347, 14), (350, 14), (351, 13), (352, 8), (356, 11), (358, 9), (360, 16), (375, 20), (377, 16), (378, 9), (379, 18), (380, 13), (381, 17), (383, 17), (384, 14), (388, 10), (389, 11), (390, 12), (394, 13), (395, 13), (396, 9), (398, 9), (399, 11), (400, 11), (402, 13), (403, 14), (404, 14), (405, 9), (407, 17), (408, 10), (412, 18), (414, 20), (415, 13), (417, 11), (418, 17), (419, 14), (420, 10), (423, 15), (425, 12), (426, 11), (429, 8), (430, 9), (431, 11), (435, 17), (437, 14), (441, 17), (442, 16), (443, 23), (444, 10), (445, 15), (446, 16), (447, 15), (448, 15), (449, 17), (450, 16), (452, 16), (453, 16), (455, 14), (456, 16), (458, 15), (459, 12), (460, 15), (461, 16), (462, 15), (463, 17), (464, 16), (465, 12)]
nb_edges_0 = 3229 rho= 0.1 # of rows = 28 # of columns= 212 total_degree_0= 3229 RHS= 322.90000000000003
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  8 with obj value: 216.17328244274808 KP time = 0.9244916713796556 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01698 - (Local CPU) 0.01698 - (Global CPU) 0.94147

 Solve status: Optimal Objective value: 135.26842 nb_rows 28 nb_cols 195
----------------------------------------
----------------------------------------

        Updated data after iteration: 8 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (28, 195) and density : 0.470 and number of remaining ones : 2707
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.470 density  and density_threshold= 0.900


I am in the while loop with i= 9 density= 0.46996336996336996 and fixed_threshold= 0.9

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 182.236
I solved model name = row_knapsack_problem for iteration i =  9 with obj value: 182.23559322033896 KP time = 0.941470171441324 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01665 - (Local CPU) 0.01665 - (Global CPU) 0.95812

 Solve status: Optimal Objective value: 182.23559 nb_rows 25 nb_cols 195
----------------------------------------
----------------------------------------

        Updated data after iteration: 9 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (25, 195) and density : 0.480 and number of remaining ones : 2339
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(1, 14), (3, 12), (5, 14), (9, 14), (10, 16), (11, 15), (12, 16), (13, 17), (14, 18), (15, 17), (16, 15), (26, 12), (28, 13), (38, 13), (44, 12), (55, 12), (59, 8), (60, 8), (61, 13), (62, 14), (63, 13), (72, 12), (74, 10), (77, 7), (79, 12), (81, 14), (91, 10), (92, 8), (95, 11), (97, 11), (98, 10), (99, 7), (101, 9), (106, 7), (108, 10), (110, 14), (113, 13), (118, 16), (119, 16), (121, 15), (122, 6), (123, 16), (124, 17), (132, 13), (134, 12), (136, 16), (138, 12), (139, 21), (140, 11), (143, 14), (144, 11), (146, 10), (148, 12), (150, 11), (151, 9), (152, 10), (154, 9), (163, 11), (164, 11), (166, 9), (167, 11), (173, 13), (174, 10), (177, 13), (178, 12), (179, 8), (180, 15), (181, 16), (183, 13), (186, 9), (192, 9), (195, 11), (196, 15), (200, 12), (201, 13), (212, 8), (213, 8), (214, 8), (217, 10), (219, 12), (220, 12), (222, 9), (223, 9), (229, 9), (232, 12), (233, 10), (234, 12), (235, 9), (240, 9), (244, 10), (245, 12), (251, 13), (253, 9), (260, 15), (265, 10), (267, 9), (268, 8), (270, 9), (280, 8), (281, 10), (284, 9), (286, 11), (287, 14), (289, 13), (292, 13), (297, 8), (298, 10), (302, 9), (303, 9), (304, 12), (305, 11), (309, 12), (313, 10), (314, 10), (316, 14), (317, 13), (323, 8), (325, 10), (326, 9), (327, 11), (328, 14), (331, 12), (333, 13), (334, 12), (335, 11), (337, 10), (338, 11), (340, 14), (341, 10), (342, 11), (343, 11), (345, 16), (346, 9), (347, 12), (350, 12), (351, 12), (356, 9), (358, 7), (360, 13), (375, 17), (377, 16), (379, 15), (380, 10), (381, 14), (383, 14), (384, 11), (388, 10), (389, 11), (390, 12), (394, 12), (395, 10), (396, 9), (399, 10), (400, 10), (402, 11), (403, 11), (404, 12), (405, 7), (407, 14), (408, 10), (412, 15), (414, 17), (415, 12), (417, 11), (418, 14), (419, 11), (420, 10), (423, 12), (425, 11), (426, 8), (431, 9), (435, 15), (437, 12), (441, 16), (442, 16), (443, 22), (444, 10), (445, 15), (446, 16), (447, 15), (448, 14), (449, 16), (450, 16), (452, 15), (453, 15), (455, 14), (456, 16), (458, 15), (459, 12), (460, 15), (461, 15), (462, 15), (463, 16), (464, 16), (465, 12)]
nb_edges_0 = 2536 rho= 0.1 # of rows = 25 # of columns= 195 total_degree_0= 2536 RHS= 253.60000000000002
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  9 with obj value: 182.23559322033896 KP time = 0.9581227134913206 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01666 - (Local CPU) 0.01666 - (Global CPU) 0.97478

 Solve status: Optimal Objective value: 109.04706 nb_rows 25 nb_cols 180
----------------------------------------
----------------------------------------

        Updated data after iteration: 9 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (25, 180) and density : 0.495 and number of remaining ones : 2339
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.495 density  and density_threshold= 0.900


I am in the while loop with i= 10 density= 0.49466666666666664 and fixed_threshold= 0.9

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 165.071
I solved model name = row_knapsack_problem for iteration i =  10 with obj value: 165.0705882352941 KP time = 0.9747841714415699 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01423 - (Local CPU) 0.01423 - (Global CPU) 0.98901

 Solve status: Optimal Objective value: 165.07059 nb_rows 22 nb_cols 180
----------------------------------------
----------------------------------------

        Updated data after iteration: 10 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (22, 180) and density : 0.504 and number of remaining ones : 1997
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(1, 13), (3, 11), (5, 14), (9, 13), (10, 15), (11, 14), (12, 14), (13, 15), (14, 16), (15, 16), (16, 14), (26, 11), (28, 11), (38, 11), (44, 11), (55, 11), (61, 12), (62, 12), (63, 11), (72, 10), (74, 9), (79, 10), (81, 12), (91, 9), (95, 10), (97, 10), (98, 8), (101, 9), (108, 8), (110, 13), (113, 10), (118, 14), (119, 15), (121, 14), (123, 14), (124, 14), (132, 11), (134, 12), (136, 14), (138, 11), (139, 19), (140, 9), (143, 11), (144, 10), (146, 10), (148, 10), (150, 9), (151, 7), (152, 9), (154, 7), (163, 10), (164, 10), (166, 9), (167, 8), (173, 11), (174, 10), (177, 12), (178, 11), (179, 6), (180, 14), (181, 14), (183, 13), (186, 9), (192, 8), (195, 10), (196, 14), (200, 12), (201, 11), (213, 8), (214, 7), (217, 9), (219, 11), (220, 11), (222, 8), (223, 8), (229, 9), (232, 12), (233, 9), (234, 10), (235, 9), (240, 9), (244, 9), (245, 10), (251, 10), (253, 9), (260, 13), (265, 9), (267, 8), (270, 8), (281, 8), (284, 8), (286, 10), (287, 14), (289, 11), (292, 10), (298, 9), (302, 8), (303, 9), (304, 10), (305, 9), (309, 10), (313, 8), (314, 9), (316, 13), (317, 12), (325, 9), (326, 9), (327, 10), (328, 13), (331, 10), (333, 12), (334, 11), (335, 9), (337, 9), (338, 10), (340, 12), (341, 9), (342, 9), (343, 10), (345, 14), (346, 8), (347, 11), (350, 11), (351, 10), (356, 8), (360, 11), (375, 15), (377, 15), (379, 13), (380, 9), (381, 12), (383, 12), (384, 11), (388, 8), (389, 11), (390, 11), (394, 12), (395, 10), (396, 9), (399, 10), (400, 8), (402, 10), (403, 8), (404, 10), (407, 12), (408, 9), (412, 14), (414, 16), (415, 11), (417, 9), (418, 11), (419, 10), (420, 9), (423, 11), (425, 10), (431, 8), (435, 12), (437, 10), (441, 14), (442, 15), (443, 19), (444, 8), (445, 14), (446, 15), (447, 14), (448, 14), (449, 14), (450, 15), (452, 14), (453, 14), (455, 13), (456, 15), (458, 14), (459, 11), (460, 14), (461, 14), (462, 15), (463, 15), (464, 15), (465, 11)]
nb_edges_0 = 1963 rho= 0.1 # of rows = 22 # of columns= 180 total_degree_0= 1963 RHS= 196.3
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  10 with obj value: 165.0705882352941 KP time = 0.9890122544020414 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01503 - (Local CPU) 0.01503 - (Global CPU) 1.00404

 Solve status: Optimal Objective value: 104.31429 nb_rows 22 nb_cols 166
----------------------------------------
----------------------------------------

        Updated data after iteration: 10 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (22, 166) and density : 0.518 and number of remaining ones : 1997
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.518 density  and density_threshold= 0.900


I am in the while loop with i= 11 density= 0.5175246440306681 and fixed_threshold= 0.9

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 138.308
I solved model name = row_knapsack_problem for iteration i =  11 with obj value: 138.30752688172043 KP time = 1.004040379426442 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01378 - (Local CPU) 0.01378 - (Global CPU) 1.01782

 Solve status: Optimal Objective value: 138.30753 nb_rows 20 nb_cols 166
----------------------------------------
----------------------------------------

        Updated data after iteration: 11 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (20, 166) and density : 0.525 and number of remaining ones : 1744
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(1, 13), (3, 11), (5, 14), (9, 13), (10, 15), (11, 14), (12, 14), (13, 14), (14, 15), (15, 16), (16, 14), (26, 11), (28, 9), (38, 10), (44, 10), (55, 10), (61, 11), (62, 11), (63, 10), (72, 9), (74, 9), (79, 9), (81, 11), (91, 9), (95, 9), (97, 9), (98, 6), (101, 9), (108, 8), (110, 12), (113, 9), (118, 13), (119, 14), (121, 13), (123, 12), (124, 13), (132, 9), (134, 11), (136, 13), (138, 10), (139, 17), (140, 8), (143, 10), (144, 9), (146, 10), (148, 9), (150, 9), (152, 8), (163, 8), (164, 9), (166, 8), (167, 7), (173, 10), (174, 9), (177, 11), (178, 9), (180, 13), (181, 12), (183, 12), (186, 9), (192, 6), (195, 9), (196, 13), (200, 11), (201, 9), (213, 8), (217, 8), (219, 10), (220, 10), (222, 7), (223, 8), (229, 9), (232, 11), (233, 7), (234, 9), (235, 9), (240, 8), (244, 8), (245, 10), (251, 9), (253, 8), (260, 13), (265, 9), (267, 7), (270, 7), (281, 7), (286, 9), (287, 13), (289, 10), (292, 9), (298, 7), (303, 8), (304, 9), (305, 8), (309, 9), (314, 8), (316, 11), (317, 10), (325, 8), (326, 8), (327, 9), (328, 11), (331, 8), (333, 11), (334, 10), (335, 8), (337, 8), (338, 9), (340, 11), (341, 8), (342, 9), (343, 9), (345, 12), (347, 10), (350, 10), (351, 8), (360, 10), (375, 14), (377, 14), (379, 11), (380, 8), (381, 11), (383, 12), (384, 10), (389, 10), (390, 11), (394, 11), (395, 8), (396, 9), (399, 10), (402, 8), (404, 8), (407, 10), (408, 9), (412, 12), (414, 14), (415, 11), (417, 7), (418, 9), (419, 10), (420, 8), (423, 10), (425, 9), (435, 10), (437, 8), (441, 14), (442, 14), (443, 18), (445, 14), (446, 15), (447, 14), (448, 14), (449, 14), (450, 15), (452, 14), (453, 14), (455, 13), (456, 14), (458, 14), (459, 11), (460, 14), (461, 13), (462, 15), (463, 15), (464, 15), (465, 11)]
nb_edges_0 = 1576 rho= 0.1 # of rows = 20 # of columns= 166 total_degree_0= 1576 RHS= 157.60000000000002
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  11 with obj value: 138.30752688172043 KP time = 1.0178183374227956 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01499 - (Local CPU) 0.01499 - (Global CPU) 1.03281

 Solve status: Optimal Objective value: 85.06667 nb_rows 20 nb_cols 153
----------------------------------------
----------------------------------------

        Updated data after iteration: 11 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (20, 153) and density : 0.540 and number of remaining ones : 1744
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.540 density  and density_threshold= 0.900


I am in the while loop with i= 12 density= 0.5398692810457516 and fixed_threshold= 0.9

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 123.267
I solved model name = row_knapsack_problem for iteration i =  12 with obj value: 123.26666666666668 KP time = 1.0328092953423038 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01493 - (Local CPU) 0.01493 - (Global CPU) 1.04774

 Solve status: Optimal Objective value: 123.26667 nb_rows 18 nb_cols 153
----------------------------------------
----------------------------------------

        Updated data after iteration: 12 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (18, 153) and density : 0.548 and number of remaining ones : 1509
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(1, 13), (3, 11), (5, 14), (9, 13), (10, 14), (11, 14), (12, 14), (13, 14), (14, 15), (15, 15), (16, 14), (26, 9), (28, 9), (38, 8), (44, 9), (55, 9), (61, 10), (62, 10), (63, 9), (72, 8), (74, 9), (79, 8), (81, 9), (91, 8), (95, 8), (97, 7), (101, 8), (108, 7), (110, 11), (113, 8), (118, 12), (119, 12), (121, 11), (123, 11), (124, 11), (132, 7), (134, 9), (136, 11), (138, 8), (139, 15), (140, 6), (143, 8), (144, 9), (146, 10), (148, 9), (150, 7), (152, 6), (163, 6), (164, 8), (166, 7), (173, 9), (174, 9), (177, 10), (178, 8), (180, 12), (181, 10), (183, 11), (186, 8), (195, 8), (196, 11), (200, 10), (201, 7), (213, 7), (217, 8), (219, 10), (220, 10), (223, 7), (229, 8), (232, 10), (234, 7), (235, 8), (240, 8), (244, 7), (245, 9), (251, 8), (253, 8), (260, 11), (265, 9), (286, 8), (287, 12), (289, 9), (292, 8), (303, 7), (304, 8), (305, 8), (309, 9), (314, 7), (316, 10), (317, 9), (327, 8), (328, 9), (331, 7), (333, 10), (334, 9), (335, 6), (337, 8), (338, 8), (340, 10), (341, 7), (342, 8), (343, 8), (345, 10), (347, 9), (350, 9), (351, 7), (360, 9), (375, 12), (377, 14), (379, 9), (380, 6), (381, 9), (383, 10), (384, 8), (389, 10), (390, 11), (394, 9), (395, 6), (396, 9), (399, 9), (402, 8), (404, 7), (407, 9), (408, 8), (412, 10), (414, 12), (415, 9), (418, 8), (419, 8), (420, 7), (423, 9), (425, 8), (435, 9), (441, 14), (442, 14), (443, 17), (445, 14), (446, 14), (447, 14), (448, 14), (449, 14), (450, 15), (452, 14), (453, 14), (455, 13), (456, 14), (458, 14), (459, 11), (460, 14), (461, 13), (462, 14), (463, 15), (464, 15), (465, 11)]
nb_edges_0 = 1245 rho= 0.1 # of rows = 18 # of columns= 153 total_degree_0= 1245 RHS= 124.5
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  12 with obj value: 123.26666666666668 KP time = 1.0477408793522045 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01656 - (Local CPU) 0.01656 - (Global CPU) 1.06430

 Solve status: Optimal Objective value: 69.40909 nb_rows 18 nb_cols 142
----------------------------------------
----------------------------------------

        Updated data after iteration: 12 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (18, 142) and density : 0.563 and number of remaining ones : 1509
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.563 density  and density_threshold= 0.900


I am in the while loop with i= 13 density= 0.5625978090766823 and fixed_threshold= 0.9

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 106.722
I solved model name = row_knapsack_problem for iteration i =  13 with obj value: 106.72222222222223 KP time = 1.064299087272957 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01462 - (Local CPU) 0.01462 - (Global CPU) 1.07892

 Solve status: Optimal Objective value: 106.72222 nb_rows 16 nb_cols 142
----------------------------------------
----------------------------------------

        Updated data after iteration: 13 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (16, 142) and density : 0.572 and number of remaining ones : 1299
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(1, 11), (3, 9), (5, 12), (9, 11), (10, 12), (11, 12), (12, 12), (13, 12), (14, 13), (15, 13), (16, 12), (26, 9), (28, 7), (38, 8), (44, 9), (55, 9), (61, 10), (62, 10), (63, 9), (72, 8), (74, 7), (79, 8), (81, 8), (91, 8), (95, 8), (97, 7), (101, 7), (108, 7), (110, 10), (113, 7), (118, 12), (119, 11), (121, 11), (123, 10), (124, 10), (132, 7), (134, 8), (136, 10), (138, 8), (139, 14), (143, 8), (144, 8), (146, 9), (148, 8), (150, 7), (164, 7), (173, 8), (174, 9), (177, 9), (178, 8), (180, 12), (181, 10), (183, 10), (186, 7), (195, 7), (196, 9), (200, 9), (201, 7), (213, 5), (217, 6), (219, 10), (220, 8), (229, 8), (232, 9), (234, 7), (235, 8), (240, 8), (244, 7), (245, 9), (251, 8), (253, 7), (260, 10), (265, 9), (286, 7), (287, 11), (289, 8), (292, 8), (303, 6), (304, 7), (305, 6), (309, 7), (316, 10), (317, 9), (327, 8), (328, 8), (331, 7), (333, 9), (334, 8), (337, 7), (338, 8), (340, 10), (342, 7), (343, 7), (345, 9), (347, 9), (350, 9), (351, 7), (360, 8), (375, 11), (377, 12), (379, 8), (381, 8), (383, 9), (384, 7), (389, 9), (390, 10), (394, 7), (396, 8), (399, 8), (402, 7), (404, 6), (407, 8), (408, 7), (412, 8), (414, 11), (415, 9), (418, 8), (419, 8), (423, 8), (425, 7), (435, 8), (441, 12), (442, 12), (443, 15), (445, 12), (446, 12), (447, 12), (448, 12), (449, 12), (450, 13), (452, 12), (453, 12), (455, 11), (456, 12), (458, 12), (459, 9), (460, 12), (461, 11), (462, 12), (463, 13), (464, 13), (465, 9)]
nb_edges_0 = 973 rho= 0.1 # of rows = 16 # of columns= 142 total_degree_0= 973 RHS= 97.30000000000001
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  13 with obj value: 106.72222222222223 KP time = 1.0789200452854857 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01513 - (Local CPU) 0.01513 - (Global CPU) 1.09405

 Solve status: Optimal Objective value: 65.01111 nb_rows 16 nb_cols 131
----------------------------------------
----------------------------------------

        Updated data after iteration: 13 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (16, 131) and density : 0.586 and number of remaining ones : 1299
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.586 density  and density_threshold= 0.900


I am in the while loop with i= 14 density= 0.5858778625954199 and fixed_threshold= 0.9

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 97.459
I solved model name = row_knapsack_problem for iteration i =  14 with obj value: 97.45901639344262 KP time = 1.0940495453542098 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01409 - (Local CPU) 0.01409 - (Global CPU) 1.10814

 Solve status: Optimal Objective value: 97.45902 nb_rows 14 nb_cols 131
----------------------------------------
----------------------------------------

        Updated data after iteration: 14 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (14, 131) and density : 0.594 and number of remaining ones : 1089
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(1, 10), (3, 7), (5, 10), (9, 9), (10, 10), (11, 10), (12, 10), (13, 10), (14, 11), (15, 11), (16, 10), (26, 9), (38, 8), (44, 7), (55, 9), (61, 9), (62, 8), (63, 8), (72, 7), (74, 6), (79, 6), (81, 8), (91, 8), (95, 7), (97, 7), (101, 7), (108, 6), (110, 9), (113, 7), (118, 12), (119, 11), (121, 9), (123, 10), (124, 10), (132, 7), (134, 6), (136, 10), (138, 8), (139, 12), (143, 7), (144, 7), (146, 9), (148, 7), (150, 6), (164, 5), (173, 7), (174, 9), (177, 9), (178, 8), (180, 10), (181, 9), (183, 10), (186, 5), (195, 6), (196, 9), (200, 7), (201, 6), (219, 9), (220, 8), (229, 8), (232, 9), (234, 5), (235, 7), (240, 7), (245, 8), (251, 7), (253, 6), (260, 9), (265, 9), (286, 5), (287, 10), (289, 8), (292, 6), (316, 9), (317, 8), (327, 7), (328, 8), (331, 6), (333, 8), (334, 8), (338, 8), (340, 8), (342, 7), (345, 8), (347, 8), (350, 8), (351, 7), (360, 7), (375, 9), (377, 11), (379, 7), (381, 8), (383, 8), (384, 7), (389, 9), (390, 8), (394, 6), (396, 6), (399, 8), (402, 5), (407, 6), (408, 6), (412, 8), (414, 11), (415, 9), (418, 7), (419, 7), (423, 7), (425, 7), (435, 8), (441, 10), (442, 10), (443, 13), (445, 10), (446, 10), (447, 10), (448, 10), (449, 10), (450, 11), (452, 10), (453, 10), (455, 9), (456, 11), (458, 10), (459, 8), (460, 10), (461, 9), (462, 10), (463, 11), (464, 11), (465, 7)]
nb_edges_0 = 745 rho= 0.1 # of rows = 14 # of columns= 131 total_degree_0= 745 RHS= 74.5
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  14 with obj value: 97.45901639344262 KP time = 1.1081407122546807 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01503 - (Local CPU) 0.01503 - (Global CPU) 1.12317

 Solve status: Optimal Objective value: 47.12500 nb_rows 14 nb_cols 122
----------------------------------------
----------------------------------------

        Updated data after iteration: 14 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (14, 122) and density : 0.609 and number of remaining ones : 1089
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.609 density  and density_threshold= 0.900


I am in the while loop with i= 15 density= 0.6088992974238876 and fixed_threshold= 0.9

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 79.156
I solved model name = row_knapsack_problem for iteration i =  15 with obj value: 79.15636363636364 KP time = 1.1231697542825714 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01382 - (Local CPU) 0.01382 - (Global CPU) 1.13699

 Solve status: Optimal Objective value: 79.15636 nb_rows 12 nb_cols 122
----------------------------------------
----------------------------------------

        Updated data after iteration: 15 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (12, 122) and density : 0.620 and number of remaining ones : 907
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(1, 10), (3, 7), (5, 10), (9, 9), (10, 10), (11, 10), (12, 9), (13, 10), (14, 10), (15, 11), (16, 10), (26, 7), (38, 6), (44, 5), (55, 7), (61, 8), (62, 6), (63, 6), (72, 6), (74, 6), (79, 6), (81, 6), (91, 6), (95, 6), (97, 5), (101, 5), (110, 7), (113, 5), (118, 10), (119, 9), (121, 8), (123, 8), (124, 8), (132, 5), (134, 5), (136, 8), (138, 6), (139, 10), (143, 5), (144, 7), (146, 8), (148, 7), (150, 4), (173, 7), (174, 8), (177, 7), (178, 7), (180, 9), (181, 8), (183, 9), (195, 6), (196, 7), (200, 5), (201, 6), (219, 7), (220, 6), (229, 6), (232, 7), (235, 5), (240, 5), (245, 6), (251, 5), (253, 6), (260, 8), (265, 7), (287, 9), (289, 7), (292, 6), (316, 7), (317, 6), (327, 5), (328, 6), (333, 6), (334, 6), (338, 6), (340, 6), (342, 7), (345, 6), (347, 6), (350, 6), (351, 5), (360, 5), (375, 7), (377, 10), (379, 5), (381, 7), (383, 8), (384, 6), (389, 9), (390, 7), (394, 5), (399, 8), (408, 6), (412, 6), (414, 9), (415, 7), (418, 6), (419, 6), (423, 6), (425, 6), (435, 7), (441, 10), (442, 10), (443, 12), (445, 10), (446, 10), (447, 10), (448, 10), (449, 10), (450, 11), (452, 10), (453, 10), (455, 9), (456, 11), (458, 10), (459, 8), (460, 10), (461, 9), (462, 10), (463, 10), (464, 10), (465, 7)]
nb_edges_0 = 557 rho= 0.1 # of rows = 12 # of columns= 122 total_degree_0= 557 RHS= 55.7
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  15 with obj value: 79.15636363636364 KP time = 1.1369947132188827 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01455 - (Local CPU) 0.01455 - (Global CPU) 1.15155

 Solve status: Optimal Objective value: 38.07143 nb_rows 12 nb_cols 114
----------------------------------------
----------------------------------------

        Updated data after iteration: 15 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (12, 114) and density : 0.635 and number of remaining ones : 907
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.635 density  and density_threshold= 0.900


I am in the while loop with i= 16 density= 0.6345029239766082 and fixed_threshold= 0.9

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 59.615
I solved model name = row_knapsack_problem for iteration i =  16 with obj value: 59.61538461538462 KP time = 1.1515452961903065 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01369 - (Local CPU) 0.01369 - (Global CPU) 1.16524

 Solve status: Optimal Objective value: 59.61538 nb_rows 11 nb_cols 114
----------------------------------------
----------------------------------------

        Updated data after iteration: 16 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (11, 114) and density : 0.643 and number of remaining ones : 806
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(1, 10), (3, 7), (5, 10), (9, 9), (10, 10), (11, 10), (12, 9), (13, 10), (14, 10), (15, 11), (16, 10), (26, 6), (38, 5), (55, 6), (61, 7), (62, 5), (63, 5), (72, 5), (74, 6), (79, 6), (81, 5), (91, 5), (95, 5), (97, 4), (101, 4), (110, 6), (113, 4), (118, 9), (119, 8), (121, 7), (123, 7), (124, 7), (132, 4), (134, 4), (136, 7), (138, 5), (139, 9), (143, 4), (144, 7), (146, 7), (148, 7), (173, 6), (174, 7), (177, 6), (178, 7), (180, 9), (181, 7), (183, 8), (195, 5), (196, 6), (200, 5), (201, 6), (219, 7), (220, 5), (229, 5), (232, 6), (235, 5), (240, 5), (245, 5), (253, 5), (260, 7), (265, 6), (287, 8), (289, 6), (292, 6), (316, 6), (317, 5), (328, 5), (333, 5), (334, 5), (338, 5), (340, 5), (342, 7), (345, 5), (347, 5), (350, 5), (375, 6), (377, 9), (381, 7), (383, 7), (384, 6), (389, 9), (390, 7), (399, 7), (408, 5), (412, 5), (414, 8), (415, 6), (418, 6), (419, 5), (423, 6), (425, 6), (435, 7), (441, 10), (442, 10), (443, 11), (445, 10), (446, 10), (447, 10), (448, 10), (449, 10), (450, 11), (452, 10), (453, 10), (455, 9), (456, 11), (458, 10), (459, 8), (460, 10), (461, 9), (462, 10), (463, 10), (464, 10), (465, 7)]
nb_edges_0 = 448 rho= 0.1 # of rows = 11 # of columns= 114 total_degree_0= 448 RHS= 44.800000000000004
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  16 with obj value: 59.61538461538462 KP time = 1.165235671098344 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01460 - (Local CPU) 0.01460 - (Global CPU) 1.17983

 Solve status: Optimal Objective value: 26.33333 nb_rows 11 nb_cols 107
----------------------------------------
----------------------------------------

        Updated data after iteration: 16 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (11, 107) and density : 0.660 and number of remaining ones : 806
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.660 density  and density_threshold= 0.900


I am in the while loop with i= 17 density= 0.6601529311809685 and fixed_threshold= 0.9

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 51.064
I solved model name = row_knapsack_problem for iteration i =  17 with obj value: 51.06382978723404 KP time = 1.1798317960929126 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01384 - (Local CPU) 0.01384 - (Global CPU) 1.19367

 Solve status: Optimal Objective value: 51.06383 nb_rows 10 nb_cols 107
----------------------------------------
----------------------------------------

        Updated data after iteration: 17 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (10, 107) and density : 0.670 and number of remaining ones : 717
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(1, 10), (3, 7), (5, 10), (9, 8), (10, 10), (11, 10), (12, 9), (13, 9), (14, 9), (15, 10), (16, 10), (26, 5), (38, 4), (55, 5), (61, 6), (62, 4), (63, 4), (72, 4), (74, 6), (79, 6), (81, 4), (91, 4), (95, 4), (110, 5), (118, 8), (119, 7), (121, 6), (123, 6), (124, 6), (136, 6), (138, 4), (139, 8), (144, 7), (146, 6), (148, 7), (173, 5), (174, 6), (177, 5), (178, 7), (180, 8), (181, 6), (183, 7), (195, 5), (196, 6), (200, 4), (201, 6), (219, 6), (220, 4), (229, 4), (232, 5), (235, 4), (240, 4), (245, 4), (253, 5), (260, 6), (265, 5), (287, 7), (289, 5), (292, 6), (316, 5), (328, 4), (333, 4), (334, 4), (338, 4), (340, 4), (342, 7), (345, 5), (347, 4), (350, 5), (375, 5), (377, 8), (381, 7), (383, 7), (384, 6), (389, 9), (390, 6), (399, 7), (408, 4), (412, 5), (414, 8), (415, 6), (418, 5), (419, 5), (423, 5), (425, 5), (435, 6), (441, 10), (442, 10), (443, 10), (445, 10), (446, 10), (447, 10), (448, 10), (449, 10), (450, 10), (452, 10), (453, 10), (455, 9), (456, 10), (458, 10), (459, 8), (460, 10), (461, 9), (462, 10), (463, 10), (464, 10), (465, 7)]
nb_edges_0 = 353 rho= 0.1 # of rows = 10 # of columns= 107 total_degree_0= 353 RHS= 35.300000000000004
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  17 with obj value: 51.06382978723404 KP time = 1.193672670982778 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01433 - (Local CPU) 0.01433 - (Global CPU) 1.20800

 Solve status: Optimal Objective value: 23.53333 nb_rows 10 nb_cols 101
----------------------------------------
----------------------------------------

        Updated data after iteration: 17 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (10, 101) and density : 0.686 and number of remaining ones : 717
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.686 density  and density_threshold= 0.900


I am in the while loop with i= 18 density= 0.6861386138613862 and fixed_threshold= 0.9

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 48.343
I solved model name = row_knapsack_problem for iteration i =  18 with obj value: 48.3425 KP time = 1.208002128987573 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01383 - (Local CPU) 0.01384 - (Global CPU) 1.22184

 Solve status: Optimal Objective value: 48.34250 nb_rows 9 nb_cols 101
----------------------------------------
----------------------------------------

        Updated data after iteration: 18 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (9, 101) and density : 0.695 and number of remaining ones : 632
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(1, 9), (3, 7), (5, 9), (9, 7), (10, 9), (11, 9), (12, 8), (13, 8), (14, 8), (15, 9), (16, 9), (26, 5), (55, 4), (61, 6), (62, 4), (63, 4), (72, 4), (74, 5), (79, 5), (81, 3), (91, 4), (95, 4), (110, 5), (118, 8), (119, 6), (121, 6), (123, 6), (124, 6), (136, 6), (138, 3), (139, 8), (144, 6), (146, 5), (148, 7), (173, 5), (174, 5), (177, 5), (178, 7), (180, 8), (181, 6), (183, 7), (195, 5), (196, 6), (201, 6), (219, 6), (220, 3), (229, 3), (232, 5), (235, 3), (240, 3), (245, 3), (253, 4), (260, 6), (265, 5), (287, 6), (289, 5), (292, 6), (316, 5), (333, 4), (334, 4), (342, 6), (345, 5), (350, 5), (375, 5), (377, 7), (381, 6), (383, 6), (384, 5), (389, 8), (390, 5), (399, 6), (408, 4), (412, 4), (414, 7), (415, 5), (418, 4), (419, 4), (423, 4), (425, 5), (435, 5), (441, 9), (442, 9), (443, 9), (445, 9), (446, 9), (447, 9), (448, 9), (449, 9), (450, 9), (452, 9), (453, 9), (455, 8), (456, 9), (458, 9), (459, 8), (460, 9), (461, 8), (462, 9), (463, 9), (464, 9), (465, 6)]
nb_edges_0 = 277 rho= 0.1 # of rows = 9 # of columns= 101 total_degree_0= 277 RHS= 27.700000000000003
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  18 with obj value: 48.3425 KP time = 1.2218380040721968 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01520 - (Local CPU) 0.01521 - (Global CPU) 1.23704

 Solve status: Optimal Objective value: 13.85000 nb_rows 9 nb_cols 96
----------------------------------------
----------------------------------------

        Updated data after iteration: 18 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (9, 96) and density : 0.714 and number of remaining ones : 632
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.714 density  and density_threshold= 0.900


I am in the while loop with i= 19 density= 0.7141203703703703 and fixed_threshold= 0.9

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 41.167
I solved model name = row_knapsack_problem for iteration i =  19 with obj value: 41.166666666666664 KP time = 1.2370432121679187 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01377 - (Local CPU) 0.01377 - (Global CPU) 1.25081

 Solve status: Optimal Objective value: 41.16667 nb_rows 8 nb_cols 96
----------------------------------------
----------------------------------------

        Updated data after iteration: 19 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (8, 96) and density : 0.725 and number of remaining ones : 557
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(1, 8), (3, 6), (5, 8), (9, 6), (10, 8), (11, 8), (12, 8), (13, 7), (14, 7), (15, 8), (16, 8), (26, 5), (55, 4), (61, 5), (62, 4), (63, 4), (72, 4), (74, 4), (79, 5), (91, 4), (95, 4), (110, 5), (118, 7), (119, 6), (121, 5), (123, 5), (124, 5), (136, 6), (139, 7), (144, 5), (146, 4), (148, 6), (173, 5), (174, 5), (177, 4), (178, 6), (180, 7), (181, 6), (183, 7), (195, 4), (196, 5), (201, 5), (219, 5), (232, 5), (240, 2), (245, 3), (253, 3), (260, 6), (265, 5), (287, 5), (289, 4), (292, 5), (316, 5), (333, 4), (334, 4), (342, 6), (345, 4), (350, 4), (375, 5), (377, 6), (381, 5), (383, 6), (384, 4), (389, 7), (390, 5), (399, 6), (408, 4), (412, 4), (414, 7), (415, 4), (418, 4), (419, 4), (423, 3), (425, 5), (435, 5), (441, 8), (442, 8), (443, 8), (445, 8), (446, 8), (447, 8), (448, 8), (449, 8), (450, 8), (452, 8), (453, 8), (455, 7), (456, 8), (458, 8), (459, 7), (460, 8), (461, 7), (462, 8), (463, 8), (464, 8), (465, 6)]
nb_edges_0 = 211 rho= 0.1 # of rows = 8 # of columns= 96 total_degree_0= 211 RHS= 21.1
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  19 with obj value: 41.166666666666664 KP time = 1.2508095871889964 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01442 - (Local CPU) 0.01442 - (Global CPU) 1.26523

 Solve status: Optimal Objective value: 11.10000 nb_rows 8 nb_cols 91
----------------------------------------
----------------------------------------

        Updated data after iteration: 19 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (8, 91) and density : 0.745 and number of remaining ones : 557
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.745 density  and density_threshold= 0.900


I am in the while loop with i= 20 density= 0.7445054945054945 and fixed_threshold= 0.9

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 44.089
I solved model name = row_knapsack_problem for iteration i =  20 with obj value: 44.088888888888896 KP time = 1.2652297962922603 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01346 - (Local CPU) 0.01346 - (Global CPU) 1.27869

 Solve status: Optimal Objective value: 44.08889 nb_rows 7 nb_cols 91
----------------------------------------
----------------------------------------

        Updated data after iteration: 20 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (7, 91) and density : 0.750 and number of remaining ones : 478
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(1, 7), (3, 5), (5, 7), (9, 6), (10, 7), (11, 7), (12, 7), (13, 7), (14, 6), (15, 7), (16, 7), (26, 5), (55, 4), (61, 4), (62, 4), (63, 4), (72, 3), (74, 3), (79, 4), (91, 4), (95, 4), (110, 5), (118, 6), (119, 5), (121, 5), (123, 5), (124, 4), (136, 5), (139, 6), (144, 4), (146, 3), (148, 5), (173, 5), (174, 4), (177, 4), (178, 5), (180, 6), (181, 5), (183, 6), (195, 4), (196, 5), (201, 5), (219, 4), (232, 4), (260, 6), (265, 4), (287, 4), (289, 3), (292, 5), (316, 5), (333, 4), (334, 3), (342, 5), (345, 4), (375, 4), (377, 5), (381, 5), (383, 5), (384, 4), (389, 6), (390, 4), (399, 5), (408, 3), (412, 4), (414, 6), (415, 4), (418, 4), (419, 3), (425, 5), (435, 4), (441, 7), (442, 7), (443, 7), (445, 7), (446, 7), (447, 7), (448, 7), (449, 7), (450, 7), (452, 7), (453, 7), (455, 6), (456, 7), (458, 7), (459, 6), (460, 7), (461, 6), (462, 7), (463, 7), (464, 7), (465, 5)]
nb_edges_0 = 159 rho= 0.1 # of rows = 7 # of columns= 91 total_degree_0= 159 RHS= 15.9
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  20 with obj value: 44.088888888888896 KP time = 1.278686254285276 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01414 - (Local CPU) 0.01414 - (Global CPU) 1.29283

 Solve status: Optimal Objective value: 11.92500 nb_rows 7 nb_cols 87
----------------------------------------
----------------------------------------

        Updated data after iteration: 20 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (7, 87) and density : 0.765 and number of remaining ones : 478
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.765 density  and density_threshold= 0.900


I am in the while loop with i= 21 density= 0.7651888341543513 and fixed_threshold= 0.9

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 37.538
I solved model name = row_knapsack_problem for iteration i =  21 with obj value: 37.5375 KP time = 1.292829420301132 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01353 - (Local CPU) 0.01353 - (Global CPU) 1.30636

 Solve status: Optimal Objective value: 37.53750 nb_rows 6 nb_cols 87
----------------------------------------
----------------------------------------

        Updated data after iteration: 21 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (6, 87) and density : 0.772 and number of remaining ones : 403
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(1, 6), (3, 4), (5, 6), (9, 5), (10, 6), (11, 6), (12, 6), (13, 6), (14, 5), (15, 6), (16, 6), (26, 5), (55, 3), (61, 3), (62, 3), (63, 3), (79, 4), (91, 3), (95, 3), (110, 4), (118, 5), (119, 4), (121, 4), (123, 4), (124, 3), (136, 4), (139, 5), (144, 4), (148, 4), (173, 4), (174, 4), (177, 3), (178, 4), (180, 6), (181, 4), (183, 6), (195, 4), (196, 5), (201, 4), (219, 4), (232, 4), (260, 5), (265, 4), (287, 3), (292, 4), (316, 5), (333, 3), (334, 3), (342, 5), (345, 4), (375, 3), (377, 4), (381, 4), (383, 5), (384, 3), (389, 5), (390, 4), (399, 4), (408, 3), (412, 4), (414, 5), (415, 4), (418, 4), (419, 3), (425, 5), (435, 4), (441, 6), (442, 6), (443, 6), (445, 6), (446, 6), (447, 6), (448, 6), (449, 6), (450, 6), (452, 6), (453, 6), (455, 5), (456, 6), (458, 6), (459, 5), (460, 6), (461, 5), (462, 6), (463, 6), (464, 6), (465, 4)]
nb_edges_0 = 119 rho= 0.1 # of rows = 6 # of columns= 87 total_degree_0= 119 RHS= 11.9
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  21 with obj value: 37.5375 KP time = 1.306362628354691 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01417 - (Local CPU) 0.01417 - (Global CPU) 1.32053

 Solve status: Optimal Objective value: 11.90000 nb_rows 6 nb_cols 83
----------------------------------------
----------------------------------------

        Updated data after iteration: 21 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (6, 83) and density : 0.785 and number of remaining ones : 403
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.785 density  and density_threshold= 0.900


I am in the while loop with i= 22 density= 0.785140562248996 and fixed_threshold= 0.9

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 33.705
I solved model name = row_knapsack_problem for iteration i =  22 with obj value: 33.705 KP time = 1.3205329204211012 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01328 - (Local CPU) 0.01329 - (Global CPU) 1.33382

 Solve status: Optimal Objective value: 33.70500 nb_rows 5 nb_cols 83
----------------------------------------
----------------------------------------

        Updated data after iteration: 22 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (5, 83) and density : 0.790 and number of remaining ones : 328
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(1, 5), (3, 3), (5, 5), (9, 4), (10, 5), (11, 5), (12, 5), (13, 5), (14, 4), (15, 5), (16, 5), (26, 4), (55, 3), (61, 2), (62, 3), (63, 2), (79, 4), (91, 3), (95, 3), (110, 3), (118, 4), (119, 4), (121, 3), (123, 4), (136, 4), (139, 4), (144, 3), (148, 3), (173, 3), (174, 3), (177, 2), (178, 4), (180, 5), (181, 4), (183, 5), (195, 4), (196, 4), (201, 4), (219, 4), (232, 3), (260, 4), (265, 3), (287, 2), (292, 3), (316, 5), (333, 3), (334, 2), (342, 5), (345, 3), (377, 3), (381, 4), (383, 4), (384, 3), (389, 4), (390, 3), (399, 4), (412, 3), (414, 4), (415, 3), (418, 3), (425, 4), (435, 3), (441, 5), (442, 5), (443, 5), (445, 5), (446, 5), (447, 5), (448, 5), (449, 5), (450, 5), (452, 5), (453, 5), (455, 5), (456, 5), (458, 5), (459, 4), (460, 5), (461, 4), (462, 5), (463, 5), (464, 5), (465, 3)]
nb_edges_0 = 87 rho= 0.1 # of rows = 5 # of columns= 83 total_degree_0= 87 RHS= 8.700000000000001
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  22 with obj value: 33.705 KP time = 1.3338181704748422 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01415 - (Local CPU) 0.01416 - (Global CPU) 1.34797

 Solve status: Optimal Objective value: 5.80000 nb_rows 5 nb_cols 80
----------------------------------------
----------------------------------------

        Updated data after iteration: 22 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (5, 80) and density : 0.805 and number of remaining ones : 328
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.805 density  and density_threshold= 0.900


I am in the while loop with i= 23 density= 0.805 and fixed_threshold= 0.9

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 31.200
I solved model name = row_knapsack_problem for iteration i =  23 with obj value: 31.2 KP time = 1.3479736294830218 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01337 - (Local CPU) 0.01337 - (Global CPU) 1.36135

 Solve status: Optimal Objective value: 31.20000 nb_rows 4 nb_cols 80
----------------------------------------
----------------------------------------

        Updated data after iteration: 23 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (4, 80) and density : 0.806 and number of remaining ones : 258
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(1, 4), (3, 3), (5, 4), (9, 3), (10, 4), (11, 4), (12, 4), (13, 4), (14, 3), (15, 4), (16, 4), (26, 3), (55, 2), (61, 2), (62, 2), (79, 3), (91, 2), (95, 2), (110, 3), (118, 3), (119, 4), (121, 2), (123, 3), (136, 3), (139, 3), (144, 2), (148, 2), (173, 2), (174, 3), (178, 3), (180, 4), (181, 3), (183, 4), (195, 4), (196, 3), (201, 4), (219, 3), (232, 3), (260, 3), (265, 2), (292, 2), (316, 4), (333, 2), (334, 1), (342, 4), (345, 2), (377, 2), (381, 4), (383, 4), (384, 3), (389, 3), (390, 2), (399, 3), (412, 3), (414, 4), (415, 3), (418, 2), (425, 3), (435, 3), (441, 4), (442, 4), (443, 4), (445, 4), (446, 4), (447, 4), (448, 4), (449, 4), (450, 4), (452, 4), (453, 4), (455, 4), (456, 4), (458, 4), (459, 4), (460, 4), (461, 3), (462, 4), (463, 4), (464, 4), (465, 2)]
nb_edges_0 = 62 rho= 0.1 # of rows = 4 # of columns= 80 total_degree_0= 62 RHS= 6.2
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  23 with obj value: 31.2 KP time = 1.3613481705542654 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01404 - (Local CPU) 0.01404 - (Global CPU) 1.37538

 Solve status: Optimal Objective value: 4.20000 nb_rows 4 nb_cols 77
----------------------------------------
----------------------------------------

        Updated data after iteration: 23 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (4, 77) and density : 0.821 and number of remaining ones : 258
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.821 density  and density_threshold= 0.900


I am in the while loop with i= 24 density= 0.8214285714285714 and fixed_threshold= 0.9

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 24.750
I solved model name = row_knapsack_problem for iteration i =  24 with obj value: 24.75 KP time = 1.3753846294712275 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01351 - (Local CPU) 0.01351 - (Global CPU) 1.38890

 Solve status: Optimal Objective value: 24.75000 nb_rows 3 nb_cols 77
----------------------------------------
----------------------------------------

        Updated data after iteration: 24 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (3, 77) and density : 0.823 and number of remaining ones : 190
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(1, 3), (3, 2), (5, 3), (9, 2), (10, 3), (11, 3), (12, 3), (13, 3), (14, 2), (15, 3), (16, 3), (26, 2), (55, 2), (61, 1), (62, 2), (79, 2), (91, 1), (95, 2), (110, 2), (118, 2), (119, 3), (123, 2), (136, 2), (139, 2), (144, 1), (148, 1), (173, 2), (174, 2), (178, 2), (180, 3), (181, 2), (183, 3), (195, 3), (196, 2), (201, 3), (219, 2), (232, 3), (260, 3), (265, 2), (292, 1), (316, 3), (342, 3), (345, 1), (377, 1), (381, 3), (383, 3), (384, 2), (389, 3), (390, 2), (399, 2), (412, 2), (414, 3), (415, 3), (418, 2), (425, 3), (435, 2), (441, 3), (442, 3), (443, 3), (445, 3), (446, 3), (447, 3), (448, 3), (449, 3), (450, 3), (452, 3), (453, 3), (455, 3), (456, 3), (458, 3), (459, 3), (460, 3), (461, 3), (462, 3), (463, 3), (464, 3), (465, 2)]
nb_edges_0 = 41 rho= 0.1 # of rows = 3 # of columns= 77 total_degree_0= 41 RHS= 4.1000000000000005
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  24 with obj value: 24.75 KP time = 1.388896296499297 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01394 - (Local CPU) 0.01394 - (Global CPU) 1.40283

 Solve status: Optimal Objective value: 2.05000 nb_rows 3 nb_cols 74
----------------------------------------
----------------------------------------

        Updated data after iteration: 24 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (3, 74) and density : 0.842 and number of remaining ones : 190
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.842 density  and density_threshold= 0.900


I am in the while loop with i= 25 density= 0.8423423423423423 and fixed_threshold= 0.9

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 16.423
I solved model name = row_knapsack_problem for iteration i =  25 with obj value: 16.423076923076923 KP time = 1.4028348795836791 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01342 - (Local CPU) 0.01342 - (Global CPU) 1.41626

 Solve status: Optimal Objective value: 16.42308 nb_rows 2 nb_cols 74
----------------------------------------
----------------------------------------

        Updated data after iteration: 25 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (2, 74) and density : 0.851 and number of remaining ones : 126
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(1, 2), (3, 1), (5, 2), (9, 2), (10, 2), (11, 2), (12, 2), (13, 2), (14, 1), (15, 2), (16, 2), (26, 1), (55, 1), (62, 1), (79, 1), (91, 1), (95, 1), (110, 2), (118, 2), (119, 2), (123, 1), (136, 1), (139, 1), (144, 1), (148, 1), (173, 1), (174, 1), (178, 2), (180, 2), (181, 2), (183, 2), (195, 2), (196, 2), (201, 2), (219, 1), (232, 2), (260, 2), (265, 1), (292, 1), (316, 2), (342, 2), (381, 2), (383, 2), (384, 1), (389, 2), (390, 1), (399, 2), (412, 1), (414, 2), (415, 2), (418, 1), (425, 2), (435, 2), (441, 2), (442, 2), (443, 2), (445, 2), (446, 2), (447, 2), (448, 2), (449, 2), (450, 2), (452, 2), (453, 2), (455, 2), (456, 2), (458, 2), (459, 2), (460, 2), (461, 2), (462, 2), (463, 2), (464, 2), (465, 2)]
nb_edges_0 = 22 rho= 0.1 # of rows = 2 # of columns= 74 total_degree_0= 22 RHS= 2.2
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  25 with obj value: 16.423076923076923 KP time = 1.4162593386135995 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01285 - (Local CPU) 0.01285 - (Global CPU) 1.42911

 Solve status: Optimal Objective value: 2.20000 nb_rows 2 nb_cols 71
----------------------------------------
----------------------------------------

        Updated data after iteration: 25 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (2, 71) and density : 0.866 and number of remaining ones : 126
        

----------------------------------------
----------------------------------------

----------------------------------------

            End of greedy approaches. Exit while loop. I did: 25 iterations
            Density : 0.866 > 0.900
            It took me : 1.429 time
            Found matrix of size : (2, 71) and density : 0.866
            
----------------------------------------

 Calling exact approaches for QB clique discovery with delta = 0.0
----------------------------------------

----------------------------------------

I am in warm_exact before calling max_e_h $$$$$$$$$$$$$$$$$$

----------------------------------------------------------------------
Model status: Optimal
----------------------------------------------------------------------
Computed by max_e_h Objective Value : 227.000 
Model status: Optimal
Solution saved to Experiments/prob_8/results_h_1_M_3.csv

----------------------------------------------------------------------
Stats
 Model solved : max_e_h  Local Time:  - (real) 0.01502 - (Local CPU) 0.01502 - (Global CPU) 0.01502

 Solve status: Optimal Objective value: 227.00000 nb_rows 2 nb_cols 52
----------------------------------------

----------------------------------------
Results from updating data after solving model = max_e_h  delta =   0.0
Number of Remaining number  Rows  : 2
Number of Remaining number Columns : 52
Remaining  number Edges_0 P: 0 Remaining  number Edges_1 : 104 Density : 1.0 current obj value 227.0
----------------------------------------

----------------------------------------

Exit from the heuristic (or exact  approach)  max_e_c  with delta= 0.0 Found matrix with rows_res of lenght = 2  and cols_res of lenght = 52
----------------------------------------

        Exit from the exact approach: max_e_c for matrix 3
        with delta =  0.0
        Found matrix of size : (2, 52)
        and density : 1.000
        and # of ones : 104
        and Heuristic QBC time   : 0.01502
        and Global QBC  time  : 0.01502
        
 Remaining Rows  : [43, 61]
 Remaining  Cols  : [1, 10, 11, 110, 118, 119, 12, 13, 15, 16, 178, 180, 181, 183, 195, 196, 201, 232, 260, 316, 342, 381, 383, 389, 399, 414, 415, 425, 435, 441, 442, 443, 445, 446, 447, 448, 449, 450, 452, 453, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 5, 9]

----------------------------------------------------------------------
 
    End of computations for matrix 3 in  data/prob_8.csv at level 1 and debug  2
    With  model: max_e_c and quasi-biclique error: 0.0 
    Size of Remaining matrix : (2,52), with  density : 1.0 and number of ones: 104
    Global Time (in sec): 1.444
    Total Time in QBC approaches: 0.015
    Time in greedy approach: 1.429,  size of matrix found by greedy : (2,71) 
    With density : 0.866 and # ones : 123 
    Time in heuristic only : 0.015 
    Time in warm start only : 0.000
    Number of iterations in greedy approach: 25
    Percentage of greedy approach run time in global run time : 98.96% 
    Percentage of heuristic run time in QBC run time : 100.00%
    With zero deletion rate (rho): 0.1 and threshold: 0.9
    
----------------------------------------------------------------------


Zero clique of size (2,52) has been found. Too small!! Task with matrix 3 with size (64,383) has been added to the queue.

return in decrease_and_conquer from 3 with winning node = 3

return in decrease_and_conquer from 1 with winning node = 3

----------------------------------------------------------------------

End of tasks generation stage. Last generated task from matrix 1 with winning node 3
Tasks_generation time: 15.8993 sec
----------------------------------------------------------------------
 Size of the queue: 2
 Matrix: 2, Size: 18063, Number Rows: 59,  Number Cols: 466,  Number Edges: 18063, obj -inf
 Matrix: 3, Size: 17219, Number Rows: 64,  Number Cols: 383,  Number Edges: 17219, obj -inf

----------------------------------------------------------------------


***QUEUE We currently process task number 2 with (edges 18063) selected_model max_e_c dec_conq 0 delta 0.0 threshold 0.9 rho 0.1 QBC_time 0.0 ***


----------------------------------------------------------------------
***Stats Current Input for matrix 2 in  data/prob_8.csv at level 0 and with model:  max_e_c***
Size of current matrix :  59 * 466 = 27494 ; dec_conq: 0
Prev_lower_bound :  -inf number input zeros :  9431 ; number input ones :  18063
rho =  0.1 ; delta :  0.0
Input density : 0.657 ; density_threshold: 0.90000
----------------------------------------------------------------------
End Current  Stats
----------------------------------------------------------------------


calling greedy approaches for zero deletion, density= 0.657 density  and density_threshold= 0.900


I am in the while loop with i= 1 density= 0.6569797046628355 and fixed_threshold= 0.9

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 1524.475
I solved model name = row_knapsack_problem for iteration i =  1 with obj value: 1524.4747252747252 KP time = 0 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01471 - (Local CPU) 0.01472 - (Global CPU) 0.01472

 Solve status: Optimal Objective value: 1524.47473 nb_rows 53 nb_cols 466
----------------------------------------
----------------------------------------

        Updated data after iteration: 1 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (53, 466) and density : 0.664 and number of remaining ones : 16392
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(0, 48), (1, 43), (2, 47), (3, 44), (4, 48), (5, 40), (6, 42), (7, 46), (8, 42), (9, 43), (10, 35), (11, 37), (12, 36), (13, 35), (14, 34), (15, 34), (16, 39), (17, 53), (18, 12), (19, 21), (20, 46), (21, 15), (22, 47), (23, 14), (24, 26), (25, 23), (26, 25), (27, 14), (28, 33), (29, 18), (30, 41), (31, 22), (32, 20), (33, 47), (34, 22), (35, 43), (36, 25), (37, 31), (38, 22), (39, 38), (40, 41), (41, 25), (42, 42), (43, 40), (44, 35), (45, 42), (46, 43), (47, 21), (48, 42), (49, 33), (50, 29), (51, 45), (52, 33), (53, 41), (54, 38), (55, 40), (56, 42), (57, 31), (58, 41), (59, 36), (60, 37), (61, 33), (62, 29), (63, 34), (64, 41), (65, 44), (66, 46), (67, 42), (68, 40), (69, 45), (70, 31), (71, 40), (72, 38), (73, 38), (74, 32), (75, 42), (76, 33), (77, 39), (78, 30), (79, 31), (80, 24), (81, 33), (82, 39), (83, 30), (84, 27), (85, 41), (86, 43), (87, 44), (88, 43), (89, 42), (90, 42), (91, 43), (92, 26), (93, 30), (94, 38), (95, 34), (96, 39), (97, 37), (98, 32), (99, 38), (100, 43), (101, 40), (102, 43), (103, 41), (104, 40), (105, 44), (106, 38), (107, 46), (108, 37), (109, 39), (110, 33), (111, 44), (112, 40), (113, 30), (114, 45), (115, 40), (116, 44), (117, 43), (118, 40), (119, 23), (120, 37), (121, 36), (122, 32), (123, 32), (124, 34), (125, 39), (126, 39), (127, 40), (128, 43), (129, 30), (130, 38), (131, 41), (132, 39), (133, 48), (134, 39), (135, 44), (136, 32), (137, 30), (138, 41), (139, 15), (140, 38), (141, 23), (142, 40), (143, 33), (144, 31), (145, 41), (146, 31), (147, 41), (148, 21), (149, 24), (150, 42), (151, 40), (152, 39), (153, 46), (154, 34), (155, 36), (156, 43), (157, 40), (158, 31), (159, 37), (160, 34), (161, 36), (162, 41), (163, 38), (164, 35), (165, 25), (166, 38), (167, 32), (168, 35), (169, 36), (170, 43), (171, 37), (172, 35), (173, 32), (174, 33), (175, 42), (176, 38), (177, 34), (178, 32), (179, 40), (180, 30), (181, 32), (182, 34), (183, 29), (184, 28), (185, 34), (186, 36), (187, 39), (188, 31), (189, 41), (190, 36), (191, 37), (192, 35), (193, 40), (194, 42), (195, 32), (196, 34), (197, 39), (198, 42), (199, 37), (200, 38), (201, 34), (202, 39), (203, 40), (204, 44), (205, 45), (206, 44), (207, 39), (208, 32), (209, 35), (210, 42), (211, 41), (212, 36), (213, 32), (214, 38), (215, 34), (216, 2), (217, 31), (218, 48), (219, 36), (220, 29), (221, 45), (222, 31), (223, 31), (224, 41), (225, 36), (226, 41), (227, 40), (228, 40), (229, 42), (230, 34), (231, 41), (232, 37), (233, 40), (234, 31), (235, 33), (236, 30), (237, 42), (238, 24), (239, 35), (240, 36), (241, 34), (242, 46), (243, 23), (244, 41), (245, 41), (246, 25), (247, 42), (248, 21), (249, 46), (250, 30), (251, 38), (252, 42), (253, 31), (254, 49), (255, 35), (256, 31), (257, 16), (258, 45), (259, 44), (260, 41), (261, 23), (262, 46), (263, 31), (264, 29), (265, 41), (266, 42), (267, 38), (268, 39), (269, 32), (270, 40), (271, 45), (272, 46), (273, 28), (274, 43), (275, 46), (276, 42), (277, 23), (278, 41), (279, 41), (280, 24), (281, 36), (282, 40), (283, 43), (284, 39), (285, 46), (286, 20), (287, 24), (288, 27), (289, 36), (290, 25), (291, 45), (292, 23), (293, 46), (294, 28), (295, 45), (296, 47), (297, 43), (298, 30), (299, 34), (300, 46), (301, 18), (302, 40), (303, 37), (304, 22), (305, 39), (306, 24), (307, 27), (308, 26), (309, 41), (310, 10), (311, 13), (312, 21), (313, 43), (314, 42), (315, 51), (316, 40), (317, 36), (318, 23), (319, 41), (320, 18), (321, 18), (322, 17), (323, 27), (324, 17), (325, 38), (326, 23), (327, 37), (328, 35), (329, 51), (330, 13), (331, 34), (332, 29), (333, 38), (334, 25), (335, 36), (336, 40), (337, 34), (338, 34), (339, 39), (340, 29), (341, 29), (342, 35), (343, 28), (344, 44), (345, 25), (346, 43), (347, 27), (348, 44), (349, 44), (350, 26), (351, 26), (352, 36), (353, 18), (354, 37), (355, 38), (356, 27), (357, 41), (358, 33), (359, 40), (360, 16), (361, 19), (362, 14), (363, 14), (364, 15), (365, 44), (366, 44), (367, 43), (368, 12), (369, 18), (370, 43), (371, 41), (372, 41), (373, 7), (374, 23), (375, 12), (376, 42), (377, 22), (378, 36), (379, 17), (380, 27), (381, 28), (382, 39), (383, 22), (384, 30), (385, 35), (386, 44), (387, 30), (388, 44), (389, 37), (390, 36), (391, 42), (392, 41), (393, 41), (394, 32), (395, 33), (396, 37), (397, 46), (398, 30), (399, 36), (400, 36), (401, 45), (402, 21), (403, 21), (404, 21), (405, 30), (406, 49), (407, 19), (408, 41), (409, 50), (410, 44), (411, 44), (412, 15), (413, 41), (414, 15), (415, 30), (416, 40), (417, 28), (418, 22), (419, 32), (420, 36), (421, 46), (422, 41), (423, 31), (424, 43), (425, 38), (426, 39), (427, 41), (428, 44), (429, 33), (430, 37), (431, 37), (432, 46), (433, 38), (434, 45), (435, 21), (436, 33), (437, 22), (438, 40), (439, 24), (440, 51), (441, 37), (442, 36), (443, 21), (444, 38), (445, 38), (446, 39), (447, 37), (448, 39), (449, 33), (450, 36), (451, 45), (452, 36), (453, 31), (454, 46), (455, 42), (456, 41), (457, 46), (458, 43), (459, 44), (460, 43), (461, 39), (462, 43), (463, 35), (464, 38), (465, 45)]
nb_edges_0 = 8306 rho= 0.1 # of rows = 53 # of columns= 466 total_degree_0= 8306 RHS= 830.6
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  1 with obj value: 1524.4747252747252 KP time = 0.014715249999426305 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01781 - (Local CPU) 0.01781 - (Global CPU) 0.03253

 Solve status: Optimal Objective value: 275.92222 nb_rows 53 nb_cols 445
----------------------------------------
----------------------------------------

        Updated data after iteration: 1 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (53, 445) and density : 0.683 and number of remaining ones : 16392
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.683 density  and density_threshold= 0.900


I am in the while loop with i= 2 density= 0.6832308670765317 and fixed_threshold= 0.9

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 1321.450
I solved model name = row_knapsack_problem for iteration i =  2 with obj value: 1321.4503144654088 KP time = 0.03253012499772012 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01464 - (Local CPU) 0.01464 - (Global CPU) 0.04717

 Solve status: Optimal Objective value: 1321.45031 nb_rows 48 nb_cols 445
----------------------------------------
----------------------------------------

        Updated data after iteration: 2 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (48, 445) and density : 0.688 and number of remaining ones : 14692
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(0, 44), (1, 41), (2, 43), (3, 42), (4, 44), (5, 39), (6, 39), (7, 44), (8, 40), (9, 41), (10, 34), (11, 36), (12, 35), (13, 34), (14, 33), (15, 33), (16, 38), (17, 48), (19, 20), (20, 42), (22, 42), (24, 23), (25, 20), (26, 22), (28, 31), (29, 16), (30, 39), (31, 19), (32, 18), (33, 43), (34, 20), (35, 38), (36, 22), (37, 28), (38, 18), (39, 35), (40, 37), (41, 21), (42, 38), (43, 36), (44, 31), (45, 38), (46, 40), (47, 20), (48, 38), (49, 30), (50, 27), (51, 41), (52, 29), (53, 39), (54, 36), (55, 36), (56, 39), (57, 28), (58, 36), (59, 33), (60, 35), (61, 31), (62, 26), (63, 29), (64, 36), (65, 39), (66, 42), (67, 37), (68, 36), (69, 41), (70, 27), (71, 36), (72, 34), (73, 35), (74, 30), (75, 38), (76, 30), (77, 36), (78, 28), (79, 30), (80, 23), (81, 28), (82, 35), (83, 26), (84, 23), (85, 37), (86, 40), (87, 39), (88, 39), (89, 38), (90, 39), (91, 40), (92, 22), (93, 27), (94, 34), (95, 29), (96, 35), (97, 33), (98, 30), (99, 35), (100, 41), (101, 36), (102, 40), (103, 36), (104, 35), (105, 40), (106, 36), (107, 42), (108, 33), (109, 36), (110, 32), (111, 40), (112, 35), (113, 27), (114, 41), (115, 35), (116, 40), (117, 38), (118, 38), (119, 21), (120, 33), (121, 33), (122, 29), (123, 29), (124, 30), (125, 35), (126, 34), (127, 37), (128, 41), (129, 28), (130, 34), (131, 36), (132, 35), (133, 44), (134, 36), (135, 41), (136, 30), (137, 27), (138, 37), (140, 34), (141, 22), (142, 35), (143, 30), (144, 29), (145, 36), (146, 29), (147, 38), (148, 20), (149, 22), (150, 37), (151, 37), (152, 35), (153, 42), (154, 29), (155, 34), (156, 40), (157, 36), (158, 27), (159, 34), (160, 31), (161, 31), (162, 37), (163, 34), (164, 33), (165, 23), (166, 34), (167, 30), (168, 32), (169, 31), (170, 40), (171, 33), (172, 31), (173, 29), (174, 30), (175, 38), (176, 34), (177, 30), (178, 30), (179, 36), (180, 30), (181, 30), (182, 30), (183, 28), (184, 26), (185, 32), (186, 32), (187, 35), (188, 30), (189, 37), (190, 31), (191, 35), (192, 32), (193, 36), (194, 39), (195, 30), (196, 32), (197, 37), (198, 37), (199, 35), (200, 34), (201, 32), (202, 36), (203, 35), (204, 40), (205, 41), (206, 41), (207, 35), (208, 31), (209, 32), (210, 38), (211, 37), (212, 35), (213, 28), (214, 33), (215, 32), (217, 27), (218, 43), (219, 34), (220, 26), (221, 43), (222, 28), (223, 28), (224, 38), (225, 34), (226, 37), (227, 35), (228, 35), (229, 37), (230, 32), (231, 37), (232, 34), (233, 37), (234, 28), (235, 29), (236, 28), (237, 38), (238, 22), (239, 31), (240, 34), (241, 33), (242, 42), (243, 20), (244, 38), (245, 39), (246, 22), (247, 40), (248, 18), (249, 44), (250, 26), (251, 34), (252, 38), (253, 27), (254, 44), (255, 31), (256, 27), (258, 40), (259, 39), (260, 38), (261, 20), (262, 42), (263, 27), (264, 26), (265, 37), (266, 37), (267, 36), (268, 37), (269, 27), (270, 36), (271, 41), (272, 43), (273, 26), (274, 39), (275, 41), (276, 37), (277, 22), (278, 36), (279, 36), (280, 21), (281, 32), (282, 36), (283, 39), (284, 35), (285, 42), (286, 17), (287, 20), (288, 23), (289, 33), (290, 22), (291, 41), (292, 20), (293, 41), (294, 23), (295, 40), (296, 42), (297, 39), (298, 27), (299, 29), (300, 43), (301, 16), (302, 38), (303, 34), (304, 20), (305, 37), (306, 20), (307, 24), (308, 22), (309, 38), (312, 20), (313, 39), (314, 39), (315, 48), (316, 37), (317, 33), (318, 21), (319, 36), (320, 15), (321, 16), (323, 24), (324, 14), (325, 33), (326, 21), (327, 32), (328, 31), (329, 47), (331, 30), (332, 26), (333, 35), (334, 23), (335, 31), (336, 37), (337, 32), (338, 30), (339, 36), (340, 25), (341, 26), (342, 34), (343, 25), (344, 40), (345, 24), (346, 39), (347, 23), (348, 40), (349, 41), (350, 24), (351, 21), (352, 32), (353, 13), (354, 34), (355, 33), (356, 24), (357, 36), (358, 30), (359, 36), (361, 16), (365, 41), (366, 41), (367, 41), (369, 15), (370, 40), (371, 38), (372, 39), (374, 20), (376, 38), (377, 20), (378, 33), (380, 24), (381, 26), (382, 35), (383, 22), (384, 28), (385, 31), (386, 39), (387, 27), (388, 41), (389, 34), (390, 34), (391, 38), (392, 37), (393, 37), (394, 30), (395, 29), (396, 35), (397, 41), (398, 27), (399, 34), (400, 32), (401, 41), (402, 19), (403, 18), (404, 17), (405, 26), (406, 44), (407, 16), (408, 39), (409, 47), (410, 40), (411, 40), (413, 37), (415, 26), (416, 38), (417, 24), (418, 19), (419, 30), (420, 32), (421, 43), (422, 37), (423, 28), (424, 38), (425, 34), (426, 35), (427, 38), (428, 41), (429, 28), (430, 34), (431, 35), (432, 41), (433, 34), (434, 40), (435, 20), (436, 30), (437, 19), (438, 35), (439, 20), (440, 46), (441, 36), (442, 35), (443, 20), (444, 34), (445, 37), (446, 38), (447, 36), (448, 38), (449, 32), (450, 35), (451, 41), (452, 36), (453, 30), (454, 41), (455, 41), (456, 40), (457, 44), (458, 42), (459, 43), (460, 42), (461, 38), (462, 42), (463, 35), (464, 37), (465, 43)]
nb_edges_0 = 6668 rho= 0.1 # of rows = 48 # of columns= 445 total_degree_0= 6668 RHS= 666.8000000000001
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  2 with obj value: 1321.4503144654088 KP time = 0.047173709026537836 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01914 - (Local CPU) 0.01914 - (Global CPU) 0.06631

 Solve status: Optimal Objective value: 371.71429 nb_rows 48 nb_cols 423
----------------------------------------
----------------------------------------

        Updated data after iteration: 2 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (48, 423) and density : 0.705 and number of remaining ones : 14692
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.705 density  and density_threshold= 0.900


I am in the while loop with i= 3 density= 0.704934988179669 and fixed_threshold= 0.9

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 1125.734
I solved model name = row_knapsack_problem for iteration i =  3 with obj value: 1125.7342657342658 KP time = 0.06631208397448063 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01503 - (Local CPU) 0.01503 - (Global CPU) 0.08134

 Solve status: Optimal Objective value: 1125.73427 nb_rows 43 nb_cols 423
----------------------------------------
----------------------------------------

        Updated data after iteration: 3 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (43, 423) and density : 0.711 and number of remaining ones : 12929
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(0, 40), (1, 40), (2, 39), (3, 41), (4, 39), (5, 37), (6, 37), (7, 41), (8, 35), (9, 39), (10, 33), (11, 35), (12, 35), (13, 34), (14, 33), (15, 32), (16, 37), (17, 43), (19, 16), (20, 38), (22, 38), (24, 19), (26, 18), (28, 30), (30, 36), (33, 39), (34, 15), (35, 34), (36, 17), (37, 23), (39, 32), (40, 34), (41, 19), (42, 36), (43, 34), (44, 28), (45, 33), (46, 37), (47, 19), (48, 34), (49, 27), (50, 25), (51, 36), (52, 26), (53, 35), (54, 33), (55, 32), (56, 35), (57, 25), (58, 32), (59, 29), (60, 31), (61, 27), (62, 24), (63, 27), (64, 33), (65, 36), (66, 38), (67, 34), (68, 31), (69, 37), (70, 24), (71, 33), (72, 32), (73, 31), (74, 27), (75, 34), (76, 27), (77, 32), (78, 25), (79, 29), (80, 19), (81, 26), (82, 31), (83, 23), (84, 22), (85, 33), (86, 38), (87, 36), (88, 37), (89, 33), (90, 36), (91, 35), (92, 21), (93, 25), (94, 32), (95, 26), (96, 32), (97, 29), (98, 28), (99, 32), (100, 38), (101, 32), (102, 36), (103, 33), (104, 31), (105, 35), (106, 32), (107, 37), (108, 30), (109, 34), (110, 28), (111, 35), (112, 32), (113, 24), (114, 37), (115, 31), (116, 36), (117, 34), (118, 34), (119, 18), (120, 30), (121, 30), (122, 24), (123, 27), (124, 29), (125, 30), (126, 32), (127, 33), (128, 37), (129, 25), (130, 29), (131, 33), (132, 32), (133, 40), (134, 34), (135, 36), (136, 28), (137, 23), (138, 33), (140, 30), (141, 20), (142, 32), (143, 28), (144, 25), (145, 34), (146, 24), (147, 34), (148, 17), (149, 20), (150, 35), (151, 35), (152, 33), (153, 39), (154, 26), (155, 29), (156, 35), (157, 33), (158, 22), (159, 30), (160, 27), (161, 27), (162, 33), (163, 29), (164, 31), (165, 21), (166, 29), (167, 27), (168, 28), (169, 29), (170, 37), (171, 30), (172, 27), (173, 28), (174, 26), (175, 36), (176, 30), (177, 26), (178, 25), (179, 32), (180, 28), (181, 27), (182, 26), (183, 25), (184, 21), (185, 29), (186, 30), (187, 31), (188, 26), (189, 33), (190, 27), (191, 32), (192, 29), (193, 32), (194, 35), (195, 27), (196, 29), (197, 32), (198, 32), (199, 30), (200, 31), (201, 30), (202, 33), (203, 32), (204, 36), (205, 37), (206, 38), (207, 31), (208, 29), (209, 27), (210, 35), (211, 32), (212, 32), (213, 24), (214, 32), (215, 28), (217, 24), (218, 39), (219, 31), (220, 23), (221, 40), (222, 24), (223, 25), (224, 34), (225, 30), (226, 34), (227, 30), (228, 31), (229, 33), (230, 29), (231, 32), (232, 31), (233, 33), (234, 25), (235, 25), (236, 25), (237, 33), (238, 18), (239, 28), (240, 30), (241, 30), (242, 37), (243, 18), (244, 34), (245, 36), (246, 19), (247, 35), (249, 40), (250, 22), (251, 32), (252, 33), (253, 23), (254, 40), (255, 27), (256, 24), (258, 35), (259, 36), (260, 36), (262, 38), (263, 23), (264, 23), (265, 34), (266, 32), (267, 32), (268, 34), (269, 24), (270, 32), (271, 37), (272, 38), (273, 22), (274, 37), (275, 38), (276, 34), (277, 18), (278, 33), (279, 33), (280, 17), (281, 30), (282, 34), (283, 35), (284, 31), (285, 37), (287, 16), (288, 20), (289, 31), (290, 18), (291, 37), (292, 18), (293, 37), (294, 20), (295, 37), (296, 37), (297, 36), (298, 23), (299, 24), (300, 40), (302, 34), (303, 32), (304, 16), (305, 35), (306, 17), (307, 19), (308, 19), (309, 36), (312, 16), (313, 35), (314, 37), (315, 43), (316, 35), (317, 30), (318, 17), (319, 33), (323, 21), (325, 29), (326, 18), (327, 29), (328, 29), (329, 42), (331, 28), (332, 21), (333, 32), (334, 19), (335, 30), (336, 32), (337, 28), (338, 26), (339, 31), (340, 23), (341, 23), (342, 31), (343, 21), (344, 37), (345, 20), (346, 37), (347, 20), (348, 37), (349, 39), (350, 21), (351, 18), (352, 29), (354, 31), (355, 29), (356, 20), (357, 32), (358, 27), (359, 33), (365, 36), (366, 38), (367, 37), (370, 37), (371, 35), (372, 35), (374, 17), (376, 33), (377, 18), (378, 29), (380, 20), (381, 24), (382, 30), (383, 20), (384, 25), (385, 28), (386, 34), (387, 24), (388, 38), (389, 31), (390, 33), (391, 33), (392, 36), (393, 33), (394, 26), (395, 24), (396, 31), (397, 36), (398, 23), (399, 29), (400, 30), (401, 36), (405, 22), (406, 41), (408, 36), (409, 43), (410, 38), (411, 38), (413, 34), (415, 23), (416, 35), (417, 22), (419, 26), (420, 29), (421, 38), (422, 34), (423, 25), (424, 34), (425, 31), (426, 32), (427, 34), (428, 37), (429, 24), (430, 29), (431, 31), (432, 36), (433, 30), (434, 35), (435, 18), (436, 26), (438, 32), (439, 16), (440, 41), (441, 36), (442, 34), (444, 32), (445, 36), (446, 37), (447, 35), (448, 36), (449, 32), (450, 34), (451, 37), (452, 35), (453, 29), (454, 38), (455, 40), (456, 38), (457, 40), (458, 41), (459, 41), (460, 41), (461, 37), (462, 40), (463, 34), (464, 36), (465, 41)]
nb_edges_0 = 5260 rho= 0.1 # of rows = 43 # of columns= 423 total_degree_0= 5260 RHS= 526.0
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  3 with obj value: 1125.7342657342658 KP time = 0.08134308399166912 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01751 - (Local CPU) 0.01751 - (Global CPU) 0.09886

 Solve status: Optimal Objective value: 346.04000 nb_rows 43 nb_cols 402
----------------------------------------
----------------------------------------

        Updated data after iteration: 3 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (43, 402) and density : 0.727 and number of remaining ones : 12929
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.727 density  and density_threshold= 0.900


I am in the while loop with i= 4 density= 0.7271780631725095 and fixed_threshold= 0.9

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 987.534
I solved model name = row_knapsack_problem for iteration i =  4 with obj value: 987.5343750000001 KP time = 0.0988562919665128 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01468 - (Local CPU) 0.01468 - (Global CPU) 0.11354

 Solve status: Optimal Objective value: 987.53438 nb_rows 39 nb_cols 402
----------------------------------------
----------------------------------------

        Updated data after iteration: 4 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (39, 402) and density : 0.732 and number of remaining ones : 11481
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(0, 36), (1, 37), (2, 35), (3, 37), (4, 36), (5, 34), (6, 33), (7, 38), (8, 32), (9, 36), (10, 31), (11, 32), (12, 32), (13, 32), (14, 31), (15, 30), (16, 34), (17, 39), (20, 35), (22, 34), (24, 16), (28, 28), (30, 34), (33, 35), (35, 33), (37, 19), (39, 29), (40, 31), (41, 16), (42, 32), (43, 31), (44, 25), (45, 30), (46, 35), (47, 17), (48, 31), (49, 24), (50, 23), (51, 33), (52, 23), (53, 33), (54, 30), (55, 30), (56, 32), (57, 22), (58, 29), (59, 27), (60, 28), (61, 24), (62, 21), (63, 23), (64, 29), (65, 34), (66, 34), (67, 32), (68, 28), (69, 34), (70, 20), (71, 30), (72, 28), (73, 29), (74, 24), (75, 30), (76, 24), (77, 31), (78, 24), (79, 29), (80, 18), (81, 25), (82, 27), (83, 21), (84, 19), (85, 32), (86, 36), (87, 34), (88, 33), (89, 29), (90, 33), (91, 32), (92, 19), (93, 23), (94, 28), (95, 23), (96, 30), (97, 29), (98, 26), (99, 28), (100, 35), (101, 29), (102, 32), (103, 29), (104, 28), (105, 32), (106, 29), (107, 34), (108, 27), (109, 32), (110, 26), (111, 32), (112, 28), (113, 22), (114, 34), (115, 29), (116, 32), (117, 31), (118, 33), (119, 16), (120, 26), (121, 27), (122, 22), (123, 26), (124, 27), (125, 27), (126, 29), (127, 32), (128, 34), (129, 22), (130, 25), (131, 29), (132, 31), (133, 36), (134, 31), (135, 32), (136, 25), (137, 19), (138, 31), (140, 27), (141, 18), (142, 30), (143, 25), (144, 23), (145, 31), (146, 21), (147, 31), (149, 18), (150, 32), (151, 32), (152, 30), (153, 35), (154, 24), (155, 27), (156, 32), (157, 31), (158, 22), (159, 29), (160, 24), (161, 25), (162, 29), (163, 28), (164, 29), (165, 20), (166, 27), (167, 23), (168, 27), (169, 27), (170, 33), (171, 27), (172, 23), (173, 24), (174, 24), (175, 32), (176, 27), (177, 22), (178, 22), (179, 28), (180, 27), (181, 26), (182, 24), (183, 23), (184, 20), (185, 26), (186, 28), (187, 28), (188, 23), (189, 30), (190, 26), (191, 29), (192, 28), (193, 28), (194, 31), (195, 24), (196, 27), (197, 30), (198, 28), (199, 28), (200, 30), (201, 28), (202, 30), (203, 30), (204, 32), (205, 34), (206, 34), (207, 27), (208, 26), (209, 25), (210, 32), (211, 29), (212, 29), (213, 21), (214, 29), (215, 25), (217, 21), (218, 35), (219, 28), (220, 20), (221, 36), (222, 21), (223, 23), (224, 31), (225, 27), (226, 31), (227, 27), (228, 28), (229, 31), (230, 25), (231, 29), (232, 29), (233, 30), (234, 22), (235, 22), (236, 23), (237, 30), (239, 26), (240, 29), (241, 26), (242, 34), (244, 32), (245, 34), (246, 17), (247, 31), (249, 37), (250, 20), (251, 30), (252, 30), (253, 22), (254, 37), (255, 25), (256, 21), (258, 33), (259, 32), (260, 33), (262, 35), (263, 21), (264, 20), (265, 31), (266, 30), (267, 29), (268, 32), (269, 21), (270, 28), (271, 33), (272, 35), (273, 20), (274, 33), (275, 34), (276, 30), (278, 31), (279, 30), (281, 29), (282, 33), (283, 31), (284, 29), (285, 35), (288, 17), (289, 28), (291, 35), (293, 35), (294, 19), (295, 35), (296, 33), (297, 34), (298, 22), (299, 21), (300, 36), (302, 31), (303, 30), (305, 31), (307, 16), (308, 16), (309, 33), (313, 32), (314, 34), (315, 39), (316, 32), (317, 28), (319, 29), (323, 18), (325, 27), (327, 26), (328, 27), (329, 39), (331, 25), (332, 18), (333, 29), (334, 17), (335, 28), (336, 29), (337, 26), (338, 24), (339, 29), (340, 21), (341, 22), (342, 30), (343, 19), (344, 34), (345, 19), (346, 34), (347, 17), (348, 34), (349, 36), (350, 19), (352, 27), (354, 27), (355, 25), (356, 17), (357, 28), (358, 25), (359, 29), (365, 34), (366, 34), (367, 34), (370, 36), (371, 34), (372, 34), (376, 31), (377, 16), (378, 26), (380, 19), (381, 23), (382, 28), (383, 19), (384, 24), (385, 26), (386, 30), (387, 21), (388, 35), (389, 28), (390, 30), (391, 29), (392, 33), (393, 29), (394, 25), (395, 23), (396, 27), (397, 34), (398, 21), (399, 28), (400, 28), (401, 32), (405, 20), (406, 37), (408, 33), (409, 39), (410, 34), (411, 34), (413, 32), (415, 22), (416, 31), (417, 19), (419, 25), (420, 26), (421, 35), (422, 30), (423, 23), (424, 30), (425, 29), (426, 30), (427, 30), (428, 33), (429, 22), (430, 27), (431, 28), (432, 32), (433, 27), (434, 33), (436, 23), (438, 30), (440, 38), (441, 33), (442, 32), (444, 29), (445, 33), (446, 35), (447, 32), (448, 34), (449, 29), (450, 31), (451, 33), (452, 32), (453, 26), (454, 35), (455, 37), (456, 35), (457, 37), (458, 38), (459, 37), (460, 38), (461, 36), (462, 37), (463, 31), (464, 33), (465, 38)]
nb_edges_0 = 4197 rho= 0.1 # of rows = 39 # of columns= 402 total_degree_0= 4197 RHS= 419.70000000000005
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  4 with obj value: 987.5343750000001 KP time = 0.11353975092060864 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01881 - (Local CPU) 0.01881 - (Global CPU) 0.13235

 Solve status: Optimal Objective value: 330.46500 nb_rows 39 nb_cols 382
----------------------------------------
----------------------------------------

        Updated data after iteration: 4 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (39, 382) and density : 0.747 and number of remaining ones : 11481
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.747 density  and density_threshold= 0.900


I am in the while loop with i= 5 density= 0.7474828836085381 and fixed_threshold= 0.9

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 850.891
I solved model name = row_knapsack_problem for iteration i =  5 with obj value: 850.8912280701754 KP time = 0.13235158391762525 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01609 - (Local CPU) 0.01609 - (Global CPU) 0.14844

 Solve status: Optimal Objective value: 850.89123 nb_rows 35 nb_cols 382
----------------------------------------
----------------------------------------

        Updated data after iteration: 5 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (35, 382) and density : 0.753 and number of remaining ones : 10074
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(0, 32), (1, 34), (2, 31), (3, 34), (4, 33), (5, 31), (6, 30), (7, 35), (8, 28), (9, 33), (10, 28), (11, 29), (12, 28), (13, 29), (14, 29), (15, 27), (16, 31), (17, 35), (20, 31), (22, 32), (28, 26), (30, 30), (33, 33), (35, 29), (39, 25), (40, 27), (42, 29), (43, 27), (44, 24), (45, 27), (46, 31), (48, 27), (49, 20), (50, 19), (51, 29), (52, 20), (53, 30), (54, 27), (55, 27), (56, 29), (57, 20), (58, 27), (59, 25), (60, 25), (61, 23), (62, 20), (63, 21), (64, 25), (65, 30), (66, 30), (67, 28), (68, 25), (69, 30), (70, 19), (71, 26), (72, 26), (73, 26), (74, 21), (75, 28), (76, 20), (77, 28), (78, 20), (79, 25), (81, 24), (82, 24), (83, 19), (85, 29), (86, 33), (87, 31), (88, 29), (89, 27), (90, 29), (91, 30), (92, 17), (93, 20), (94, 25), (95, 20), (96, 26), (97, 29), (98, 22), (99, 24), (100, 32), (101, 27), (102, 28), (103, 25), (104, 26), (105, 28), (106, 26), (107, 31), (108, 25), (109, 28), (110, 24), (111, 30), (112, 24), (113, 20), (114, 32), (115, 25), (116, 29), (117, 28), (118, 32), (120, 22), (121, 26), (122, 20), (123, 25), (124, 27), (125, 23), (126, 25), (127, 29), (128, 31), (129, 18), (130, 21), (131, 25), (132, 29), (133, 33), (134, 30), (135, 28), (136, 24), (137, 16), (138, 30), (140, 26), (142, 26), (143, 24), (144, 20), (145, 27), (146, 18), (147, 27), (150, 30), (151, 30), (152, 28), (153, 31), (154, 22), (155, 23), (156, 29), (157, 28), (158, 20), (159, 25), (160, 23), (161, 24), (162, 27), (163, 26), (164, 26), (165, 18), (166, 24), (167, 22), (168, 24), (169, 23), (170, 30), (171, 23), (172, 21), (173, 22), (174, 20), (175, 28), (176, 24), (177, 22), (178, 21), (179, 26), (180, 24), (181, 24), (182, 21), (183, 19), (184, 18), (185, 23), (186, 25), (187, 25), (188, 21), (189, 26), (190, 23), (191, 25), (192, 25), (193, 26), (194, 28), (195, 22), (196, 26), (197, 27), (198, 26), (199, 26), (200, 28), (201, 27), (202, 26), (203, 26), (204, 29), (205, 31), (206, 31), (207, 25), (208, 23), (209, 23), (210, 29), (211, 26), (212, 25), (213, 19), (214, 27), (215, 23), (217, 18), (218, 32), (219, 26), (220, 17), (221, 32), (222, 20), (223, 20), (224, 29), (225, 24), (226, 28), (227, 25), (228, 26), (229, 28), (230, 21), (231, 27), (232, 27), (233, 29), (234, 20), (235, 22), (236, 20), (237, 29), (239, 22), (240, 28), (241, 24), (242, 31), (244, 29), (245, 32), (247, 28), (249, 34), (250, 16), (251, 27), (252, 28), (253, 19), (254, 33), (255, 21), (256, 17), (258, 29), (259, 30), (260, 31), (262, 31), (263, 19), (264, 17), (265, 28), (266, 27), (267, 27), (268, 29), (269, 17), (270, 27), (271, 30), (272, 32), (273, 18), (274, 30), (275, 30), (276, 26), (278, 28), (279, 28), (281, 27), (282, 30), (283, 28), (284, 26), (285, 32), (289, 27), (291, 32), (293, 32), (294, 16), (295, 33), (296, 31), (297, 30), (298, 19), (299, 17), (300, 32), (302, 28), (303, 27), (305, 29), (309, 31), (313, 30), (314, 31), (315, 35), (316, 30), (317, 27), (319, 28), (325, 26), (327, 25), (328, 26), (329, 35), (331, 23), (333, 27), (335, 27), (336, 25), (337, 22), (338, 23), (339, 26), (340, 20), (341, 19), (342, 27), (344, 31), (345, 19), (346, 31), (348, 31), (349, 34), (350, 18), (352, 23), (354, 23), (355, 22), (357, 24), (358, 22), (359, 26), (365, 32), (366, 30), (367, 31), (370, 33), (371, 31), (372, 31), (376, 29), (378, 23), (380, 18), (381, 22), (382, 26), (383, 17), (384, 23), (385, 22), (386, 27), (387, 18), (388, 31), (389, 25), (390, 27), (391, 25), (392, 29), (393, 26), (394, 25), (395, 22), (396, 24), (397, 32), (398, 17), (399, 24), (400, 25), (401, 29), (405, 16), (406, 33), (408, 31), (409, 35), (410, 30), (411, 30), (413, 29), (415, 22), (416, 27), (417, 16), (419, 23), (420, 23), (421, 31), (422, 26), (423, 21), (424, 26), (425, 26), (426, 27), (427, 26), (428, 29), (429, 21), (430, 24), (431, 25), (432, 28), (433, 25), (434, 31), (436, 19), (438, 29), (440, 34), (441, 30), (442, 29), (444, 25), (445, 30), (446, 32), (447, 29), (448, 31), (449, 26), (450, 28), (451, 30), (452, 30), (453, 23), (454, 32), (455, 34), (456, 32), (457, 34), (458, 35), (459, 34), (460, 35), (461, 33), (462, 35), (463, 29), (464, 31), (465, 34)]
nb_edges_0 = 3296 rho= 0.1 # of rows = 35 # of columns= 382 total_degree_0= 3296 RHS= 329.6
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  5 with obj value: 850.8912280701754 KP time = 0.148437833879143 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01715 - (Local CPU) 0.01715 - (Global CPU) 0.16558

 Solve status: Optimal Objective value: 311.92941 nb_rows 35 nb_cols 363
----------------------------------------
----------------------------------------

        Updated data after iteration: 5 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (35, 363) and density : 0.767 and number of remaining ones : 10074
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.767 density  and density_threshold= 0.900


I am in the while loop with i= 6 density= 0.7674144037780402 and fixed_threshold= 0.9

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 744.980
I solved model name = row_knapsack_problem for iteration i =  6 with obj value: 744.980198019802 KP time = 0.16558475093916059 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01449 - (Local CPU) 0.01449 - (Global CPU) 0.18007

 Solve status: Optimal Objective value: 744.98020 nb_rows 32 nb_cols 363
----------------------------------------
----------------------------------------

        Updated data after iteration: 6 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (32, 363) and density : 0.772 and number of remaining ones : 8970
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(0, 30), (1, 31), (2, 29), (3, 31), (4, 30), (5, 28), (6, 27), (7, 32), (8, 26), (9, 30), (10, 26), (11, 26), (12, 25), (13, 26), (14, 26), (15, 24), (16, 28), (17, 32), (20, 28), (22, 30), (28, 24), (30, 27), (33, 31), (35, 26), (39, 23), (40, 25), (42, 26), (43, 24), (44, 23), (45, 25), (46, 28), (48, 24), (49, 18), (50, 17), (51, 26), (52, 18), (53, 27), (54, 24), (55, 26), (56, 26), (57, 18), (58, 25), (59, 22), (60, 24), (61, 22), (62, 19), (63, 20), (64, 22), (65, 27), (66, 27), (67, 26), (68, 23), (69, 28), (70, 18), (71, 24), (72, 25), (73, 25), (74, 18), (75, 26), (76, 19), (77, 26), (78, 18), (79, 22), (81, 24), (82, 21), (83, 18), (85, 26), (86, 30), (87, 28), (88, 26), (89, 25), (90, 26), (91, 28), (93, 17), (94, 23), (95, 20), (96, 23), (97, 27), (98, 20), (99, 23), (100, 29), (101, 25), (102, 26), (103, 23), (104, 24), (105, 26), (106, 24), (107, 28), (108, 23), (109, 25), (110, 23), (111, 28), (112, 21), (113, 20), (114, 30), (115, 22), (116, 26), (117, 26), (118, 30), (120, 19), (121, 25), (122, 19), (123, 24), (124, 26), (125, 21), (126, 22), (127, 26), (128, 28), (129, 16), (130, 19), (131, 22), (132, 28), (133, 30), (134, 29), (135, 25), (136, 23), (138, 29), (140, 25), (142, 24), (143, 23), (144, 18), (145, 24), (147, 25), (150, 28), (151, 28), (152, 26), (153, 28), (154, 21), (155, 21), (156, 26), (157, 26), (158, 19), (159, 22), (160, 21), (161, 23), (162, 25), (163, 25), (164, 23), (166, 21), (167, 22), (168, 22), (169, 22), (170, 27), (171, 21), (172, 20), (173, 21), (174, 18), (175, 26), (176, 22), (177, 22), (178, 19), (179, 25), (180, 21), (181, 23), (182, 19), (183, 18), (185, 21), (186, 23), (187, 22), (188, 20), (189, 23), (190, 20), (191, 24), (192, 24), (193, 23), (194, 25), (195, 20), (196, 25), (197, 24), (198, 24), (199, 25), (200, 25), (201, 25), (202, 23), (203, 24), (204, 26), (205, 28), (206, 29), (207, 23), (208, 21), (209, 22), (210, 27), (211, 24), (212, 24), (213, 17), (214, 25), (215, 22), (218, 29), (219, 23), (221, 29), (222, 19), (223, 19), (224, 27), (225, 23), (226, 25), (227, 22), (228, 25), (229, 26), (230, 18), (231, 26), (232, 26), (233, 27), (234, 19), (235, 19), (236, 18), (237, 27), (239, 19), (240, 25), (241, 21), (242, 29), (244, 27), (245, 30), (247, 26), (249, 31), (251, 27), (252, 26), (253, 17), (254, 30), (255, 18), (258, 28), (259, 28), (260, 29), (262, 28), (263, 16), (265, 26), (266, 25), (267, 26), (268, 26), (270, 26), (271, 27), (272, 30), (274, 27), (275, 28), (276, 24), (278, 26), (279, 26), (281, 26), (282, 28), (283, 27), (284, 26), (285, 29), (289, 26), (291, 29), (293, 30), (295, 30), (296, 29), (297, 29), (298, 17), (300, 29), (302, 28), (303, 26), (305, 27), (309, 29), (313, 28), (314, 29), (315, 32), (316, 29), (317, 26), (319, 26), (325, 25), (327, 24), (328, 25), (329, 32), (331, 23), (333, 25), (335, 25), (336, 24), (337, 21), (338, 22), (339, 23), (340, 19), (341, 18), (342, 24), (344, 28), (345, 18), (346, 29), (348, 28), (349, 31), (350, 16), (352, 21), (354, 21), (355, 20), (357, 22), (358, 20), (359, 23), (365, 29), (366, 28), (367, 28), (370, 30), (371, 29), (372, 29), (376, 26), (378, 21), (381, 20), (382, 24), (384, 21), (385, 20), (386, 27), (387, 15), (388, 28), (389, 23), (390, 24), (391, 22), (392, 26), (393, 25), (394, 23), (395, 22), (396, 21), (397, 29), (399, 22), (400, 22), (401, 26), (406, 30), (408, 29), (409, 32), (410, 27), (411, 27), (413, 26), (415, 21), (416, 24), (419, 21), (420, 23), (421, 28), (422, 24), (423, 19), (424, 24), (425, 23), (426, 24), (427, 23), (428, 27), (429, 21), (430, 21), (431, 22), (432, 26), (433, 23), (434, 28), (436, 17), (438, 26), (440, 31), (441, 27), (442, 26), (444, 23), (445, 27), (446, 29), (447, 26), (448, 28), (449, 23), (450, 26), (451, 27), (452, 27), (453, 20), (454, 29), (455, 31), (456, 30), (457, 31), (458, 32), (459, 31), (460, 32), (461, 30), (462, 32), (463, 26), (464, 28), (465, 31)]
nb_edges_0 = 2646 rho= 0.1 # of rows = 32 # of columns= 363 total_degree_0= 2646 RHS= 264.6
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  6 with obj value: 744.980198019802 KP time = 0.18007454194594175 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01674 - (Local CPU) 0.01674 - (Global CPU) 0.19681

 Solve status: Optimal Objective value: 305.91429 nb_rows 32 nb_cols 345
----------------------------------------
----------------------------------------

        Updated data after iteration: 6 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (32, 345) and density : 0.785 and number of remaining ones : 8970
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.785 density  and density_threshold= 0.900


I am in the while loop with i= 7 density= 0.7845108695652174 and fixed_threshold= 0.9

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 622.374
I solved model name = row_knapsack_problem for iteration i =  7 with obj value: 622.3741935483871 KP time = 0.1968109169974923 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01429 - (Local CPU) 0.01429 - (Global CPU) 0.21110

 Solve status: Optimal Objective value: 622.37419 nb_rows 29 nb_cols 345
----------------------------------------
----------------------------------------

        Updated data after iteration: 7 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (29, 345) and density : 0.791 and number of remaining ones : 7911
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(0, 27), (1, 28), (2, 26), (3, 28), (4, 27), (5, 25), (6, 25), (7, 29), (8, 23), (9, 27), (10, 23), (11, 23), (12, 23), (13, 24), (14, 24), (15, 21), (16, 25), (17, 29), (20, 25), (22, 27), (28, 22), (30, 24), (33, 28), (35, 23), (39, 20), (40, 23), (42, 23), (43, 21), (44, 22), (45, 22), (46, 25), (48, 21), (49, 15), (51, 23), (53, 24), (54, 22), (55, 25), (56, 23), (58, 24), (59, 20), (60, 22), (61, 20), (62, 19), (63, 19), (64, 19), (65, 24), (66, 24), (67, 23), (68, 21), (69, 25), (71, 22), (72, 23), (73, 22), (74, 16), (75, 23), (76, 16), (77, 23), (78, 15), (79, 19), (81, 23), (82, 18), (83, 17), (85, 23), (86, 28), (87, 25), (88, 24), (89, 22), (90, 24), (91, 27), (94, 20), (95, 20), (96, 20), (97, 25), (98, 18), (99, 22), (100, 27), (101, 23), (102, 23), (103, 20), (104, 24), (105, 23), (106, 22), (107, 26), (108, 22), (109, 23), (110, 22), (111, 27), (112, 19), (113, 19), (114, 29), (115, 19), (116, 24), (117, 23), (118, 29), (120, 17), (121, 24), (122, 16), (123, 24), (124, 25), (125, 18), (126, 20), (127, 24), (128, 25), (130, 16), (131, 19), (132, 27), (133, 27), (134, 26), (135, 23), (136, 23), (138, 28), (140, 24), (142, 21), (143, 22), (145, 21), (147, 23), (150, 27), (151, 26), (152, 25), (153, 26), (154, 19), (155, 19), (156, 23), (157, 23), (158, 18), (159, 20), (160, 20), (161, 22), (162, 23), (163, 23), (164, 20), (166, 20), (167, 21), (168, 20), (169, 20), (170, 24), (171, 20), (172, 18), (173, 19), (175, 23), (176, 20), (177, 21), (178, 19), (179, 23), (180, 20), (181, 23), (182, 17), (183, 17), (185, 19), (186, 21), (187, 20), (188, 19), (189, 20), (190, 19), (191, 21), (192, 22), (193, 20), (194, 23), (195, 17), (196, 23), (197, 23), (198, 22), (199, 23), (200, 23), (201, 23), (202, 20), (203, 21), (204, 23), (205, 25), (206, 26), (207, 21), (208, 18), (209, 20), (210, 24), (211, 22), (212, 21), (214, 23), (215, 20), (218, 27), (219, 22), (221, 26), (222, 17), (223, 17), (224, 25), (225, 21), (226, 22), (227, 21), (228, 23), (229, 25), (231, 24), (232, 25), (233, 26), (234, 18), (235, 18), (236, 17), (237, 25), (239, 17), (240, 23), (241, 19), (242, 26), (244, 26), (245, 28), (247, 24), (249, 28), (251, 26), (252, 23), (254, 28), (255, 15), (258, 26), (259, 25), (260, 26), (262, 25), (265, 24), (266, 24), (267, 24), (268, 25), (270, 25), (271, 24), (272, 28), (274, 24), (275, 26), (276, 23), (278, 24), (279, 26), (281, 25), (282, 26), (283, 26), (284, 26), (285, 27), (289, 25), (291, 27), (293, 27), (295, 28), (296, 26), (297, 27), (300, 26), (302, 26), (303, 24), (305, 25), (309, 27), (313, 27), (314, 27), (315, 29), (316, 27), (317, 24), (319, 24), (325, 23), (327, 22), (328, 23), (329, 29), (331, 21), (333, 23), (335, 23), (336, 22), (337, 20), (338, 20), (339, 21), (340, 17), (342, 22), (344, 25), (346, 27), (348, 25), (349, 28), (352, 18), (354, 18), (355, 17), (357, 19), (358, 17), (359, 20), (365, 26), (366, 26), (367, 25), (370, 27), (371, 26), (372, 27), (376, 24), (378, 18), (381, 19), (382, 22), (384, 19), (385, 19), (386, 25), (388, 26), (389, 21), (390, 22), (391, 19), (392, 23), (393, 24), (394, 21), (395, 20), (396, 19), (397, 26), (399, 19), (400, 20), (401, 23), (406, 27), (408, 26), (409, 29), (410, 24), (411, 24), (413, 24), (415, 20), (416, 22), (419, 20), (420, 21), (421, 25), (422, 22), (423, 18), (424, 22), (425, 21), (426, 23), (427, 22), (428, 25), (429, 19), (430, 20), (431, 20), (432, 23), (433, 21), (434, 26), (438, 24), (440, 28), (441, 24), (442, 24), (444, 22), (445, 24), (446, 26), (447, 23), (448, 25), (449, 21), (450, 23), (451, 24), (452, 24), (453, 17), (454, 26), (455, 28), (456, 27), (457, 28), (458, 29), (459, 28), (460, 29), (461, 27), (462, 29), (463, 23), (464, 25), (465, 28)]
nb_edges_0 = 2094 rho= 0.1 # of rows = 29 # of columns= 345 total_degree_0= 2094 RHS= 209.4
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  7 with obj value: 622.3741935483871 KP time = 0.21110312500968575 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01669 - (Local CPU) 0.01670 - (Global CPU) 0.22780

 Solve status: Optimal Objective value: 272.48333 nb_rows 29 nb_cols 328
----------------------------------------
----------------------------------------

        Updated data after iteration: 7 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (29, 328) and density : 0.802 and number of remaining ones : 7911
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.802 density  and density_threshold= 0.900


I am in the while loop with i= 8 density= 0.8023549201009251 and fixed_threshold= 0.9

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 570.500
I solved model name = row_knapsack_problem for iteration i =  8 with obj value: 570.5 KP time = 0.22779824992176145 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01446 - (Local CPU) 0.01446 - (Global CPU) 0.24226

 Solve status: Optimal Objective value: 570.50000 nb_rows 26 nb_cols 328
----------------------------------------
----------------------------------------

        Updated data after iteration: 8 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (26, 328) and density : 0.808 and number of remaining ones : 6891
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(0, 24), (1, 25), (2, 24), (3, 25), (4, 24), (5, 22), (6, 22), (7, 26), (8, 21), (9, 24), (10, 20), (11, 21), (12, 20), (13, 21), (14, 21), (15, 20), (16, 22), (17, 26), (20, 23), (22, 24), (28, 21), (30, 23), (33, 25), (35, 21), (39, 19), (40, 22), (42, 22), (43, 20), (44, 20), (45, 20), (46, 23), (48, 21), (51, 21), (53, 21), (54, 20), (55, 22), (56, 21), (58, 22), (59, 18), (60, 20), (61, 17), (62, 18), (63, 19), (64, 18), (65, 22), (66, 21), (67, 21), (68, 20), (69, 22), (71, 20), (72, 22), (73, 20), (75, 22), (77, 20), (79, 19), (81, 21), (82, 16), (85, 22), (86, 25), (87, 24), (88, 22), (89, 20), (90, 21), (91, 24), (94, 18), (95, 18), (96, 18), (97, 23), (98, 16), (99, 20), (100, 24), (101, 21), (102, 21), (103, 19), (104, 22), (105, 21), (106, 19), (107, 24), (108, 21), (109, 22), (110, 20), (111, 24), (112, 17), (113, 17), (114, 26), (115, 18), (116, 22), (117, 21), (118, 26), (121, 22), (123, 21), (124, 22), (125, 17), (126, 17), (127, 22), (128, 22), (131, 17), (132, 25), (133, 24), (134, 23), (135, 21), (136, 20), (138, 25), (140, 21), (142, 19), (143, 20), (145, 20), (147, 22), (150, 25), (151, 25), (152, 23), (153, 23), (154, 16), (155, 18), (156, 21), (157, 21), (158, 15), (159, 17), (160, 17), (161, 20), (162, 20), (163, 20), (164, 18), (166, 19), (167, 20), (168, 18), (169, 19), (170, 22), (171, 18), (172, 17), (173, 18), (175, 21), (176, 17), (177, 20), (178, 16), (179, 20), (180, 18), (181, 20), (185, 16), (186, 18), (187, 18), (188, 19), (189, 18), (190, 16), (191, 20), (192, 20), (193, 17), (194, 20), (196, 20), (197, 20), (198, 20), (199, 21), (200, 21), (201, 20), (202, 19), (203, 19), (204, 20), (205, 22), (206, 24), (207, 19), (208, 16), (209, 17), (210, 21), (211, 21), (212, 19), (214, 20), (215, 19), (218, 24), (219, 21), (221, 24), (222, 15), (224, 23), (225, 19), (226, 20), (227, 19), (228, 21), (229, 22), (231, 22), (232, 22), (233, 23), (234, 16), (235, 16), (237, 22), (239, 15), (240, 20), (241, 17), (242, 24), (244, 23), (245, 25), (247, 22), (249, 25), (251, 24), (252, 21), (254, 25), (258, 23), (259, 24), (260, 23), (262, 22), (265, 21), (266, 22), (267, 22), (268, 22), (270, 23), (271, 21), (272, 26), (274, 21), (275, 23), (276, 21), (278, 21), (279, 24), (281, 22), (282, 23), (283, 24), (284, 23), (285, 24), (289, 22), (291, 24), (293, 24), (295, 25), (296, 23), (297, 24), (300, 23), (302, 24), (303, 23), (305, 23), (309, 24), (313, 24), (314, 24), (315, 26), (316, 24), (317, 22), (319, 22), (325, 21), (327, 20), (328, 21), (329, 26), (331, 20), (333, 21), (335, 21), (336, 20), (337, 17), (338, 19), (339, 18), (342, 20), (344, 23), (346, 24), (348, 23), (349, 26), (352, 16), (354, 16), (357, 17), (358, 15), (359, 18), (365, 23), (366, 23), (367, 22), (370, 24), (371, 23), (372, 24), (376, 21), (378, 17), (381, 16), (382, 19), (384, 17), (385, 18), (386, 22), (388, 23), (389, 19), (390, 20), (391, 18), (392, 21), (393, 22), (394, 19), (395, 18), (396, 18), (397, 23), (399, 17), (400, 18), (401, 21), (406, 24), (408, 23), (409, 26), (410, 22), (411, 22), (413, 23), (415, 19), (416, 20), (419, 19), (420, 19), (421, 22), (422, 20), (423, 16), (424, 20), (425, 20), (426, 21), (427, 19), (428, 22), (429, 17), (430, 18), (431, 18), (432, 22), (433, 18), (434, 23), (438, 23), (440, 25), (441, 21), (442, 21), (444, 19), (445, 22), (446, 23), (447, 20), (448, 22), (449, 18), (450, 20), (451, 21), (452, 21), (454, 23), (455, 25), (456, 24), (457, 25), (458, 26), (459, 25), (460, 26), (461, 24), (462, 26), (463, 22), (464, 23), (465, 26)]
nb_edges_0 = 1637 rho= 0.1 # of rows = 26 # of columns= 328 total_degree_0= 1637 RHS= 163.70000000000002
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  8 with obj value: 570.5 KP time = 0.24226191686466336 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01635 - (Local CPU) 0.01635 - (Global CPU) 0.25861

 Solve status: Optimal Objective value: 251.52000 nb_rows 26 nb_cols 312
----------------------------------------
----------------------------------------

        Updated data after iteration: 8 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (26, 312) and density : 0.818 and number of remaining ones : 6891
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.818 density  and density_threshold= 0.900


I am in the while loop with i= 9 density= 0.8184171597633136 and fixed_threshold= 0.9

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 482.413
I solved model name = row_knapsack_problem for iteration i =  9 with obj value: 482.41267605633806 KP time = 0.2586087508825585 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01405 - (Local CPU) 0.01405 - (Global CPU) 0.27266

 Solve status: Optimal Objective value: 482.41268 nb_rows 23 nb_cols 312
----------------------------------------
----------------------------------------

        Updated data after iteration: 9 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (23, 312) and density : 0.825 and number of remaining ones : 5920
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(0, 21), (1, 22), (2, 21), (3, 23), (4, 21), (5, 19), (6, 19), (7, 23), (8, 19), (9, 21), (10, 18), (11, 19), (12, 18), (13, 18), (14, 18), (15, 18), (16, 20), (17, 23), (20, 20), (22, 21), (28, 18), (30, 20), (33, 22), (35, 18), (39, 16), (40, 19), (42, 19), (43, 17), (44, 19), (45, 20), (46, 20), (48, 19), (51, 19), (53, 18), (54, 18), (55, 19), (56, 18), (58, 21), (59, 18), (60, 18), (61, 14), (62, 15), (63, 19), (64, 15), (65, 22), (66, 19), (67, 19), (68, 18), (69, 19), (71, 17), (72, 19), (73, 18), (75, 20), (77, 18), (79, 17), (81, 19), (85, 20), (86, 22), (87, 21), (88, 19), (89, 18), (90, 19), (91, 21), (94, 16), (95, 16), (96, 15), (97, 20), (99, 19), (100, 21), (101, 18), (102, 19), (103, 18), (104, 20), (105, 19), (106, 17), (107, 22), (108, 19), (109, 19), (110, 18), (111, 21), (112, 15), (113, 16), (114, 23), (115, 15), (116, 20), (117, 18), (118, 23), (121, 19), (123, 20), (124, 20), (125, 14), (126, 16), (127, 20), (128, 20), (131, 15), (132, 22), (133, 21), (134, 22), (135, 19), (136, 17), (138, 22), (140, 19), (142, 17), (143, 17), (145, 17), (147, 19), (150, 22), (151, 22), (152, 20), (153, 20), (155, 16), (156, 19), (157, 19), (159, 16), (160, 14), (161, 19), (162, 18), (163, 18), (164, 16), (166, 16), (167, 17), (168, 16), (169, 17), (170, 20), (171, 16), (172, 16), (173, 15), (175, 19), (176, 15), (177, 18), (179, 18), (180, 17), (181, 19), (186, 16), (187, 16), (188, 16), (189, 16), (191, 17), (192, 18), (193, 15), (194, 17), (196, 18), (197, 18), (198, 18), (199, 19), (200, 18), (201, 17), (202, 18), (203, 17), (204, 19), (205, 19), (206, 21), (207, 16), (209, 15), (210, 18), (211, 18), (212, 17), (214, 17), (215, 17), (218, 21), (219, 19), (221, 21), (224, 21), (225, 17), (226, 18), (227, 19), (228, 18), (229, 20), (231, 20), (232, 19), (233, 21), (234, 15), (237, 21), (240, 18), (241, 14), (242, 21), (244, 21), (245, 23), (247, 20), (249, 22), (251, 22), (252, 18), (254, 22), (258, 20), (259, 21), (260, 20), (262, 21), (265, 20), (266, 20), (267, 20), (268, 21), (270, 21), (271, 20), (272, 23), (274, 20), (275, 21), (276, 20), (278, 19), (279, 22), (281, 21), (282, 21), (283, 21), (284, 20), (285, 21), (289, 20), (291, 22), (293, 21), (295, 22), (296, 21), (297, 21), (300, 21), (302, 21), (303, 20), (305, 22), (309, 21), (313, 22), (314, 21), (315, 23), (316, 21), (317, 19), (319, 19), (325, 20), (327, 19), (328, 20), (329, 23), (331, 19), (333, 20), (335, 20), (336, 17), (337, 15), (338, 18), (339, 16), (342, 17), (344, 20), (346, 22), (348, 20), (349, 23), (357, 14), (359, 15), (365, 21), (366, 20), (367, 20), (370, 22), (371, 21), (372, 22), (376, 19), (378, 15), (382, 18), (384, 17), (385, 15), (386, 19), (388, 20), (389, 17), (390, 17), (391, 16), (392, 19), (393, 19), (394, 17), (395, 17), (396, 15), (397, 21), (399, 16), (400, 16), (401, 18), (406, 21), (408, 20), (409, 23), (410, 19), (411, 19), (413, 21), (415, 18), (416, 17), (419, 17), (420, 17), (421, 19), (422, 18), (424, 18), (425, 18), (426, 20), (427, 17), (428, 20), (429, 15), (430, 16), (431, 16), (432, 19), (433, 17), (434, 21), (438, 21), (440, 22), (441, 18), (442, 18), (444, 16), (445, 19), (446, 20), (447, 18), (448, 20), (449, 15), (450, 18), (451, 18), (452, 18), (454, 20), (455, 22), (456, 21), (457, 22), (458, 23), (459, 22), (460, 23), (461, 21), (462, 23), (463, 19), (464, 20), (465, 23)]
nb_edges_0 = 1256 rho= 0.1 # of rows = 23 # of columns= 312 total_degree_0= 1256 RHS= 125.60000000000001
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  9 with obj value: 482.41267605633806 KP time = 0.2726636668667197 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01622 - (Local CPU) 0.01622 - (Global CPU) 0.28888

 Solve status: Optimal Objective value: 221.12500 nb_rows 23 nb_cols 296
----------------------------------------
----------------------------------------

        Updated data after iteration: 9 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (23, 296) and density : 0.835 and number of remaining ones : 5920
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.835 density  and density_threshold= 0.900


I am in the while loop with i= 10 density= 0.8350470035252644 and fixed_threshold= 0.9

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 386.864
I solved model name = row_knapsack_problem for iteration i =  10 with obj value: 386.8636363636364 KP time = 0.2888823748799041 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01484 - (Local CPU) 0.01484 - (Global CPU) 0.30372

 Solve status: Optimal Objective value: 386.86364 nb_rows 21 nb_cols 296
----------------------------------------
----------------------------------------

        Updated data after iteration: 10 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (21, 296) and density : 0.841 and number of remaining ones : 5226
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(0, 19), (1, 20), (2, 19), (3, 21), (4, 19), (5, 18), (6, 17), (7, 21), (8, 17), (9, 19), (10, 16), (11, 17), (12, 16), (13, 16), (14, 16), (15, 16), (16, 18), (17, 21), (20, 18), (22, 19), (28, 16), (30, 18), (33, 20), (35, 16), (39, 14), (40, 17), (42, 17), (43, 15), (44, 17), (45, 18), (46, 18), (48, 17), (51, 19), (53, 18), (54, 17), (55, 19), (56, 18), (58, 19), (59, 18), (60, 16), (63, 18), (64, 13), (65, 20), (66, 17), (67, 17), (68, 16), (69, 17), (71, 15), (72, 17), (73, 17), (75, 18), (77, 18), (79, 17), (81, 17), (85, 20), (86, 20), (87, 19), (88, 17), (89, 16), (90, 18), (91, 19), (94, 14), (95, 14), (97, 18), (99, 19), (100, 19), (101, 16), (102, 18), (103, 17), (104, 18), (105, 19), (106, 16), (107, 20), (108, 18), (109, 18), (110, 17), (111, 19), (112, 13), (113, 15), (114, 21), (116, 18), (117, 17), (118, 21), (121, 17), (123, 18), (124, 18), (126, 14), (127, 18), (128, 18), (132, 20), (133, 19), (134, 20), (135, 18), (136, 16), (138, 20), (140, 17), (142, 15), (143, 15), (145, 15), (147, 17), (150, 20), (151, 20), (152, 19), (153, 19), (155, 16), (156, 17), (157, 17), (159, 14), (161, 17), (162, 17), (163, 16), (164, 14), (166, 15), (167, 15), (168, 14), (169, 17), (170, 19), (171, 15), (172, 15), (173, 13), (175, 17), (176, 14), (177, 16), (179, 16), (180, 15), (181, 17), (186, 15), (187, 14), (188, 14), (189, 15), (191, 17), (192, 17), (193, 13), (194, 15), (196, 17), (197, 16), (198, 16), (199, 17), (200, 17), (201, 15), (202, 17), (203, 16), (204, 17), (205, 18), (206, 19), (207, 15), (210, 17), (211, 16), (212, 16), (214, 16), (215, 16), (218, 19), (219, 17), (221, 19), (224, 19), (225, 16), (226, 17), (227, 17), (228, 17), (229, 19), (231, 18), (232, 19), (233, 19), (237, 20), (240, 16), (242, 20), (244, 20), (245, 21), (247, 19), (249, 21), (251, 21), (252, 17), (254, 21), (258, 20), (259, 21), (260, 19), (262, 19), (265, 18), (266, 18), (267, 19), (268, 19), (270, 20), (271, 18), (272, 21), (274, 18), (275, 19), (276, 19), (278, 19), (279, 20), (281, 20), (282, 21), (283, 20), (284, 20), (285, 20), (289, 19), (291, 21), (293, 20), (295, 20), (296, 21), (297, 19), (300, 19), (302, 19), (303, 18), (305, 20), (309, 19), (313, 21), (314, 19), (315, 21), (316, 20), (317, 18), (319, 18), (325, 19), (327, 18), (328, 19), (329, 21), (331, 18), (333, 19), (335, 19), (336, 15), (337, 14), (338, 17), (339, 14), (342, 16), (344, 19), (346, 20), (348, 18), (349, 21), (359, 14), (365, 19), (366, 18), (367, 18), (370, 20), (371, 19), (372, 20), (376, 18), (382, 18), (384, 17), (386, 17), (388, 18), (389, 15), (390, 15), (391, 14), (392, 17), (393, 17), (394, 16), (395, 17), (397, 20), (399, 14), (400, 15), (401, 16), (406, 19), (408, 18), (409, 21), (410, 17), (411, 17), (413, 19), (415, 16), (416, 16), (419, 16), (420, 15), (421, 17), (422, 16), (424, 17), (425, 16), (426, 19), (427, 16), (428, 19), (430, 15), (431, 15), (432, 18), (433, 15), (434, 19), (438, 19), (440, 20), (441, 17), (442, 16), (444, 14), (445, 17), (446, 18), (447, 16), (448, 18), (450, 16), (451, 16), (452, 16), (454, 18), (455, 20), (456, 19), (457, 20), (458, 21), (459, 20), (460, 21), (461, 19), (462, 21), (463, 17), (464, 18), (465, 21)]
nb_edges_0 = 990 rho= 0.1 # of rows = 21 # of columns= 296 total_degree_0= 990 RHS= 99.0
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  10 with obj value: 386.8636363636364 KP time = 0.3037244997685775 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01694 - (Local CPU) 0.01694 - (Global CPU) 0.32067

 Solve status: Optimal Objective value: 186.00000 nb_rows 21 nb_cols 282
----------------------------------------
----------------------------------------

        Updated data after iteration: 10 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (21, 282) and density : 0.850 and number of remaining ones : 5226
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.850 density  and density_threshold= 0.900


I am in the while loop with i= 11 density= 0.8500506585612969 and fixed_threshold= 0.9

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 328.366
I solved model name = row_knapsack_problem for iteration i =  11 with obj value: 328.3655172413793 KP time = 0.32066833367571235 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01469 - (Local CPU) 0.01469 - (Global CPU) 0.33536

 Solve status: Optimal Objective value: 328.36552 nb_rows 19 nb_cols 282
----------------------------------------
----------------------------------------

        Updated data after iteration: 11 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (19, 282) and density : 0.856 and number of remaining ones : 4589
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(0, 17), (1, 18), (2, 17), (3, 19), (4, 17), (5, 16), (6, 15), (7, 19), (8, 15), (9, 17), (10, 15), (11, 15), (12, 14), (13, 14), (14, 14), (15, 14), (16, 16), (17, 19), (20, 16), (22, 18), (28, 16), (30, 17), (33, 18), (35, 15), (40, 16), (42, 15), (43, 13), (44, 16), (45, 16), (46, 18), (48, 16), (51, 17), (53, 16), (54, 17), (55, 17), (56, 17), (58, 17), (59, 17), (60, 15), (63, 17), (65, 19), (66, 15), (67, 16), (68, 14), (69, 15), (71, 15), (72, 16), (73, 16), (75, 17), (77, 16), (79, 16), (81, 16), (85, 18), (86, 19), (87, 18), (88, 17), (89, 14), (90, 17), (91, 17), (94, 13), (97, 16), (99, 18), (100, 18), (101, 15), (102, 17), (103, 16), (104, 18), (105, 17), (106, 15), (107, 19), (108, 16), (109, 17), (110, 16), (111, 17), (113, 13), (114, 19), (116, 17), (117, 15), (118, 19), (121, 16), (123, 17), (124, 16), (127, 17), (128, 16), (132, 19), (133, 17), (134, 18), (135, 17), (136, 15), (138, 18), (140, 16), (142, 14), (143, 13), (145, 14), (147, 16), (150, 19), (151, 18), (152, 17), (153, 18), (155, 14), (156, 16), (157, 16), (159, 13), (161, 16), (162, 16), (163, 15), (164, 12), (166, 13), (167, 13), (169, 16), (170, 17), (171, 13), (172, 14), (175, 15), (177, 14), (179, 14), (180, 13), (181, 15), (186, 13), (187, 14), (189, 14), (191, 16), (192, 15), (194, 15), (196, 15), (197, 15), (198, 14), (199, 15), (200, 16), (201, 14), (202, 16), (203, 16), (204, 17), (205, 16), (206, 18), (207, 13), (210, 16), (211, 16), (212, 15), (214, 15), (215, 14), (218, 17), (219, 16), (221, 17), (224, 18), (225, 14), (226, 17), (227, 15), (228, 16), (229, 17), (231, 16), (232, 17), (233, 17), (237, 18), (240, 14), (242, 18), (244, 18), (245, 19), (247, 18), (249, 19), (251, 19), (252, 15), (254, 19), (258, 18), (259, 19), (260, 17), (262, 17), (265, 16), (266, 16), (267, 17), (268, 17), (270, 18), (271, 16), (272, 19), (274, 16), (275, 17), (276, 17), (278, 17), (279, 18), (281, 18), (282, 19), (283, 18), (284, 18), (285, 18), (289, 17), (291, 19), (293, 18), (295, 18), (296, 19), (297, 17), (300, 17), (302, 17), (303, 16), (305, 19), (309, 18), (313, 19), (314, 18), (315, 19), (316, 19), (317, 16), (319, 16), (325, 17), (327, 16), (328, 17), (329, 19), (331, 16), (333, 17), (335, 17), (336, 14), (337, 13), (338, 15), (339, 13), (342, 14), (344, 17), (346, 18), (348, 17), (349, 19), (365, 17), (366, 17), (367, 16), (370, 18), (371, 17), (372, 18), (376, 16), (382, 16), (384, 16), (386, 15), (388, 16), (389, 13), (390, 15), (392, 16), (393, 16), (394, 15), (395, 15), (397, 18), (400, 14), (401, 15), (406, 17), (408, 16), (409, 19), (410, 15), (411, 15), (413, 17), (415, 14), (416, 15), (419, 16), (420, 13), (421, 15), (422, 15), (424, 15), (425, 14), (426, 18), (427, 16), (428, 18), (430, 14), (431, 14), (432, 16), (433, 13), (434, 18), (438, 17), (440, 18), (441, 15), (442, 14), (445, 15), (446, 16), (447, 14), (448, 16), (450, 14), (451, 14), (452, 14), (454, 17), (455, 18), (456, 17), (457, 18), (458, 19), (459, 18), (460, 19), (461, 17), (462, 19), (463, 15), (464, 16), (465, 19)]
nb_edges_0 = 769 rho= 0.1 # of rows = 19 # of columns= 282 total_degree_0= 769 RHS= 76.9
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  11 with obj value: 328.3655172413793 KP time = 0.33535774960182607 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01654 - (Local CPU) 0.01654 - (Global CPU) 0.35190

 Solve status: Optimal Objective value: 163.45000 nb_rows 19 nb_cols 269
----------------------------------------
----------------------------------------

        Updated data after iteration: 11 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (19, 269) and density : 0.865 and number of remaining ones : 4589
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.865 density  and density_threshold= 0.900


I am in the while loop with i= 12 density= 0.8649970651535903 and fixed_threshold= 0.9

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 305.261
I solved model name = row_knapsack_problem for iteration i =  12 with obj value: 305.2608695652174 KP time = 0.35190237453207374 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01482 - (Local CPU) 0.01482 - (Global CPU) 0.36673

 Solve status: Optimal Objective value: 305.26087 nb_rows 17 nb_cols 269
----------------------------------------
----------------------------------------

        Updated data after iteration: 12 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (17, 269) and density : 0.870 and number of remaining ones : 3980
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(0, 15), (1, 16), (2, 16), (3, 17), (4, 15), (5, 15), (6, 13), (7, 17), (8, 13), (9, 15), (10, 13), (11, 13), (12, 12), (13, 12), (14, 12), (15, 12), (16, 14), (17, 17), (20, 15), (22, 16), (28, 15), (30, 16), (33, 16), (35, 14), (40, 14), (42, 13), (44, 15), (45, 14), (46, 17), (48, 15), (51, 15), (53, 14), (54, 16), (55, 15), (56, 16), (58, 15), (59, 15), (60, 14), (63, 16), (65, 17), (66, 14), (67, 15), (68, 14), (69, 14), (71, 13), (72, 15), (73, 15), (75, 15), (77, 14), (79, 15), (81, 15), (85, 16), (86, 17), (87, 17), (88, 16), (89, 13), (90, 15), (91, 15), (97, 14), (99, 16), (100, 16), (101, 14), (102, 16), (103, 15), (104, 16), (105, 15), (106, 13), (107, 17), (108, 15), (109, 16), (110, 14), (111, 15), (114, 17), (116, 15), (117, 13), (118, 17), (121, 15), (123, 15), (124, 14), (127, 15), (128, 14), (132, 17), (133, 15), (134, 16), (135, 15), (136, 13), (138, 16), (140, 14), (142, 13), (145, 13), (147, 14), (150, 17), (151, 16), (152, 15), (153, 16), (155, 12), (156, 15), (157, 14), (161, 15), (162, 15), (163, 14), (169, 15), (170, 15), (172, 12), (175, 13), (177, 13), (179, 12), (180, 13), (181, 14), (187, 12), (189, 12), (191, 14), (192, 14), (194, 13), (196, 13), (197, 13), (198, 12), (199, 14), (200, 14), (201, 13), (202, 15), (203, 15), (204, 15), (205, 14), (206, 16), (207, 11), (210, 14), (211, 14), (212, 13), (214, 13), (215, 13), (218, 15), (219, 15), (221, 16), (224, 17), (225, 13), (226, 15), (227, 14), (228, 15), (229, 15), (231, 14), (232, 16), (233, 16), (237, 16), (240, 13), (242, 16), (244, 16), (245, 17), (247, 16), (249, 17), (251, 17), (252, 14), (254, 17), (258, 16), (259, 17), (260, 15), (262, 16), (265, 15), (266, 14), (267, 15), (268, 16), (270, 17), (271, 15), (272, 17), (274, 15), (275, 15), (276, 15), (278, 16), (279, 16), (281, 16), (282, 17), (283, 16), (284, 16), (285, 16), (289, 16), (291, 17), (293, 17), (295, 17), (296, 17), (297, 16), (300, 16), (302, 16), (303, 15), (305, 17), (309, 16), (313, 17), (314, 16), (315, 17), (316, 17), (317, 14), (319, 14), (325, 15), (327, 15), (328, 15), (329, 17), (331, 14), (333, 15), (335, 15), (336, 12), (337, 13), (338, 13), (342, 12), (344, 15), (346, 16), (348, 15), (349, 17), (365, 16), (366, 16), (367, 14), (370, 16), (371, 15), (372, 16), (376, 14), (382, 14), (384, 15), (386, 14), (388, 15), (389, 12), (390, 13), (392, 15), (393, 14), (394, 13), (395, 13), (397, 16), (400, 13), (401, 13), (406, 15), (408, 15), (409, 17), (410, 14), (411, 13), (413, 15), (415, 12), (416, 13), (419, 14), (421, 14), (422, 14), (424, 14), (425, 12), (426, 16), (427, 15), (428, 16), (430, 12), (431, 12), (432, 14), (434, 17), (438, 16), (440, 16), (441, 13), (442, 13), (445, 13), (446, 14), (447, 13), (448, 14), (450, 12), (451, 12), (452, 12), (454, 16), (455, 16), (456, 16), (457, 16), (458, 17), (459, 16), (460, 17), (461, 16), (462, 17), (463, 14), (464, 14), (465, 17)]
nb_edges_0 = 593 rho= 0.1 # of rows = 17 # of columns= 269 total_degree_0= 593 RHS= 59.300000000000004
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  12 with obj value: 305.2608695652174 KP time = 0.3667258325731382 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01671 - (Local CPU) 0.01671 - (Global CPU) 0.38344

 Solve status: Optimal Objective value: 138.92000 nb_rows 17 nb_cols 257
----------------------------------------
----------------------------------------

        Updated data after iteration: 12 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (17, 257) and density : 0.878 and number of remaining ones : 3980
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.878 density  and density_threshold= 0.900


I am in the while loop with i= 13 density= 0.8782330052643625 and fixed_threshold= 0.9

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 277.605
I solved model name = row_knapsack_problem for iteration i =  13 with obj value: 277.6051282051282 KP time = 0.3834402905777097 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01494 - (Local CPU) 0.01494 - (Global CPU) 0.39838

 Solve status: Optimal Objective value: 277.60513 nb_rows 15 nb_cols 257
----------------------------------------
----------------------------------------

        Updated data after iteration: 13 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (15, 257) and density : 0.883 and number of remaining ones : 3404
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(0, 13), (1, 14), (2, 14), (3, 15), (4, 13), (5, 13), (6, 11), (7, 15), (8, 11), (9, 13), (10, 11), (11, 11), (13, 10), (15, 11), (16, 12), (17, 15), (20, 14), (22, 14), (28, 13), (30, 14), (33, 14), (35, 12), (40, 12), (42, 11), (44, 14), (45, 12), (46, 15), (48, 15), (51, 14), (53, 12), (54, 14), (55, 14), (56, 14), (58, 13), (59, 14), (60, 13), (63, 14), (65, 15), (66, 13), (67, 13), (68, 12), (69, 12), (71, 12), (72, 14), (73, 13), (75, 13), (77, 12), (79, 14), (81, 13), (85, 15), (86, 15), (87, 15), (88, 15), (89, 12), (90, 13), (91, 13), (97, 12), (99, 14), (100, 14), (101, 14), (102, 14), (103, 13), (104, 14), (105, 13), (106, 13), (107, 15), (108, 15), (109, 14), (110, 14), (111, 13), (114, 15), (116, 13), (117, 11), (118, 15), (121, 14), (123, 15), (124, 13), (127, 14), (128, 12), (132, 15), (133, 15), (134, 15), (135, 13), (136, 13), (138, 15), (140, 13), (142, 11), (145, 11), (147, 14), (150, 15), (151, 14), (152, 14), (153, 15), (156, 13), (157, 14), (161, 13), (162, 13), (163, 12), (169, 13), (170, 15), (172, 11), (175, 12), (177, 12), (180, 12), (181, 12), (187, 11), (191, 13), (192, 12), (194, 12), (196, 11), (197, 11), (198, 10), (199, 12), (200, 12), (201, 11), (202, 13), (203, 13), (204, 13), (205, 12), (206, 14), (210, 13), (211, 13), (212, 12), (214, 12), (215, 11), (218, 14), (219, 15), (221, 14), (224, 15), (225, 12), (226, 13), (227, 13), (228, 14), (229, 14), (231, 12), (232, 15), (233, 15), (237, 14), (240, 11), (242, 14), (244, 14), (245, 15), (247, 14), (249, 15), (251, 15), (252, 12), (254, 15), (258, 14), (259, 15), (260, 13), (262, 14), (265, 13), (266, 13), (267, 14), (268, 15), (270, 15), (271, 13), (272, 15), (274, 13), (275, 14), (276, 14), (278, 14), (279, 14), (281, 14), (282, 15), (283, 14), (284, 14), (285, 14), (289, 14), (291, 15), (293, 15), (295, 15), (296, 15), (297, 14), (300, 14), (302, 14), (303, 13), (305, 15), (309, 14), (313, 15), (314, 14), (315, 15), (316, 15), (317, 12), (319, 12), (325, 13), (327, 13), (328, 13), (329, 15), (331, 12), (333, 13), (335, 13), (336, 11), (337, 12), (338, 11), (342, 10), (344, 13), (346, 14), (348, 13), (349, 15), (365, 14), (366, 14), (367, 12), (370, 14), (371, 13), (372, 14), (376, 12), (382, 12), (384, 13), (386, 13), (388, 13), (390, 11), (392, 13), (393, 12), (394, 11), (395, 12), (397, 14), (400, 11), (401, 11), (406, 13), (408, 13), (409, 15), (410, 12), (411, 11), (413, 13), (415, 11), (416, 11), (419, 12), (421, 12), (422, 14), (424, 14), (426, 14), (427, 13), (428, 15), (432, 12), (434, 15), (438, 14), (440, 14), (441, 11), (442, 11), (445, 11), (446, 12), (447, 11), (448, 12), (452, 11), (454, 14), (455, 14), (456, 14), (457, 15), (458, 15), (459, 14), (460, 15), (461, 14), (462, 15), (463, 12), (464, 12), (465, 15)]
nb_edges_0 = 451 rho= 0.1 # of rows = 15 # of columns= 257 total_degree_0= 451 RHS= 45.1
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  13 with obj value: 277.6051282051282 KP time = 0.3983767065219581 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01557 - (Local CPU) 0.01557 - (Global CPU) 0.41395

 Solve status: Optimal Objective value: 112.77500 nb_rows 15 nb_cols 246
----------------------------------------
----------------------------------------

        Updated data after iteration: 13 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (15, 246) and density : 0.891 and number of remaining ones : 3404
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.891 density  and density_threshold= 0.900


I am in the while loop with i= 14 density= 0.8905149051490515 and fixed_threshold= 0.9

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 214.908
I solved model name = row_knapsack_problem for iteration i =  14 with obj value: 214.9081081081081 KP time = 0.413945373496972 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01395 - (Local CPU) 0.01395 - (Global CPU) 0.42790

 Solve status: Optimal Objective value: 214.90811 nb_rows 13 nb_cols 246
----------------------------------------
----------------------------------------

        Updated data after iteration: 14 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (13, 246) and density : 0.897 and number of remaining ones : 2870
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(0, 11), (1, 13), (2, 12), (3, 13), (4, 11), (5, 11), (6, 9), (7, 13), (8, 9), (9, 11), (10, 9), (11, 9), (15, 10), (16, 10), (17, 13), (20, 12), (22, 13), (28, 12), (30, 12), (33, 13), (35, 11), (40, 10), (42, 11), (44, 12), (45, 11), (46, 13), (48, 13), (51, 12), (53, 10), (54, 13), (55, 12), (56, 12), (58, 11), (59, 12), (60, 12), (63, 12), (65, 13), (66, 12), (67, 11), (68, 10), (69, 11), (71, 12), (72, 12), (73, 12), (75, 11), (77, 11), (79, 12), (81, 12), (85, 13), (86, 13), (87, 13), (88, 13), (89, 12), (90, 12), (91, 12), (97, 11), (99, 12), (100, 12), (101, 13), (102, 12), (103, 12), (104, 13), (105, 12), (106, 12), (107, 13), (108, 13), (109, 13), (110, 12), (111, 12), (114, 13), (116, 11), (117, 9), (118, 13), (121, 13), (123, 13), (124, 13), (127, 13), (128, 12), (132, 13), (133, 13), (134, 13), (135, 12), (136, 12), (138, 13), (140, 11), (145, 9), (147, 12), (150, 13), (151, 12), (152, 12), (153, 13), (156, 11), (157, 12), (161, 12), (162, 11), (163, 10), (169, 11), (170, 13), (172, 9), (175, 10), (177, 10), (180, 11), (181, 11), (191, 11), (192, 10), (194, 11), (196, 9), (197, 11), (199, 11), (200, 10), (202, 11), (203, 11), (204, 11), (205, 10), (206, 13), (210, 13), (211, 12), (212, 11), (214, 10), (215, 9), (218, 13), (219, 13), (221, 13), (224, 13), (225, 12), (226, 12), (227, 11), (228, 13), (229, 12), (231, 11), (232, 13), (233, 13), (237, 12), (240, 9), (242, 12), (244, 12), (245, 13), (247, 12), (249, 13), (251, 13), (252, 10), (254, 13), (258, 12), (259, 13), (260, 11), (262, 12), (265, 11), (266, 12), (267, 12), (268, 13), (270, 13), (271, 11), (272, 13), (274, 11), (275, 12), (276, 12), (278, 12), (279, 12), (281, 12), (282, 13), (283, 12), (284, 12), (285, 12), (289, 12), (291, 13), (293, 13), (295, 13), (296, 13), (297, 12), (300, 12), (302, 12), (303, 11), (305, 13), (309, 12), (313, 13), (314, 12), (315, 13), (316, 13), (317, 11), (319, 11), (325, 12), (327, 12), (328, 12), (329, 13), (331, 11), (333, 12), (335, 12), (336, 10), (337, 10), (344, 11), (346, 12), (348, 11), (349, 13), (365, 12), (366, 12), (367, 10), (370, 12), (371, 12), (372, 12), (376, 11), (382, 10), (384, 11), (386, 12), (388, 11), (390, 9), (392, 12), (393, 10), (394, 9), (395, 10), (397, 12), (401, 9), (406, 11), (408, 11), (409, 13), (410, 10), (413, 11), (415, 9), (416, 10), (419, 11), (421, 10), (422, 12), (424, 12), (426, 12), (427, 11), (428, 13), (432, 11), (434, 13), (438, 12), (440, 12), (441, 9), (446, 10), (447, 9), (448, 10), (452, 9), (454, 12), (455, 12), (456, 12), (457, 13), (458, 13), (459, 12), (460, 13), (461, 12), (462, 13), (463, 11), (464, 11), (465, 13)]
nb_edges_0 = 328 rho= 0.1 # of rows = 13 # of columns= 246 total_degree_0= 328 RHS= 32.800000000000004
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  14 with obj value: 214.9081081081081 KP time = 0.4278977485373616 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01506 - (Local CPU) 0.01506 - (Global CPU) 0.44296

 Solve status: Optimal Objective value: 73.80000 nb_rows 13 nb_cols 237
----------------------------------------
----------------------------------------

        Updated data after iteration: 14 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (13, 237) and density : 0.905 and number of remaining ones : 2870
        

----------------------------------------
----------------------------------------

----------------------------------------

            End of greedy approaches. Exit while loop. I did: 14 iterations
            Density : 0.905 > 0.900
            It took me : 0.443 time
            Found matrix of size : (13, 237) and density : 0.905
            
----------------------------------------

 Calling exact approaches for QB clique discovery with delta = 0.0
----------------------------------------

----------------------------------------

I am in warm_exact before calling max_e_h $$$$$$$$$$$$$$$$$$

----------------------------------------------------------------------
Model status: Optimal
----------------------------------------------------------------------
Computed by max_e_h Objective Value : 3673.000 
Model status: Optimal
Solution saved to Experiments/prob_8/results_h_0_M_2.csv

----------------------------------------------------------------------
Stats
 Model solved : max_e_h  Local Time:  - (real) 0.07545 - (Local CPU) 0.07546 - (Global CPU) 0.07546

 Solve status: Optimal Objective value: 3673.00000 nb_rows 13 nb_cols 68
----------------------------------------

----------------------------------------
Results from updating data after solving model = max_e_h  delta =   0.0
Number of Remaining number  Rows  : 13
Number of Remaining number Columns : 68
Remaining  number Edges_0 P: 0 Remaining  number Edges_1 : 884 Density : 1.0 current obj value 3673.0
----------------------------------------

----------------------------------------

Exit from the heuristic (or exact  approach)  max_e_c  with delta= 0.0 Found matrix with rows_res of lenght = 13  and cols_res of lenght = 68
 A lower_bound = 884 has been found by max_e_h 
 Start computing max_er with lower_bound =  884. 
 !!!!!!!!!!!!!!!!!! I got a lower bound  884
----------------------------------------------------------------------
Model status: Optimal
----------------------------------------------------------------------
Computed Objective Value: 1140.000
----------------------------------------------------------------------
Model status: Optimal

----------------------------------------------------------------------
Stats
 Model solved : max_e_wr  Local Time:  - (real) 1.14620 - (Local CPU) 1.14620 - (Global CPU) 1.22166

 Solve status: Optimal Objective value: 1140.00000 nb_rows 10 nb_cols 114
----------------------------------------
*****Model in warm start is feasible. The solution has been improved !!!*** 
model status = 1, LPstatus Optimal
Solution saved to Experiments/prob_8/results_wstart_0_M_2.csv


-- Debugging Step: checking extracted solution after solving model**** -- max_e_wr
len_rows_res= 10
row_res= [0, 14, 31, 35, 4, 42, 52, 55, 57, 63]
len_cols_res= 114
cols_res= [1, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 114, 118, 121, 123, 124, 127, 132, 133, 134, 136, 138, 150, 153, 157, 17, 170, 206, 210, 218, 219, 22, 221, 224, 228, 229, 232, 233, 242, 244, 245, 247, 249, 251, 254, 258, 259, 260, 262, 265, 266, 267, 268, 270, 271, 272, 275, 276, 278, 279, 281, 282, 285, 289, 291, 293, 295, 296, 297, 3, 302, 305, 313, 315, 316, 329, 33, 349, 365, 366, 370, 371, 372, 376, 384, 397, 409, 428, 434, 438, 454, 457, 458, 46, 460, 462, 465, 48, 51, 54, 55, 56, 59, 65, 7, 79, 81, 85, 86, 87, 88, 90, 91, 99]
nb row_names_res, = 10
row_names_res = ['r0', 'r14', 'r31', 'r35', 'r4', 'r42', 'r52', 'r55', 'r57', 'r63']
col_names_res = ['2', '102', '103', '104', '105', '106', '107', '108', '109', '110', '111', '115', '119', '122', '124', '125', '128', '133', '134', '135', '137', '139', '151', '154', '158', '18', '171', '207', '211', '219', '220', '23', '222', '225', '229', '230', '233', '234', '243', '245', '246', '248', '250', '252', '255', '259', '260', '261', '263', '266', '267', '268', '269', '271', '272', '273', '276', '277', '279', '280', '282', '283', '286', '290', '292', '294', '296', '297', '298', '4', '303', '306', '314', '316', '317', '330', '34', '350', '366', '367', '371', '372', '373', '377', '385', '398', '410', '429', '435', '439', '455', '458', '459', '47', '461', '463', '466', '49', '52', '55', '56', '57', '60', '66', '8', '80', '82', '86', '87', '88', '89', '91', '92', '100']
 nb col_names_res, = 114

----------------------------------------

----------------------------------------
 results from updating data after solving model = max_e_wr  delta =   0.0
Number of Remaining  Rows  : 10
Number of Remaining number Columns : 114
Remaining  number Edges_0 P: 0 Remaining  number Edges_1 : 1140 Density : 1.0
----------------------------------------

----------------------------------------

Exit from the exact  approach  max_e_c  with delta= 0.0 Found matrix with rows_res of lenght = 10  and cols_res of lenght = 114 and density = 1.0
----------------------------------------

        Exit from the exact approach: max_e_c for matrix 2
        with delta =  0.0
        Found matrix of size : (10, 114)
        and density : 1.000
        and # of ones : 1140
        and Heuristic QBC time   : 0.07546
        and Global QBC  time  : 1.22166
        
 Remaining Rows  : [(0, 114), (4, 114), (14, 114), (31, 114), (35, 114), (42, 114), (52, 114), (55, 114), (57, 114), (63, 114)]
 Remaining  Cols  : [(1, 10), (3, 10), (7, 10), (17, 10), (22, 10), (33, 10), (46, 10), (48, 10), (51, 10), (54, 10), (55, 10), (56, 10), (59, 10), (65, 10), (79, 10), (81, 10), (85, 10), (86, 10), (87, 10), (88, 10), (90, 10), (91, 10), (99, 10), (101, 10), (102, 10), (103, 10), (104, 10), (105, 10), (106, 10), (107, 10), (108, 10), (109, 10), (110, 10), (114, 10), (118, 10), (121, 10), (123, 10), (124, 10), (127, 10), (132, 10), (133, 10), (134, 10), (136, 10), (138, 10), (150, 10), (153, 10), (157, 10), (170, 10), (206, 10), (210, 10), (218, 10), (219, 10), (221, 10), (224, 10), (228, 10), (229, 10), (232, 10), (233, 10), (242, 10), (244, 10), (245, 10), (247, 10), (249, 10), (251, 10), (254, 10), (258, 10), (259, 10), (260, 10), (262, 10), (265, 10), (266, 10), (267, 10), (268, 10), (270, 10), (271, 10), (272, 10), (275, 10), (276, 10), (278, 10), (279, 10), (281, 10), (282, 10), (285, 10), (289, 10), (291, 10), (293, 10), (295, 10), (296, 10), (297, 10), (302, 10), (305, 10), (313, 10), (315, 10), (316, 10), (329, 10), (349, 10), (365, 10), (366, 10), (370, 10), (371, 10), (372, 10), (376, 10), (384, 10), (397, 10), (409, 10), (428, 10), (434, 10), (438, 10), (454, 10), (457, 10), (458, 10), (460, 10), (462, 10), (465, 10)]

----------------------------------------------------------------------
 
    End of computations for matrix 2 in  data/prob_8.csv at level 0 and debug  2
    With  model: max_e_c and quasi-biclique error: 0.0 
    Size of Remaining matrix : (10,114), with  density : 1.0 and number of ones: 1140
    Global Time (in sec): 1.665
    Total Time in QBC approaches: 1.222
    Time in greedy approach: 0.443,  size of matrix found by greedy : (13,237) 
    With density : 0.905 and # ones : 2789 
    Time in heuristic only : 0.075 
    Time in warm start only : 1.146
    Number of iterations in greedy approach: 14
    Percentage of greedy approach run time in global run time : 26.61% 
    Percentage of heuristic run time in QBC run time : 6.18%
    With zero deletion rate (rho): 0.1 and threshold: 0.9
    
----------------------------------------------------------------------

I solved TASK NUMBER 2 with (edges: 18063) and obj: 1140  with solving TIME : 2.0154 sec
Task 2 with obj 1140) is the current record.

***QUEUE We currently process task number 3 with (edges 17219) selected_model max_e_c dec_conq 0 delta 0.0 threshold 0.9 rho 0.1 QBC_time 0.0 ***


----------------------------------------------------------------------
***Stats Current Input for matrix 3 in  data/prob_8.csv at level 0 and with model:  max_e_c***
Size of current matrix :  64 * 383 = 24512 ; dec_conq: 0
Prev_lower_bound :  1140 number input zeros :  7293 ; number input ones :  17219
rho =  0.1 ; delta :  0.0
Input density : 0.702 ; density_threshold: 0.90000
----------------------------------------------------------------------
End Current  Stats
----------------------------------------------------------------------


calling greedy approaches for zero deletion, density= 0.702 density  and density_threshold= 0.900


I am in the while loop with i= 1 density= 0.7024722584856397 and fixed_threshold= 0.9

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 1692.114
I solved model name = row_knapsack_problem for iteration i =  1 with obj value: 1692.1138686131385 KP time = 0.44296037359163165 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01697 - (Local CPU) 0.01697 - (Global CPU) 0.45993

 Solve status: Optimal Objective value: 1692.11387 nb_rows 56 nb_cols 383
----------------------------------------
----------------------------------------

        Updated data after iteration: 1 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (56, 383) and density : 0.714 and number of remaining ones : 15308
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(0, 53), (1, 48), (2, 51), (3, 50), (4, 51), (5, 46), (6, 47), (7, 51), (8, 45), (9, 47), (10, 41), (11, 43), (12, 42), (13, 40), (14, 39), (15, 39), (16, 45), (17, 56), (20, 50), (22, 50), (26, 24), (28, 38), (30, 45), (33, 49), (35, 45), (38, 20), (39, 39), (40, 45), (42, 44), (43, 42), (44, 39), (45, 44), (46, 49), (48, 46), (49, 31), (51, 47), (53, 45), (54, 44), (55, 42), (56, 45), (58, 44), (59, 38), (60, 42), (61, 34), (62, 33), (63, 36), (64, 39), (65, 48), (66, 48), (67, 45), (68, 41), (69, 48), (71, 45), (72, 41), (73, 42), (74, 33), (75, 43), (76, 33), (77, 42), (79, 36), (81, 36), (82, 36), (84, 27), (85, 44), (86, 47), (87, 46), (88, 49), (89, 46), (90, 48), (91, 45), (92, 25), (95, 36), (96, 38), (97, 40), (98, 33), (99, 44), (100, 48), (101, 44), (102, 47), (103, 44), (104, 42), (105, 47), (106, 42), (107, 47), (108, 39), (109, 44), (110, 39), (111, 46), (112, 41), (113, 30), (114, 47), (115, 41), (116, 45), (117, 45), (118, 41), (119, 26), (120, 38), (121, 39), (122, 33), (123, 35), (124, 36), (125, 40), (126, 43), (127, 43), (128, 45), (129, 32), (130, 39), (131, 43), (132, 42), (133, 50), (134, 45), (135, 46), (136, 34), (137, 29), (138, 45), (139, 15), (140, 41), (142, 43), (143, 38), (144, 30), (145, 44), (146, 28), (147, 44), (148, 20), (150, 45), (151, 45), (152, 43), (153, 48), (154, 38), (156, 47), (157, 44), (159, 38), (161, 35), (162, 42), (163, 39), (164, 38), (166, 35), (167, 37), (169, 40), (170, 48), (172, 37), (173, 36), (174, 33), (175, 46), (176, 41), (177, 37), (178, 32), (179, 42), (180, 31), (181, 31), (183, 30), (186, 41), (189, 44), (191, 42), (192, 40), (193, 41), (195, 38), (196, 38), (198, 44), (200, 41), (201, 40), (202, 44), (203, 43), (204, 47), (205, 49), (206, 49), (209, 40), (210, 43), (211, 43), (212, 43), (213, 31), (214, 42), (215, 40), (217, 29), (218, 51), (219, 39), (220, 29), (221, 50), (222, 31), (223, 33), (224, 47), (226, 42), (227, 41), (228, 44), (229, 44), (230, 35), (231, 45), (232, 41), (233, 44), (234, 35), (235, 34), (237, 45), (240, 40), (242, 50), (244, 45), (245, 44), (247, 46), (249, 51), (251, 42), (252, 46), (253, 28), (254, 52), (255, 33), (258, 47), (259, 47), (260, 44), (262, 49), (265, 43), (266, 43), (267, 39), (268, 43), (269, 32), (270, 44), (271, 48), (272, 50), (273, 30), (274, 48), (275, 47), (276, 45), (278, 41), (279, 45), (280, 23), (281, 41), (282, 44), (283, 47), (284, 42), (285, 48), (286, 21), (287, 20), (288, 28), (289, 41), (291, 49), (292, 23), (293, 49), (294, 26), (295, 48), (296, 49), (297, 43), (298, 29), (299, 32), (300, 52), (302, 43), (303, 42), (304, 23), (305, 45), (309, 46), (313, 45), (314, 48), (315, 55), (316, 44), (317, 40), (318, 22), (319, 42), (323, 26), (325, 39), (326, 22), (327, 37), (328, 39), (329, 54), (331, 35), (332, 27), (333, 41), (334, 25), (335, 38), (336, 42), (337, 38), (338, 36), (339, 43), (340, 28), (341, 31), (342, 38), (343, 29), (344, 47), (345, 27), (346, 46), (347, 28), (348, 47), (349, 48), (350, 29), (351, 28), (352, 33), (354, 36), (355, 35), (356, 28), (357, 39), (358, 32), (359, 40), (360, 14), (365, 48), (366, 46), (367, 48), (370, 48), (371, 46), (372, 47), (375, 11), (376, 44), (377, 22), (378, 35), (379, 15), (380, 26), (381, 34), (382, 42), (383, 29), (384, 37), (385, 40), (386, 46), (388, 46), (389, 40), (390, 38), (391, 45), (392, 46), (393, 43), (394, 35), (395, 34), (396, 39), (397, 47), (398, 32), (399, 38), (400, 40), (401, 47), (402, 20), (403, 20), (404, 23), (405, 29), (406, 51), (407, 20), (408, 43), (409, 54), (410, 48), (411, 46), (412, 18), (413, 44), (414, 18), (415, 33), (416, 44), (417, 26), (418, 21), (419, 37), (420, 38), (421, 49), (422, 42), (423, 30), (424, 43), (425, 39), (426, 42), (427, 43), (428, 46), (429, 33), (430, 39), (431, 39), (432, 47), (433, 38), (434, 47), (435, 22), (436, 34), (437, 21), (438, 42), (440, 54), (441, 43), (442, 42), (443, 25), (444, 42), (445, 44), (446, 45), (447, 43), (448, 45), (449, 38), (450, 39), (451, 49), (452, 42), (453, 37), (454, 46), (455, 48), (456, 46), (457, 51), (458, 49), (459, 51), (460, 49), (461, 44), (462, 49), (463, 41), (464, 44), (465, 49)]
nb_edges_0 = 6140 rho= 0.1 # of rows = 56 # of columns= 383 total_degree_0= 6140 RHS= 614.0
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  1 with obj value: 1692.1138686131385 KP time = 0.4599276656517759 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01710 - (Local CPU) 0.01710 - (Global CPU) 0.47703

 Solve status: Optimal Objective value: 305.05882 nb_rows 56 nb_cols 366
----------------------------------------
----------------------------------------

        Updated data after iteration: 1 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (56, 366) and density : 0.731 and number of remaining ones : 15308
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.731 density  and density_threshold= 0.900


I am in the while loop with i= 2 density= 0.7313622170179547 and fixed_threshold= 0.9

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 1046.112
I solved model name = row_knapsack_problem for iteration i =  2 with obj value: 1046.1121951219511 KP time = 0.4770314566558227 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01432 - (Local CPU) 0.01433 - (Global CPU) 0.49136

 Solve status: Optimal Objective value: 1046.11220 nb_rows 51 nb_cols 366
----------------------------------------
----------------------------------------

        Updated data after iteration: 2 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (51, 366) and density : 0.739 and number of remaining ones : 13789
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(0, 48), (1, 47), (2, 47), (3, 48), (4, 46), (5, 44), (6, 44), (7, 48), (8, 40), (9, 45), (10, 40), (11, 42), (12, 42), (13, 39), (14, 39), (15, 38), (16, 44), (17, 51), (20, 46), (22, 46), (26, 20), (28, 37), (30, 44), (33, 46), (35, 41), (39, 38), (40, 42), (42, 42), (43, 40), (44, 35), (45, 39), (46, 45), (48, 42), (49, 29), (51, 43), (53, 41), (54, 40), (55, 38), (56, 42), (58, 39), (59, 35), (60, 39), (61, 30), (62, 31), (63, 34), (64, 36), (65, 44), (66, 45), (67, 41), (68, 38), (69, 44), (71, 41), (72, 39), (73, 39), (74, 31), (75, 39), (76, 31), (77, 38), (79, 36), (81, 32), (82, 34), (84, 25), (85, 40), (86, 45), (87, 43), (88, 45), (89, 41), (90, 43), (91, 41), (92, 23), (95, 33), (96, 35), (97, 36), (98, 30), (99, 40), (100, 46), (101, 39), (102, 44), (103, 41), (104, 38), (105, 42), (106, 38), (107, 44), (108, 36), (109, 42), (110, 34), (111, 41), (112, 37), (113, 27), (114, 43), (115, 37), (116, 43), (117, 40), (118, 39), (119, 22), (120, 34), (121, 36), (122, 28), (123, 32), (124, 35), (125, 35), (126, 40), (127, 39), (128, 43), (129, 29), (130, 34), (131, 40), (132, 38), (133, 47), (134, 41), (135, 41), (136, 32), (137, 25), (138, 40), (140, 37), (142, 40), (143, 35), (144, 28), (145, 42), (146, 25), (147, 40), (150, 42), (151, 41), (152, 39), (153, 45), (154, 34), (156, 42), (157, 40), (159, 35), (161, 31), (162, 38), (163, 35), (164, 37), (166, 32), (167, 34), (169, 36), (170, 44), (172, 33), (173, 34), (174, 29), (175, 43), (176, 37), (177, 32), (178, 29), (179, 38), (180, 30), (181, 30), (183, 27), (186, 37), (189, 40), (191, 39), (192, 36), (193, 38), (195, 34), (196, 35), (198, 39), (200, 37), (201, 37), (202, 41), (203, 40), (204, 43), (205, 45), (206, 45), (209, 35), (210, 39), (211, 38), (212, 39), (213, 26), (214, 39), (215, 36), (217, 26), (218, 46), (219, 37), (220, 24), (221, 48), (222, 26), (223, 32), (224, 42), (226, 37), (227, 36), (228, 39), (229, 39), (230, 33), (231, 40), (232, 37), (233, 40), (234, 32), (235, 30), (237, 40), (240, 36), (242, 45), (244, 41), (245, 43), (247, 42), (249, 48), (251, 39), (252, 41), (253, 25), (254, 48), (255, 29), (258, 43), (259, 43), (260, 42), (262, 46), (265, 41), (266, 38), (267, 37), (268, 39), (269, 28), (270, 39), (271, 45), (272, 46), (273, 26), (274, 45), (275, 45), (276, 42), (278, 39), (279, 41), (280, 19), (281, 38), (282, 41), (283, 42), (284, 37), (285, 44), (288, 24), (289, 38), (291, 45), (292, 22), (293, 45), (294, 23), (295, 44), (296, 44), (297, 41), (298, 27), (299, 27), (300, 48), (302, 41), (303, 38), (304, 19), (305, 41), (309, 43), (313, 42), (314, 45), (315, 51), (316, 42), (317, 36), (318, 19), (319, 39), (323, 23), (325, 35), (327, 34), (328, 35), (329, 50), (331, 34), (332, 23), (333, 38), (334, 23), (335, 36), (336, 37), (337, 34), (338, 32), (339, 38), (340, 26), (341, 26), (342, 36), (343, 26), (344, 43), (345, 24), (346, 43), (347, 26), (348, 43), (349, 46), (350, 27), (351, 25), (352, 30), (354, 33), (355, 31), (356, 25), (357, 35), (358, 28), (359, 36), (365, 43), (366, 44), (367, 44), (370, 44), (371, 41), (372, 42), (376, 39), (377, 20), (378, 32), (380, 22), (381, 30), (382, 37), (383, 26), (384, 32), (385, 35), (386, 41), (388, 45), (389, 37), (390, 37), (391, 40), (392, 43), (393, 39), (394, 31), (395, 29), (396, 36), (397, 43), (398, 29), (399, 35), (400, 36), (401, 42), (404, 19), (405, 26), (406, 47), (408, 42), (409, 50), (410, 44), (411, 43), (413, 40), (415, 29), (416, 41), (417, 25), (419, 33), (420, 35), (421, 44), (422, 40), (423, 27), (424, 39), (425, 36), (426, 39), (427, 39), (428, 43), (429, 29), (430, 34), (431, 37), (432, 42), (433, 35), (434, 42), (436, 30), (438, 39), (440, 49), (441, 43), (442, 41), (443, 25), (444, 40), (445, 43), (446, 44), (447, 42), (448, 43), (449, 38), (450, 38), (451, 45), (452, 41), (453, 36), (454, 44), (455, 47), (456, 44), (457, 48), (458, 48), (459, 48), (460, 48), (461, 43), (462, 47), (463, 40), (464, 43), (465, 48)]
nb_edges_0 = 4877 rho= 0.1 # of rows = 51 # of columns= 366 total_degree_0= 4877 RHS= 487.70000000000005
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  2 with obj value: 1046.1121951219511 KP time = 0.4913568316260353 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01717 - (Local CPU) 0.01717 - (Global CPU) 0.50853

 Solve status: Optimal Objective value: 359.84444 nb_rows 51 nb_cols 349
----------------------------------------
----------------------------------------

        Updated data after iteration: 2 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (51, 349) and density : 0.754 and number of remaining ones : 13789
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.754 density  and density_threshold= 0.900


I am in the while loop with i= 3 density= 0.7539749424124951 and fixed_threshold= 0.9

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 899.110
I solved model name = row_knapsack_problem for iteration i =  3 with obj value: 899.1097345132742 KP time = 0.508525081560947 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01531 - (Local CPU) 0.01531 - (Global CPU) 0.52383

 Solve status: Optimal Objective value: 899.10973 nb_rows 47 nb_cols 349
----------------------------------------
----------------------------------------

        Updated data after iteration: 3 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (47, 349) and density : 0.761 and number of remaining ones : 12481
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(0, 44), (1, 45), (2, 43), (3, 45), (4, 42), (5, 42), (6, 40), (7, 46), (8, 37), (9, 44), (10, 39), (11, 40), (12, 39), (13, 38), (14, 38), (15, 38), (16, 42), (17, 47), (20, 42), (22, 43), (28, 34), (30, 41), (33, 42), (35, 39), (39, 34), (40, 38), (42, 38), (43, 36), (44, 32), (45, 37), (46, 41), (48, 39), (49, 26), (51, 40), (53, 38), (54, 36), (55, 37), (56, 39), (58, 37), (59, 33), (60, 36), (61, 28), (62, 28), (63, 31), (64, 32), (65, 40), (66, 41), (67, 38), (68, 36), (69, 40), (71, 37), (72, 36), (73, 35), (74, 29), (75, 36), (76, 27), (77, 35), (79, 34), (81, 32), (82, 30), (84, 21), (85, 37), (86, 42), (87, 40), (88, 41), (89, 38), (90, 39), (91, 39), (95, 31), (96, 31), (97, 36), (98, 27), (99, 36), (100, 43), (101, 37), (102, 40), (103, 37), (104, 36), (105, 38), (106, 34), (107, 40), (108, 34), (109, 39), (110, 32), (111, 39), (112, 33), (113, 25), (114, 41), (115, 34), (116, 40), (117, 37), (118, 38), (120, 30), (121, 35), (122, 27), (123, 31), (124, 34), (125, 32), (126, 36), (127, 36), (128, 40), (129, 26), (130, 30), (131, 36), (132, 36), (133, 43), (134, 39), (135, 37), (136, 30), (137, 22), (138, 39), (140, 35), (142, 37), (143, 33), (144, 26), (145, 38), (146, 24), (147, 37), (150, 40), (151, 38), (152, 37), (153, 42), (154, 31), (156, 39), (157, 37), (159, 32), (161, 28), (162, 36), (163, 32), (164, 34), (166, 30), (167, 30), (169, 33), (170, 40), (172, 30), (173, 31), (174, 27), (175, 39), (176, 34), (177, 30), (178, 26), (179, 34), (180, 29), (181, 28), (183, 25), (186, 35), (189, 37), (191, 36), (192, 34), (193, 36), (195, 31), (196, 33), (198, 36), (200, 37), (201, 35), (202, 37), (203, 37), (204, 40), (205, 41), (206, 41), (209, 32), (210, 36), (211, 35), (212, 36), (213, 24), (214, 36), (215, 33), (217, 23), (218, 42), (219, 35), (221, 44), (222, 24), (223, 30), (224, 39), (226, 34), (227, 33), (228, 36), (229, 38), (230, 29), (231, 36), (232, 35), (233, 37), (234, 30), (235, 29), (237, 37), (240, 35), (242, 42), (244, 39), (245, 41), (247, 39), (249, 45), (251, 38), (252, 39), (253, 23), (254, 44), (255, 26), (258, 40), (259, 40), (260, 40), (262, 43), (265, 38), (266, 36), (267, 34), (268, 37), (269, 24), (270, 36), (271, 42), (272, 43), (273, 22), (274, 42), (275, 41), (276, 38), (278, 37), (279, 38), (281, 36), (282, 39), (283, 38), (284, 35), (285, 41), (289, 36), (291, 42), (293, 43), (295, 41), (296, 41), (297, 38), (298, 24), (299, 23), (300, 44), (302, 38), (303, 37), (305, 38), (309, 41), (313, 39), (314, 42), (315, 47), (316, 39), (317, 35), (319, 37), (325, 34), (327, 32), (328, 33), (329, 47), (331, 31), (333, 35), (335, 34), (336, 34), (337, 31), (338, 31), (339, 35), (340, 25), (341, 25), (342, 34), (343, 23), (344, 39), (346, 40), (347, 23), (348, 41), (349, 42), (350, 24), (351, 22), (352, 28), (354, 30), (355, 28), (356, 21), (357, 32), (358, 27), (359, 34), (365, 41), (366, 40), (367, 40), (370, 42), (371, 39), (372, 40), (376, 36), (378, 29), (381, 29), (382, 34), (383, 24), (384, 31), (385, 32), (386, 38), (388, 41), (389, 35), (390, 35), (391, 36), (392, 40), (393, 36), (394, 31), (395, 27), (396, 33), (397, 40), (398, 26), (399, 33), (400, 34), (401, 39), (405, 23), (406, 43), (408, 39), (409, 46), (410, 41), (411, 40), (413, 39), (415, 28), (416, 37), (417, 22), (419, 31), (420, 31), (421, 40), (422, 36), (423, 27), (424, 35), (425, 34), (426, 37), (427, 35), (428, 39), (429, 27), (430, 32), (431, 34), (432, 39), (433, 31), (434, 40), (436, 27), (438, 37), (440, 46), (441, 41), (442, 39), (443, 24), (444, 37), (445, 41), (446, 43), (447, 40), (448, 41), (449, 36), (450, 37), (451, 41), (452, 39), (453, 34), (454, 42), (455, 45), (456, 43), (457, 46), (458, 46), (459, 45), (460, 46), (461, 41), (462, 45), (463, 38), (464, 41), (465, 45)]
nb_edges_0 = 3922 rho= 0.1 # of rows = 47 # of columns= 349 total_degree_0= 3922 RHS= 392.20000000000005
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  3 with obj value: 899.1097345132742 KP time = 0.5238322064979002 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01726 - (Local CPU) 0.01726 - (Global CPU) 0.54110

 Solve status: Optimal Objective value: 368.38261 nb_rows 47 nb_cols 332
----------------------------------------
----------------------------------------

        Updated data after iteration: 3 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (47, 332) and density : 0.775 and number of remaining ones : 12481
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.775 density  and density_threshold= 0.900


I am in the while loop with i= 4 density= 0.7749935913868239 and fixed_threshold= 0.9

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 819.986
I solved model name = row_knapsack_problem for iteration i =  4 with obj value: 819.9863157894738 KP time = 0.5410966655472293 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01468 - (Local CPU) 0.01468 - (Global CPU) 0.55578

 Solve status: Optimal Objective value: 819.98632 nb_rows 43 nb_cols 332
----------------------------------------
----------------------------------------

        Updated data after iteration: 4 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (43, 332) and density : 0.782 and number of remaining ones : 11161
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(0, 40), (1, 42), (2, 39), (3, 42), (4, 40), (5, 39), (6, 38), (7, 43), (8, 34), (9, 41), (10, 36), (11, 37), (12, 36), (13, 35), (14, 35), (15, 35), (16, 39), (17, 43), (20, 39), (22, 39), (28, 33), (30, 38), (33, 40), (35, 37), (39, 32), (40, 34), (42, 36), (43, 34), (44, 31), (45, 33), (46, 38), (48, 35), (49, 23), (51, 36), (53, 35), (54, 33), (55, 34), (56, 36), (58, 34), (59, 30), (60, 33), (61, 26), (62, 26), (63, 28), (64, 29), (65, 37), (66, 37), (67, 35), (68, 32), (69, 37), (71, 33), (72, 33), (73, 33), (74, 26), (75, 34), (76, 24), (77, 34), (79, 31), (81, 30), (82, 28), (85, 35), (86, 40), (87, 37), (88, 37), (89, 34), (90, 35), (91, 37), (95, 29), (96, 29), (97, 34), (98, 25), (99, 33), (100, 39), (101, 34), (102, 36), (103, 33), (104, 34), (105, 35), (106, 30), (107, 37), (108, 32), (109, 36), (110, 30), (111, 37), (112, 29), (113, 25), (114, 39), (115, 31), (116, 36), (117, 33), (118, 37), (120, 27), (121, 33), (122, 24), (123, 30), (124, 33), (125, 28), (126, 33), (127, 34), (128, 37), (129, 22), (130, 26), (131, 32), (132, 34), (133, 40), (134, 36), (135, 34), (136, 28), (138, 37), (140, 33), (142, 34), (143, 31), (144, 23), (145, 34), (147, 33), (150, 37), (151, 35), (152, 34), (153, 38), (154, 29), (156, 36), (157, 34), (159, 29), (161, 27), (162, 33), (163, 31), (164, 32), (166, 27), (167, 28), (169, 30), (170, 37), (172, 28), (173, 29), (174, 23), (175, 35), (176, 31), (177, 29), (178, 24), (179, 33), (180, 26), (181, 27), (183, 21), (186, 32), (189, 33), (191, 32), (192, 32), (193, 33), (195, 28), (196, 30), (198, 34), (200, 34), (201, 33), (202, 34), (203, 34), (204, 36), (205, 37), (206, 37), (209, 30), (210, 33), (211, 31), (212, 32), (214, 33), (215, 31), (218, 38), (219, 31), (221, 40), (222, 23), (223, 27), (224, 37), (226, 31), (227, 31), (228, 34), (229, 34), (230, 25), (231, 35), (232, 32), (233, 35), (234, 27), (235, 26), (237, 34), (240, 33), (242, 38), (244, 37), (245, 38), (247, 35), (249, 41), (251, 35), (252, 35), (254, 41), (255, 23), (258, 38), (259, 37), (260, 37), (262, 39), (265, 35), (266, 34), (267, 31), (268, 33), (269, 22), (270, 34), (271, 38), (272, 40), (274, 38), (275, 38), (276, 34), (278, 35), (279, 36), (281, 35), (282, 37), (283, 35), (284, 33), (285, 38), (289, 34), (291, 40), (293, 40), (295, 41), (296, 38), (297, 36), (300, 40), (302, 34), (303, 33), (305, 37), (309, 40), (313, 36), (314, 40), (315, 43), (316, 35), (317, 31), (319, 33), (325, 30), (327, 28), (328, 30), (329, 43), (331, 27), (333, 31), (335, 31), (336, 31), (337, 30), (338, 27), (339, 33), (340, 21), (341, 24), (342, 34), (344, 38), (346, 39), (348, 38), (349, 40), (352, 26), (354, 26), (355, 26), (357, 28), (358, 25), (359, 30), (365, 39), (366, 38), (367, 38), (370, 40), (371, 37), (372, 39), (376, 35), (378, 26), (381, 28), (382, 32), (384, 29), (385, 29), (386, 35), (388, 38), (389, 31), (390, 31), (391, 32), (392, 36), (393, 33), (394, 30), (395, 26), (396, 30), (397, 38), (398, 23), (399, 31), (400, 32), (401, 35), (406, 39), (408, 38), (409, 43), (410, 37), (411, 36), (413, 36), (415, 26), (416, 35), (419, 29), (420, 28), (421, 37), (422, 32), (423, 25), (424, 32), (425, 31), (426, 34), (427, 32), (428, 35), (429, 25), (430, 29), (431, 31), (432, 35), (433, 29), (434, 37), (436, 24), (438, 34), (440, 42), (441, 38), (442, 36), (443, 22), (444, 34), (445, 38), (446, 40), (447, 37), (448, 39), (449, 33), (450, 34), (451, 38), (452, 37), (453, 31), (454, 38), (455, 42), (456, 40), (457, 42), (458, 43), (459, 42), (460, 43), (461, 39), (462, 42), (463, 35), (464, 38), (465, 42)]
nb_edges_0 = 3115 rho= 0.1 # of rows = 43 # of columns= 332 total_degree_0= 3115 RHS= 311.5
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  4 with obj value: 819.9863157894738 KP time = 0.5557758325012401 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01697 - (Local CPU) 0.01697 - (Global CPU) 0.57275

 Solve status: Optimal Objective value: 352.73684 nb_rows 43 nb_cols 316
----------------------------------------
----------------------------------------

        Updated data after iteration: 4 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (43, 316) and density : 0.794 and number of remaining ones : 11161
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.794 density  and density_threshold= 0.900


I am in the while loop with i= 5 density= 0.7944509861642626 and fixed_threshold= 0.9

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 702.095
I solved model name = row_knapsack_problem for iteration i =  5 with obj value: 702.0954545454546 KP time = 0.5727506234543398 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01487 - (Local CPU) 0.01487 - (Global CPU) 0.58762

 Solve status: Optimal Objective value: 702.09545 nb_rows 39 nb_cols 316
----------------------------------------
----------------------------------------

        Updated data after iteration: 5 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (39, 316) and density : 0.802 and number of remaining ones : 9889
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(0, 36), (1, 38), (2, 36), (3, 38), (4, 36), (5, 35), (6, 34), (7, 39), (8, 31), (9, 37), (10, 32), (11, 33), (12, 32), (13, 31), (14, 32), (15, 31), (16, 35), (17, 39), (20, 35), (22, 37), (28, 30), (30, 34), (33, 37), (35, 33), (39, 28), (40, 31), (42, 32), (43, 30), (44, 31), (45, 29), (46, 34), (48, 31), (51, 32), (53, 31), (54, 29), (55, 33), (56, 32), (58, 33), (59, 26), (60, 30), (61, 26), (62, 25), (63, 28), (64, 25), (65, 33), (66, 33), (67, 31), (68, 28), (69, 33), (71, 30), (72, 33), (73, 30), (74, 22), (75, 31), (77, 30), (79, 27), (81, 30), (82, 24), (85, 31), (86, 36), (87, 33), (88, 33), (89, 31), (90, 31), (91, 35), (95, 27), (96, 25), (97, 33), (98, 22), (99, 30), (100, 35), (101, 32), (102, 32), (103, 29), (104, 32), (105, 31), (106, 27), (107, 34), (108, 30), (109, 32), (110, 28), (111, 35), (112, 25), (113, 24), (114, 37), (115, 27), (116, 32), (117, 31), (118, 35), (120, 23), (121, 32), (123, 29), (124, 33), (125, 24), (126, 29), (127, 30), (128, 33), (130, 22), (131, 28), (132, 34), (133, 36), (134, 36), (135, 30), (136, 28), (138, 37), (140, 33), (142, 30), (143, 31), (145, 30), (147, 30), (150, 36), (151, 34), (152, 33), (153, 34), (154, 29), (156, 32), (157, 31), (159, 25), (161, 26), (162, 30), (163, 30), (164, 28), (166, 23), (167, 28), (169, 27), (170, 33), (172, 26), (173, 28), (175, 32), (176, 29), (177, 29), (179, 31), (180, 22), (181, 26), (186, 29), (189, 29), (191, 29), (192, 29), (193, 30), (195, 26), (196, 29), (198, 32), (200, 31), (201, 31), (202, 30), (203, 30), (204, 32), (205, 34), (206, 35), (209, 29), (210, 30), (211, 29), (212, 29), (214, 30), (215, 30), (218, 35), (219, 28), (221, 36), (223, 24), (224, 35), (226, 27), (227, 28), (228, 31), (229, 32), (230, 21), (231, 34), (232, 30), (233, 33), (234, 26), (235, 24), (237, 32), (240, 30), (242, 35), (244, 35), (245, 37), (247, 33), (249, 38), (251, 34), (252, 33), (254, 37), (258, 35), (259, 34), (260, 36), (262, 35), (265, 33), (266, 31), (267, 29), (268, 29), (270, 34), (271, 34), (272, 36), (274, 34), (275, 35), (276, 30), (278, 31), (279, 34), (281, 33), (282, 33), (283, 33), (284, 32), (285, 35), (289, 34), (291, 36), (293, 36), (295, 38), (296, 36), (297, 33), (300, 36), (302, 33), (303, 30), (305, 34), (309, 37), (313, 35), (314, 37), (315, 39), (316, 35), (317, 31), (319, 31), (325, 29), (327, 27), (328, 30), (329, 39), (331, 27), (333, 30), (335, 30), (336, 28), (337, 27), (338, 26), (339, 29), (342, 30), (344, 34), (346, 36), (348, 34), (349, 37), (352, 22), (354, 22), (355, 22), (357, 24), (358, 21), (359, 26), (365, 35), (366, 35), (367, 34), (370, 36), (371, 34), (372, 36), (376, 32), (378, 24), (381, 26), (382, 30), (384, 27), (385, 26), (386, 33), (388, 34), (389, 28), (390, 28), (391, 28), (392, 32), (393, 31), (394, 29), (395, 25), (396, 27), (397, 35), (399, 28), (400, 29), (401, 32), (406, 35), (408, 36), (409, 39), (410, 33), (411, 32), (413, 33), (415, 25), (416, 31), (419, 28), (420, 27), (421, 33), (422, 28), (423, 23), (424, 28), (425, 28), (426, 31), (427, 28), (428, 31), (429, 25), (430, 26), (431, 27), (432, 32), (433, 27), (434, 34), (438, 32), (440, 38), (441, 34), (442, 32), (444, 31), (445, 34), (446, 36), (447, 33), (448, 35), (449, 29), (450, 30), (451, 34), (452, 33), (453, 27), (454, 34), (455, 38), (456, 37), (457, 38), (458, 39), (459, 38), (460, 39), (461, 35), (462, 39), (463, 32), (464, 35), (465, 38)]
nb_edges_0 = 2435 rho= 0.1 # of rows = 39 # of columns= 316 total_degree_0= 2435 RHS= 243.5
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  5 with obj value: 702.0954545454546 KP time = 0.5876207904657349 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01679 - (Local CPU) 0.01679 - (Global CPU) 0.60441

 Solve status: Optimal Objective value: 329.80000 nb_rows 39 nb_cols 301
----------------------------------------
----------------------------------------

        Updated data after iteration: 5 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (39, 301) and density : 0.814 and number of remaining ones : 9889
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.814 density  and density_threshold= 0.900


I am in the while loop with i= 6 density= 0.8136979299769997 and fixed_threshold= 0.9

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 614.869
I solved model name = row_knapsack_problem for iteration i =  6 with obj value: 614.8693333333333 KP time = 0.6044124574400485 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01477 - (Local CPU) 0.01477 - (Global CPU) 0.61918

 Solve status: Optimal Objective value: 614.86933 nb_rows 36 nb_cols 301
----------------------------------------
----------------------------------------

        Updated data after iteration: 6 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (36, 301) and density : 0.820 and number of remaining ones : 8885
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(0, 34), (1, 35), (2, 34), (3, 35), (4, 33), (5, 32), (6, 31), (7, 36), (8, 29), (9, 34), (10, 30), (11, 30), (12, 30), (13, 28), (14, 29), (15, 29), (16, 32), (17, 36), (20, 32), (22, 34), (28, 28), (30, 32), (33, 35), (35, 30), (39, 26), (40, 29), (42, 30), (43, 28), (44, 29), (45, 27), (46, 31), (48, 29), (51, 29), (53, 28), (54, 26), (55, 31), (56, 29), (58, 32), (59, 25), (60, 30), (61, 23), (62, 24), (63, 27), (64, 23), (65, 30), (66, 30), (67, 29), (68, 28), (69, 31), (71, 27), (72, 31), (73, 28), (75, 28), (77, 28), (79, 25), (81, 30), (85, 29), (86, 33), (87, 31), (88, 30), (89, 30), (90, 28), (91, 33), (95, 26), (96, 22), (97, 32), (99, 29), (100, 32), (101, 30), (102, 30), (103, 28), (104, 31), (105, 30), (106, 25), (107, 32), (108, 28), (109, 29), (110, 28), (111, 33), (112, 22), (113, 24), (114, 35), (115, 24), (116, 30), (117, 28), (118, 33), (121, 30), (123, 27), (124, 31), (125, 22), (126, 26), (127, 28), (128, 30), (131, 26), (132, 32), (133, 33), (134, 33), (135, 28), (136, 26), (138, 35), (140, 31), (142, 28), (143, 30), (145, 27), (147, 29), (150, 34), (151, 32), (152, 32), (153, 32), (154, 26), (156, 29), (157, 28), (159, 22), (161, 24), (162, 28), (163, 28), (164, 26), (167, 27), (169, 27), (170, 30), (172, 25), (173, 26), (175, 29), (176, 27), (177, 29), (179, 29), (181, 24), (186, 28), (189, 26), (191, 27), (192, 27), (193, 27), (195, 23), (196, 28), (198, 30), (200, 29), (201, 28), (202, 27), (203, 29), (204, 29), (205, 31), (206, 32), (209, 26), (210, 28), (211, 27), (212, 27), (214, 29), (215, 27), (218, 32), (219, 26), (221, 33), (224, 32), (226, 24), (227, 26), (228, 29), (229, 30), (231, 32), (232, 29), (233, 30), (234, 23), (235, 23), (237, 31), (240, 28), (242, 33), (244, 33), (245, 35), (247, 31), (249, 35), (251, 33), (252, 30), (254, 34), (258, 33), (259, 32), (260, 33), (262, 32), (265, 31), (266, 28), (267, 27), (268, 27), (270, 32), (271, 31), (272, 34), (274, 31), (275, 32), (276, 29), (278, 30), (279, 32), (281, 31), (282, 31), (283, 31), (284, 31), (285, 33), (289, 31), (291, 33), (293, 34), (295, 35), (296, 33), (297, 31), (300, 33), (302, 32), (303, 29), (305, 31), (309, 34), (313, 33), (314, 34), (315, 36), (316, 33), (317, 30), (319, 31), (325, 29), (327, 27), (328, 29), (329, 36), (331, 27), (333, 29), (335, 29), (336, 26), (337, 25), (338, 26), (339, 26), (342, 27), (344, 31), (346, 33), (348, 31), (349, 34), (357, 22), (359, 23), (365, 32), (366, 32), (367, 31), (370, 33), (371, 31), (372, 33), (376, 29), (381, 24), (382, 28), (384, 25), (385, 23), (386, 31), (388, 31), (389, 25), (390, 26), (391, 25), (392, 29), (393, 30), (394, 27), (395, 24), (396, 25), (397, 32), (399, 25), (400, 27), (401, 30), (406, 32), (408, 33), (409, 36), (410, 31), (411, 30), (413, 31), (415, 24), (416, 28), (419, 26), (420, 26), (421, 30), (422, 28), (424, 28), (425, 26), (426, 28), (427, 26), (428, 30), (429, 23), (430, 23), (431, 25), (432, 29), (433, 25), (434, 31), (438, 30), (440, 35), (441, 31), (442, 29), (444, 28), (445, 31), (446, 33), (447, 30), (448, 32), (449, 26), (450, 28), (451, 31), (452, 30), (453, 25), (454, 31), (455, 35), (456, 34), (457, 35), (458, 36), (459, 35), (460, 36), (461, 32), (462, 36), (463, 30), (464, 33), (465, 35)]
nb_edges_0 = 1951 rho= 0.1 # of rows = 36 # of columns= 301 total_degree_0= 1951 RHS= 195.10000000000002
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  6 with obj value: 614.8693333333333 KP time = 0.619183165486902 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01633 - (Local CPU) 0.01633 - (Global CPU) 0.63551

 Solve status: Optimal Objective value: 333.20000 nb_rows 36 nb_cols 286
----------------------------------------
----------------------------------------

        Updated data after iteration: 6 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (36, 286) and density : 0.830 and number of remaining ones : 8885
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.830 density  and density_threshold= 0.900


I am in the while loop with i= 7 density= 0.8298368298368298 and fixed_threshold= 0.9

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 564.131
I solved model name = row_knapsack_problem for iteration i =  7 with obj value: 564.131343283582 KP time = 0.6355121654924005 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01424 - (Local CPU) 0.01424 - (Global CPU) 0.64975

 Solve status: Optimal Objective value: 564.13134 nb_rows 33 nb_cols 286
----------------------------------------
----------------------------------------

        Updated data after iteration: 7 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (33, 286) and density : 0.836 and number of remaining ones : 7889
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(0, 31), (1, 32), (2, 31), (3, 33), (4, 30), (5, 29), (6, 28), (7, 33), (8, 26), (9, 31), (10, 27), (11, 27), (12, 28), (13, 26), (14, 27), (15, 27), (16, 29), (17, 33), (20, 29), (22, 31), (28, 26), (30, 29), (33, 32), (35, 27), (39, 23), (40, 27), (42, 27), (43, 25), (44, 28), (45, 26), (46, 29), (48, 26), (51, 27), (53, 26), (54, 24), (55, 28), (56, 26), (58, 31), (59, 25), (60, 27), (62, 22), (63, 26), (65, 30), (66, 28), (67, 27), (68, 26), (69, 29), (71, 25), (72, 28), (73, 26), (75, 26), (77, 26), (79, 24), (81, 28), (85, 28), (86, 31), (87, 29), (88, 27), (89, 28), (90, 26), (91, 30), (95, 24), (97, 30), (99, 27), (100, 30), (101, 27), (102, 27), (103, 26), (104, 29), (105, 27), (106, 23), (107, 30), (108, 26), (109, 26), (110, 26), (111, 30), (113, 22), (114, 32), (115, 21), (116, 28), (117, 25), (118, 31), (121, 27), (123, 26), (124, 29), (126, 25), (127, 27), (128, 28), (131, 24), (132, 30), (133, 30), (134, 32), (135, 26), (136, 23), (138, 32), (140, 29), (142, 26), (143, 27), (145, 25), (147, 27), (150, 31), (151, 29), (152, 29), (153, 29), (154, 24), (156, 27), (157, 26), (161, 22), (162, 26), (163, 27), (164, 25), (167, 24), (169, 25), (170, 28), (172, 23), (173, 23), (175, 27), (176, 25), (177, 26), (179, 26), (181, 24), (186, 26), (189, 23), (191, 24), (192, 26), (193, 24), (196, 26), (198, 28), (200, 27), (201, 26), (202, 25), (203, 27), (204, 27), (205, 29), (206, 29), (209, 25), (210, 25), (211, 25), (212, 24), (214, 27), (215, 25), (218, 29), (219, 25), (221, 30), (224, 29), (226, 22), (227, 25), (228, 27), (229, 28), (231, 30), (232, 27), (233, 29), (237, 30), (240, 27), (242, 30), (244, 31), (245, 32), (247, 29), (249, 32), (251, 30), (252, 27), (254, 31), (258, 30), (259, 29), (260, 30), (262, 31), (265, 30), (266, 26), (267, 26), (268, 26), (270, 30), (271, 30), (272, 31), (274, 29), (275, 30), (276, 27), (278, 28), (279, 30), (281, 30), (282, 29), (283, 28), (284, 28), (285, 30), (289, 29), (291, 31), (293, 31), (295, 32), (296, 31), (297, 28), (300, 31), (302, 29), (303, 26), (305, 30), (309, 31), (313, 31), (314, 31), (315, 33), (316, 31), (317, 28), (319, 28), (325, 28), (327, 26), (328, 28), (329, 33), (331, 26), (333, 28), (335, 28), (336, 23), (337, 23), (338, 25), (339, 24), (342, 24), (344, 28), (346, 31), (348, 28), (349, 31), (365, 30), (366, 29), (367, 29), (370, 31), (371, 29), (372, 31), (376, 27), (382, 26), (384, 24), (386, 28), (388, 29), (389, 23), (390, 23), (391, 23), (392, 27), (393, 27), (394, 24), (395, 23), (396, 22), (397, 29), (399, 23), (400, 24), (401, 27), (406, 29), (408, 30), (409, 33), (410, 28), (411, 27), (413, 28), (415, 22), (416, 25), (419, 23), (420, 24), (421, 28), (422, 26), (424, 26), (425, 24), (426, 26), (427, 24), (428, 28), (431, 24), (432, 26), (433, 24), (434, 28), (438, 27), (440, 32), (441, 28), (442, 27), (444, 25), (445, 28), (446, 30), (447, 28), (448, 29), (449, 23), (450, 26), (451, 28), (452, 27), (453, 23), (454, 28), (455, 32), (456, 31), (457, 32), (458, 33), (459, 32), (460, 33), (461, 30), (462, 33), (463, 27), (464, 30), (465, 32)]
nb_edges_0 = 1549 rho= 0.1 # of rows = 33 # of columns= 286 total_degree_0= 1549 RHS= 154.9
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  7 with obj value: 564.131343283582 KP time = 0.6497541235294193 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01636 - (Local CPU) 0.01636 - (Global CPU) 0.66612

 Solve status: Optimal Objective value: 329.87000 nb_rows 33 nb_cols 271
----------------------------------------
----------------------------------------

        Updated data after iteration: 7 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (33, 271) and density : 0.844 and number of remaining ones : 7889
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.844 density  and density_threshold= 0.900


I am in the while loop with i= 8 density= 0.8444593536844459 and fixed_threshold= 0.9

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 490.631
I solved model name = row_knapsack_problem for iteration i =  8 with obj value: 490.63050847457623 KP time = 0.6661173735046759 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01491 - (Local CPU) 0.01491 - (Global CPU) 0.68103

 Solve status: Optimal Objective value: 490.63051 nb_rows 30 nb_cols 271
----------------------------------------
----------------------------------------

        Updated data after iteration: 8 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (30, 271) and density : 0.851 and number of remaining ones : 6918
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(0, 28), (1, 29), (2, 28), (3, 30), (4, 27), (5, 26), (6, 25), (7, 30), (8, 24), (9, 28), (10, 25), (11, 26), (12, 25), (13, 23), (14, 24), (15, 24), (16, 27), (17, 30), (20, 27), (22, 28), (28, 24), (30, 27), (33, 29), (35, 25), (40, 24), (42, 24), (43, 22), (44, 26), (45, 24), (46, 27), (48, 25), (51, 25), (53, 24), (54, 23), (55, 26), (56, 25), (58, 28), (59, 24), (60, 25), (63, 26), (65, 29), (66, 25), (67, 25), (68, 23), (69, 26), (71, 23), (72, 26), (73, 26), (75, 24), (77, 25), (79, 23), (81, 25), (85, 26), (86, 28), (87, 27), (88, 25), (89, 25), (90, 24), (91, 27), (95, 22), (97, 27), (99, 26), (100, 27), (101, 25), (102, 27), (103, 26), (104, 26), (105, 26), (107, 27), (108, 24), (109, 24), (110, 25), (111, 27), (114, 29), (116, 25), (117, 22), (118, 28), (121, 25), (123, 24), (124, 26), (126, 22), (127, 24), (128, 25), (131, 21), (132, 28), (133, 27), (134, 29), (135, 23), (138, 29), (140, 26), (142, 24), (143, 24), (145, 23), (147, 25), (150, 29), (151, 26), (152, 27), (153, 27), (154, 22), (156, 24), (157, 24), (162, 23), (163, 24), (164, 22), (167, 22), (169, 24), (170, 26), (172, 22), (173, 20), (175, 25), (176, 22), (177, 24), (179, 24), (181, 21), (186, 23), (191, 23), (192, 23), (193, 22), (196, 24), (198, 25), (200, 25), (201, 23), (202, 25), (203, 24), (204, 25), (205, 27), (206, 26), (209, 22), (210, 22), (211, 23), (212, 22), (214, 24), (215, 24), (218, 26), (219, 23), (221, 27), (224, 27), (227, 24), (228, 24), (229, 26), (231, 27), (232, 25), (233, 26), (237, 28), (240, 24), (242, 28), (244, 29), (245, 30), (247, 27), (249, 30), (251, 29), (252, 26), (254, 29), (258, 28), (259, 28), (260, 28), (262, 28), (265, 27), (266, 24), (267, 24), (268, 24), (270, 27), (271, 27), (272, 28), (274, 27), (275, 27), (276, 25), (278, 26), (279, 27), (281, 27), (282, 27), (283, 25), (284, 26), (285, 28), (289, 26), (291, 28), (293, 29), (295, 29), (296, 29), (297, 25), (300, 28), (302, 26), (303, 23), (305, 27), (309, 28), (313, 30), (314, 28), (315, 30), (316, 29), (317, 26), (319, 26), (325, 27), (327, 25), (328, 27), (329, 30), (331, 25), (333, 27), (335, 27), (338, 24), (339, 21), (342, 21), (344, 25), (346, 28), (348, 26), (349, 29), (365, 27), (366, 26), (367, 26), (370, 28), (371, 26), (372, 28), (376, 24), (382, 25), (384, 23), (386, 25), (388, 26), (389, 21), (390, 20), (391, 21), (392, 25), (393, 24), (394, 23), (397, 28), (399, 22), (400, 23), (401, 24), (406, 26), (408, 27), (409, 30), (410, 25), (411, 24), (413, 26), (416, 23), (419, 21), (420, 22), (421, 25), (422, 23), (424, 24), (425, 22), (426, 24), (427, 21), (428, 26), (431, 21), (432, 25), (433, 21), (434, 26), (438, 26), (440, 29), (441, 25), (442, 24), (444, 22), (445, 26), (446, 27), (447, 25), (448, 27), (449, 20), (450, 23), (451, 25), (452, 24), (454, 25), (455, 29), (456, 28), (457, 29), (458, 30), (459, 29), (460, 30), (461, 27), (462, 30), (463, 25), (464, 27), (465, 30)]
nb_edges_0 = 1212 rho= 0.1 # of rows = 30 # of columns= 271 total_degree_0= 1212 RHS= 121.2
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  8 with obj value: 490.63050847457623 KP time = 0.681028206483461 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01630 - (Local CPU) 0.01630 - (Global CPU) 0.69733

 Solve status: Optimal Objective value: 273.30000 nb_rows 30 nb_cols 257
----------------------------------------
----------------------------------------

        Updated data after iteration: 8 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (30, 257) and density : 0.859 and number of remaining ones : 6918
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.859 density  and density_threshold= 0.900


I am in the while loop with i= 9 density= 0.8594033722438392 and fixed_threshold= 0.9

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 427.346
I solved model name = row_knapsack_problem for iteration i =  9 with obj value: 427.34615384615387 KP time = 0.6973278314108029 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01437 - (Local CPU) 0.01437 - (Global CPU) 0.71170

 Solve status: Optimal Objective value: 427.34615 nb_rows 27 nb_cols 257
----------------------------------------
----------------------------------------

        Updated data after iteration: 9 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (27, 257) and density : 0.866 and number of remaining ones : 6011
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(0, 25), (1, 26), (2, 26), (3, 27), (4, 24), (5, 25), (6, 23), (7, 27), (8, 21), (9, 25), (10, 22), (11, 23), (12, 22), (13, 21), (14, 21), (15, 21), (16, 24), (17, 27), (20, 24), (22, 25), (28, 21), (30, 24), (33, 26), (35, 22), (40, 21), (42, 21), (43, 19), (44, 23), (45, 21), (46, 24), (48, 22), (51, 24), (53, 23), (54, 21), (55, 25), (56, 24), (58, 25), (59, 23), (60, 23), (63, 23), (65, 26), (66, 22), (67, 23), (68, 21), (69, 24), (71, 20), (72, 23), (73, 24), (75, 21), (77, 24), (79, 22), (81, 23), (85, 25), (86, 25), (87, 24), (88, 22), (89, 23), (90, 22), (91, 24), (95, 19), (97, 24), (99, 24), (100, 24), (101, 22), (102, 24), (103, 23), (104, 23), (105, 25), (107, 24), (108, 22), (109, 22), (110, 23), (111, 24), (114, 26), (116, 22), (118, 25), (121, 22), (123, 21), (124, 23), (126, 19), (127, 21), (128, 23), (132, 25), (133, 24), (134, 26), (135, 21), (138, 26), (140, 23), (142, 22), (143, 22), (145, 21), (147, 23), (150, 26), (151, 24), (152, 25), (153, 25), (154, 20), (156, 22), (157, 21), (162, 22), (163, 21), (164, 19), (167, 20), (169, 22), (170, 24), (172, 19), (175, 23), (176, 20), (177, 22), (179, 21), (186, 21), (191, 22), (192, 22), (193, 20), (196, 23), (198, 22), (200, 22), (201, 22), (202, 22), (203, 22), (204, 23), (205, 24), (206, 24), (209, 20), (210, 20), (211, 21), (212, 21), (214, 22), (215, 22), (218, 23), (219, 21), (221, 25), (224, 25), (227, 22), (228, 23), (229, 23), (231, 24), (232, 24), (233, 24), (237, 26), (240, 22), (242, 26), (244, 26), (245, 27), (247, 24), (249, 27), (251, 27), (252, 24), (254, 26), (258, 26), (259, 26), (260, 25), (262, 26), (265, 25), (266, 21), (267, 23), (268, 23), (270, 26), (271, 25), (272, 25), (274, 25), (275, 24), (276, 23), (278, 25), (279, 24), (281, 25), (282, 25), (283, 23), (284, 24), (285, 25), (289, 25), (291, 26), (293, 27), (295, 27), (296, 27), (297, 24), (300, 25), (302, 25), (303, 21), (305, 25), (309, 25), (313, 27), (314, 25), (315, 27), (316, 26), (317, 23), (319, 23), (325, 24), (327, 23), (328, 24), (329, 27), (331, 22), (333, 24), (335, 24), (338, 21), (344, 24), (346, 26), (348, 23), (349, 27), (365, 26), (366, 24), (367, 24), (370, 26), (371, 24), (372, 26), (376, 23), (382, 24), (384, 22), (386, 23), (388, 24), (392, 22), (393, 21), (394, 20), (397, 25), (399, 20), (400, 20), (401, 21), (406, 23), (408, 24), (409, 27), (410, 22), (411, 21), (413, 23), (416, 22), (420, 19), (421, 22), (422, 21), (424, 21), (425, 19), (426, 23), (428, 23), (432, 22), (434, 24), (438, 24), (440, 26), (441, 23), (442, 21), (444, 19), (445, 23), (446, 24), (447, 23), (448, 24), (450, 20), (451, 22), (452, 22), (454, 22), (455, 26), (456, 26), (457, 26), (458, 27), (459, 26), (460, 27), (461, 26), (462, 27), (463, 24), (464, 24), (465, 27)]
nb_edges_0 = 928 rho= 0.1 # of rows = 27 # of columns= 257 total_degree_0= 928 RHS= 92.80000000000001
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  9 with obj value: 427.34615384615387 KP time = 0.7117002484155819 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01595 - (Local CPU) 0.01595 - (Global CPU) 0.72765

 Solve status: Optimal Objective value: 234.28571 nb_rows 27 nb_cols 244
----------------------------------------
----------------------------------------

        Updated data after iteration: 9 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (27, 244) and density : 0.874 and number of remaining ones : 6011
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.874 density  and density_threshold= 0.900


I am in the while loop with i= 10 density= 0.8741651487553127 and fixed_threshold= 0.9

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 342.283
I solved model name = row_knapsack_problem for iteration i =  10 with obj value: 342.2829787234043 KP time = 0.7276487903436646 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01447 - (Local CPU) 0.01448 - (Global CPU) 0.74212

 Solve status: Optimal Objective value: 342.28298 nb_rows 25 nb_cols 244
----------------------------------------
----------------------------------------

        Updated data after iteration: 10 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (25, 244) and density : 0.880 and number of remaining ones : 5366
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(0, 23), (1, 24), (2, 24), (3, 25), (4, 22), (5, 23), (6, 21), (7, 25), (8, 19), (9, 23), (10, 20), (11, 21), (12, 20), (13, 19), (14, 19), (15, 20), (16, 22), (17, 25), (20, 22), (22, 24), (28, 20), (30, 23), (33, 24), (35, 21), (40, 20), (42, 20), (44, 22), (45, 20), (46, 23), (48, 22), (51, 23), (53, 21), (54, 20), (55, 23), (56, 23), (58, 23), (59, 21), (60, 21), (63, 23), (65, 25), (66, 20), (67, 22), (68, 20), (69, 22), (71, 19), (72, 22), (73, 23), (75, 21), (77, 22), (79, 22), (81, 21), (85, 24), (86, 23), (87, 23), (88, 21), (89, 21), (90, 20), (91, 22), (97, 22), (99, 22), (100, 22), (101, 21), (102, 23), (103, 22), (104, 22), (105, 23), (107, 23), (108, 21), (109, 22), (110, 22), (111, 22), (114, 24), (116, 20), (118, 23), (121, 21), (123, 19), (124, 21), (127, 19), (128, 21), (132, 24), (133, 22), (134, 24), (135, 19), (138, 24), (140, 21), (142, 21), (143, 20), (145, 21), (147, 22), (150, 25), (151, 23), (152, 23), (153, 24), (154, 18), (156, 21), (157, 21), (162, 20), (163, 19), (169, 20), (170, 23), (175, 21), (176, 19), (177, 21), (179, 19), (186, 19), (191, 22), (192, 21), (193, 18), (196, 21), (198, 20), (200, 21), (201, 21), (202, 22), (203, 21), (204, 22), (205, 22), (206, 24), (211, 21), (212, 20), (214, 20), (215, 21), (218, 21), (219, 20), (221, 24), (224, 25), (227, 20), (228, 22), (229, 21), (231, 22), (232, 22), (233, 22), (237, 24), (240, 20), (242, 24), (244, 24), (245, 25), (247, 23), (249, 25), (251, 25), (252, 22), (254, 24), (258, 24), (259, 25), (260, 23), (262, 24), (265, 23), (266, 20), (267, 21), (268, 21), (270, 25), (271, 23), (272, 24), (274, 23), (275, 22), (276, 22), (278, 23), (279, 23), (281, 23), (282, 23), (283, 22), (284, 22), (285, 23), (289, 23), (291, 24), (293, 25), (295, 25), (296, 25), (297, 22), (300, 23), (302, 23), (303, 20), (305, 24), (309, 23), (313, 25), (314, 23), (315, 25), (316, 24), (317, 21), (319, 21), (325, 22), (327, 21), (328, 22), (329, 25), (331, 21), (333, 22), (335, 22), (338, 20), (344, 23), (346, 24), (348, 21), (349, 25), (365, 24), (366, 22), (367, 22), (370, 24), (371, 22), (372, 24), (376, 21), (382, 22), (384, 21), (386, 21), (388, 22), (392, 21), (393, 19), (397, 23), (399, 18), (400, 18), (401, 19), (406, 21), (408, 22), (409, 25), (410, 20), (411, 19), (413, 22), (416, 21), (421, 20), (422, 19), (424, 19), (426, 23), (428, 21), (432, 21), (434, 22), (438, 22), (440, 24), (441, 21), (442, 19), (445, 21), (446, 22), (447, 21), (448, 22), (451, 20), (452, 20), (454, 21), (455, 24), (456, 24), (457, 24), (458, 25), (459, 24), (460, 25), (461, 24), (462, 25), (463, 22), (464, 22), (465, 25)]
nb_edges_0 = 734 rho= 0.1 # of rows = 25 # of columns= 244 total_degree_0= 734 RHS= 73.4
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  10 with obj value: 342.2829787234043 KP time = 0.7421242904383689 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01634 - (Local CPU) 0.01634 - (Global CPU) 0.75846

 Solve status: Optimal Objective value: 215.76667 nb_rows 25 nb_cols 232
----------------------------------------
----------------------------------------

        Updated data after iteration: 10 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (25, 232) and density : 0.887 and number of remaining ones : 5366
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.887 density  and density_threshold= 0.900


I am in the while loop with i= 11 density= 0.886551724137931 and fixed_threshold= 0.9

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 300.873
I solved model name = row_knapsack_problem for iteration i =  11 with obj value: 300.8731707317073 KP time = 0.7584611234487966 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01460 - (Local CPU) 0.01460 - (Global CPU) 0.77306

 Solve status: Optimal Objective value: 300.87317 nb_rows 23 nb_cols 232
----------------------------------------
----------------------------------------

        Updated data after iteration: 11 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (23, 232) and density : 0.892 and number of remaining ones : 4761
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(0, 21), (1, 22), (2, 22), (3, 23), (4, 20), (5, 21), (6, 19), (7, 23), (8, 17), (9, 21), (10, 19), (11, 19), (12, 18), (13, 18), (14, 18), (15, 18), (16, 20), (17, 23), (20, 20), (22, 22), (28, 20), (30, 21), (33, 22), (35, 19), (40, 20), (42, 18), (44, 20), (45, 18), (46, 22), (48, 20), (51, 21), (53, 19), (54, 20), (55, 21), (56, 21), (58, 21), (59, 20), (60, 20), (63, 21), (65, 23), (66, 18), (67, 20), (68, 18), (69, 20), (71, 19), (72, 20), (73, 21), (75, 19), (77, 20), (79, 20), (81, 20), (85, 22), (86, 23), (87, 21), (88, 21), (89, 19), (90, 20), (91, 20), (97, 20), (99, 22), (100, 22), (101, 19), (102, 21), (103, 20), (104, 22), (105, 21), (107, 22), (108, 19), (109, 21), (110, 20), (111, 20), (114, 22), (116, 20), (118, 21), (121, 19), (123, 19), (124, 19), (127, 19), (128, 19), (132, 22), (133, 20), (134, 22), (138, 22), (140, 20), (142, 19), (143, 18), (145, 19), (147, 20), (150, 23), (151, 21), (152, 21), (153, 22), (156, 20), (157, 19), (162, 19), (169, 19), (170, 21), (175, 19), (177, 19), (191, 20), (192, 19), (196, 19), (198, 18), (200, 20), (201, 19), (202, 20), (203, 20), (204, 21), (205, 20), (206, 22), (211, 20), (212, 19), (214, 19), (215, 19), (218, 20), (219, 20), (221, 22), (224, 23), (227, 19), (228, 21), (229, 20), (231, 20), (232, 21), (233, 21), (237, 22), (240, 18), (242, 22), (244, 22), (245, 23), (247, 22), (249, 23), (251, 23), (252, 20), (254, 23), (258, 22), (259, 23), (260, 21), (262, 22), (265, 21), (266, 19), (267, 20), (268, 20), (270, 23), (271, 21), (272, 23), (274, 21), (275, 20), (276, 21), (278, 21), (279, 22), (281, 22), (282, 22), (283, 21), (284, 21), (285, 21), (289, 22), (291, 23), (293, 23), (295, 23), (296, 23), (297, 21), (300, 21), (302, 22), (303, 19), (305, 23), (309, 22), (313, 23), (314, 22), (315, 23), (316, 23), (317, 19), (319, 19), (325, 20), (327, 19), (328, 20), (329, 23), (331, 19), (333, 20), (335, 20), (338, 18), (344, 21), (346, 22), (348, 20), (349, 23), (365, 22), (366, 21), (367, 20), (370, 22), (371, 20), (372, 22), (376, 19), (382, 20), (384, 20), (386, 19), (388, 20), (392, 19), (397, 21), (401, 18), (406, 19), (408, 20), (409, 23), (410, 18), (411, 17), (413, 20), (416, 19), (421, 18), (424, 17), (426, 22), (428, 20), (432, 19), (434, 22), (438, 21), (440, 22), (441, 19), (445, 19), (446, 20), (447, 19), (448, 20), (451, 18), (452, 18), (454, 19), (455, 22), (456, 22), (457, 22), (458, 23), (459, 22), (460, 23), (461, 22), (462, 23), (463, 20), (464, 20), (465, 23)]
nb_edges_0 = 575 rho= 0.1 # of rows = 23 # of columns= 232 total_degree_0= 575 RHS= 57.5
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  11 with obj value: 300.8731707317073 KP time = 0.7730566234095022 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.02115 - (Local CPU) 0.02115 - (Global CPU) 0.79421

 Solve status: Optimal Objective value: 193.20000 nb_rows 23 nb_cols 221
----------------------------------------
----------------------------------------

        Updated data after iteration: 11 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (23, 221) and density : 0.898 and number of remaining ones : 4761
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.898 density  and density_threshold= 0.900


I am in the while loop with i= 12 density= 0.8982884123549085 and fixed_threshold= 0.9

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 284.634
I solved model name = row_knapsack_problem for iteration i =  12 with obj value: 284.63437500000003 KP time = 0.794205748476088 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01559 - (Local CPU) 0.01559 - (Global CPU) 0.80979

 Solve status: Optimal Objective value: 284.63438 nb_rows 21 nb_cols 221
----------------------------------------
----------------------------------------

        Updated data after iteration: 12 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (21, 221) and density : 0.903 and number of remaining ones : 4191
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(0, 19), (1, 20), (2, 20), (3, 21), (4, 18), (5, 19), (6, 17), (7, 21), (9, 19), (10, 17), (11, 17), (13, 16), (14, 16), (16, 18), (17, 21), (20, 19), (22, 20), (28, 19), (30, 20), (33, 20), (35, 18), (40, 18), (44, 19), (46, 21), (48, 19), (51, 19), (53, 17), (54, 19), (55, 19), (56, 20), (58, 19), (59, 18), (60, 18), (63, 20), (65, 21), (66, 17), (67, 18), (68, 17), (69, 18), (71, 17), (72, 19), (73, 19), (75, 17), (77, 18), (79, 19), (81, 18), (85, 20), (86, 21), (87, 20), (88, 20), (89, 17), (90, 18), (91, 18), (97, 18), (99, 20), (100, 20), (101, 18), (102, 20), (103, 19), (104, 20), (105, 19), (107, 20), (108, 18), (109, 20), (110, 18), (111, 18), (114, 20), (116, 19), (118, 19), (121, 18), (123, 17), (124, 17), (127, 17), (128, 17), (132, 20), (133, 18), (134, 20), (138, 20), (140, 18), (142, 18), (145, 18), (147, 18), (150, 21), (151, 19), (152, 19), (153, 20), (156, 19), (157, 17), (162, 17), (169, 18), (170, 19), (175, 18), (177, 17), (191, 18), (192, 18), (196, 17), (198, 16), (200, 18), (201, 18), (202, 19), (203, 19), (204, 19), (205, 18), (206, 20), (211, 18), (212, 17), (214, 17), (215, 18), (218, 18), (219, 18), (221, 20), (224, 21), (227, 18), (228, 19), (229, 19), (231, 19), (232, 19), (233, 19), (237, 20), (240, 17), (242, 21), (244, 21), (245, 21), (247, 20), (249, 21), (251, 21), (252, 19), (254, 21), (258, 21), (259, 21), (260, 20), (262, 21), (265, 20), (266, 17), (267, 19), (268, 18), (270, 21), (271, 20), (272, 21), (274, 20), (275, 19), (276, 20), (278, 20), (279, 20), (281, 21), (282, 20), (283, 19), (284, 19), (285, 19), (289, 20), (291, 21), (293, 21), (295, 21), (296, 21), (297, 20), (300, 20), (302, 21), (303, 18), (305, 21), (309, 20), (313, 21), (314, 20), (315, 21), (316, 21), (317, 17), (319, 17), (325, 18), (327, 17), (328, 18), (329, 21), (331, 17), (333, 18), (335, 18), (338, 16), (344, 19), (346, 20), (348, 18), (349, 21), (365, 20), (366, 20), (367, 19), (370, 20), (371, 18), (372, 20), (376, 17), (382, 18), (384, 19), (386, 17), (388, 19), (392, 18), (397, 20), (401, 17), (406, 17), (408, 20), (409, 21), (410, 17), (413, 18), (416, 17), (426, 20), (428, 18), (432, 17), (434, 20), (438, 20), (440, 20), (441, 17), (445, 17), (446, 18), (447, 17), (448, 18), (454, 18), (455, 20), (456, 20), (457, 20), (458, 21), (459, 20), (460, 21), (461, 20), (462, 21), (463, 18), (464, 18), (465, 21)]
nb_edges_0 = 450 rho= 0.1 # of rows = 21 # of columns= 221 total_degree_0= 450 RHS= 45.0
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  12 with obj value: 284.63437500000003 KP time = 0.8097949154907838 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01623 - (Local CPU) 0.01623 - (Global CPU) 0.82602

 Solve status: Optimal Objective value: 170.25000 nb_rows 21 nb_cols 210
----------------------------------------
----------------------------------------

        Updated data after iteration: 12 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (21, 210) and density : 0.909 and number of remaining ones : 4191
        

----------------------------------------
----------------------------------------

----------------------------------------

            End of greedy approaches. Exit while loop. I did: 12 iterations
            Density : 0.909 > 0.900
            It took me : 0.826 time
            Found matrix of size : (21, 210) and density : 0.909
            
----------------------------------------

 Calling exact approaches for QB clique discovery with delta = 0.0
----------------------------------------

----------------------------------------

I am in warm_exact before calling max_e_h $$$$$$$$$$$$$$$$$$

----------------------------------------------------------------------
Model status: Optimal
----------------------------------------------------------------------
Computed by max_e_h Objective Value : 4764.000 
Model status: Optimal
Solution saved to Experiments/prob_8/results_h_0_M_3.csv

----------------------------------------------------------------------
Stats
 Model solved : max_e_h  Local Time:  - (real) 0.11466 - (Local CPU) 0.11466 - (Global CPU) 0.11466

 Solve status: Optimal Objective value: 4764.00000 nb_rows 21 nb_cols 36
----------------------------------------

----------------------------------------
Results from updating data after solving model = max_e_h  delta =   0.0
Number of Remaining number  Rows  : 21
Number of Remaining number Columns : 36
Remaining  number Edges_0 P: 0 Remaining  number Edges_1 : 756 Density : 1.0 current obj value 4764.0
----------------------------------------

----------------------------------------

Exit from the heuristic (or exact  approach)  max_e_c  with delta= 0.0 Found matrix with rows_res of lenght = 21  and cols_res of lenght = 36
 A lower_bound = 1140 has been previously found and given as input. 
 Start computing max_er with lower_bound =  1140. 
 !!!!!!!!!!!!!!!!!! I got a lower bound  1140
----------------------------------------------------------------------
Model status: Optimal
----------------------------------------------------------------------
Computed Objective Value: 1248.000
----------------------------------------------------------------------
Model status: Optimal

----------------------------------------------------------------------
Stats
 Model solved : max_e_wr  Local Time:  - (real) 12.37715 - (Local CPU) 12.37716 - (Global CPU) 12.49182

 Solve status: Optimal Objective value: 1248.00000 nb_rows 12 nb_cols 104
----------------------------------------
*****Model in warm start is feasible. The solution has been improved !!!*** 
model status = 1, LPstatus Optimal
Solution saved to Experiments/prob_8/results_wstart_0_M_3.csv


-- Debugging Step: checking extracted solution after solving model**** -- max_e_wr
len_rows_res= 12
row_res= [0, 14, 31, 35, 4, 42, 5, 52, 55, 57, 63, 8]
len_cols_res= 104
cols_res= [1, 101, 102, 103, 104, 105, 107, 108, 109, 110, 114, 118, 121, 123, 124, 132, 133, 134, 138, 150, 153, 157, 17, 170, 206, 218, 219, 22, 221, 224, 228, 229, 232, 233, 242, 244, 245, 247, 249, 251, 254, 258, 259, 260, 262, 265, 270, 271, 272, 275, 276, 279, 281, 282, 285, 289, 291, 293, 295, 296, 297, 3, 302, 305, 313, 315, 316, 329, 33, 349, 365, 366, 370, 371, 372, 376, 384, 397, 409, 434, 438, 457, 458, 46, 460, 462, 465, 48, 51, 54, 55, 56, 59, 65, 7, 79, 81, 85, 86, 87, 88, 90, 91, 99]
nb row_names_res, = 12
row_names_res = ['r0', 'r14', 'r31', 'r35', 'r4', 'r42', 'r5', 'r52', 'r55', 'r57', 'r63', 'r8']
col_names_res = ['2', '102', '103', '104', '105', '106', '108', '109', '110', '111', '115', '119', '122', '124', '125', '133', '134', '135', '139', '151', '154', '158', '18', '171', '207', '219', '220', '23', '222', '225', '229', '230', '233', '234', '243', '245', '246', '248', '250', '252', '255', '259', '260', '261', '263', '266', '271', '272', '273', '276', '277', '280', '282', '283', '286', '290', '292', '294', '296', '297', '298', '4', '303', '306', '314', '316', '317', '330', '34', '350', '366', '367', '371', '372', '373', '377', '385', '398', '410', '435', '439', '458', '459', '47', '461', '463', '466', '49', '52', '55', '56', '57', '60', '66', '8', '80', '82', '86', '87', '88', '89', '91', '92', '100']
 nb col_names_res, = 104

----------------------------------------

----------------------------------------
 results from updating data after solving model = max_e_wr  delta =   0.0
Number of Remaining  Rows  : 12
Number of Remaining number Columns : 104
Remaining  number Edges_0 P: 0 Remaining  number Edges_1 : 1248 Density : 1.0
----------------------------------------

----------------------------------------

Exit from the exact  approach  max_e_c  with delta= 0.0 Found matrix with rows_res of lenght = 12  and cols_res of lenght = 104 and density = 1.0
----------------------------------------

        Exit from the exact approach: max_e_c for matrix 3
        with delta =  0.0
        Found matrix of size : (12, 104)
        and density : 1.000
        and # of ones : 1248
        and Heuristic QBC time   : 0.11466
        and Global QBC  time  : 12.49182
        
 Remaining Rows  : [(0, 104), (4, 104), (5, 104), (8, 104), (14, 104), (31, 104), (35, 104), (42, 104), (52, 104), (55, 104), (57, 104), (63, 104)]
 Remaining  Cols  : [(1, 12), (3, 12), (7, 12), (17, 12), (22, 12), (33, 12), (46, 12), (48, 12), (51, 12), (54, 12), (55, 12), (56, 12), (59, 12), (65, 12), (79, 12), (81, 12), (85, 12), (86, 12), (87, 12), (88, 12), (90, 12), (91, 12), (99, 12), (101, 12), (102, 12), (103, 12), (104, 12), (105, 12), (107, 12), (108, 12), (109, 12), (110, 12), (114, 12), (118, 12), (121, 12), (123, 12), (124, 12), (132, 12), (133, 12), (134, 12), (138, 12), (150, 12), (153, 12), (157, 12), (170, 12), (206, 12), (218, 12), (219, 12), (221, 12), (224, 12), (228, 12), (229, 12), (232, 12), (233, 12), (242, 12), (244, 12), (245, 12), (247, 12), (249, 12), (251, 12), (254, 12), (258, 12), (259, 12), (260, 12), (262, 12), (265, 12), (270, 12), (271, 12), (272, 12), (275, 12), (276, 12), (279, 12), (281, 12), (282, 12), (285, 12), (289, 12), (291, 12), (293, 12), (295, 12), (296, 12), (297, 12), (302, 12), (305, 12), (313, 12), (315, 12), (316, 12), (329, 12), (349, 12), (365, 12), (366, 12), (370, 12), (371, 12), (372, 12), (376, 12), (384, 12), (397, 12), (409, 12), (434, 12), (438, 12), (457, 12), (458, 12), (460, 12), (462, 12), (465, 12)]

----------------------------------------------------------------------
 
    End of computations for matrix 3 in  data/prob_8.csv at level 0 and debug  2
    With  model: max_e_c and quasi-biclique error: 0.0 
    Size of Remaining matrix : (12,104), with  density : 1.0 and number of ones: 1248
    Global Time (in sec): 13.318
    Total Time in QBC approaches: 12.492
    Time in greedy approach: 0.826,  size of matrix found by greedy : (21,210) 
    With density : 0.909 and # ones : 4008 
    Time in heuristic only : 0.115 
    Time in warm start only : 12.377
    Number of iterations in greedy approach: 12
    Percentage of greedy approach run time in global run time : 6.20% 
    Percentage of heuristic run time in QBC run time : 0.92%
    With zero deletion rate (rho): 0.1 and threshold: 0.9
    
----------------------------------------------------------------------

I solved TASK NUMBER 3 with (edges: 17219) and obj: 1248  with solving TIME : 13.3131 sec
Task 3 with obj 1248) is the current record.

Evaluated Queue:
----------------------------------------------------------------------
 Size of the evaluated  queue: 2
 Matrix: 2, # Rows: 59,  # Cols: 466,  # Edges: 18063, size max clique  1140, # rows: 10 # columns: 114
 Matrix: 3, # Rows: 64,  # Cols: 383,  # Edges: 17219, size max clique  1248, # rows: 12 # columns: 104

----------------------------------------------------------------------

----------------------------------------------------------------------
Size of the COPY_QUEUE: 2
Matrix: 2, Size: 18063, Number Rows: 59, Number Cols: 466, Number Edges: 18063
Matrix: 3, Size: 17219, Number Rows: 64, Number Cols: 383, Number Edges: 17219

----------------------------------------------------------------------

Best task: 3, Best objective: 1248 with # rows 12 and # cols 104
Number of solved tasks: 2, Number of fathomed tasks: 0, Number of skipped tasks: 0

----------------------------------------------------------------------
***End of computations !!!

----------------------------------------------------------------------
----------------------------------------------------------------------
 
    End of computations for matrix  data/prob_8.csv with rows: 64 and columns 466
    with  input density : 0.654 and number of ones: 19513
    time limit has been set to 1800
    using  model: max_e_c  with quasi-biclique error: 0.0 
    nd density_threshold: 0.900 and zero deletion rate (rho): 0.1 and debug: 2
    Decrease and conquer levels:  2, # ext task: 4, int task : 3 
    The solution has been found in matrix : 3  with 
    size max clique  1248, # rows: 12 # columns: 104,
    # solved  tasks : 2,  # fathomed tasks : 0 # skipped tasks : 0
    
----------------------------------------------------------------------

Best task: 3, Best objective: 1248 with # rows 12 and # cols 104

----------------------------------------------------------------------
 Model building and solving global time: 36.3111 sec
 Tasks_generation time: 15.8993 sec
 Tasks_pure_solving time: 15.3285 sec

size edges_1: 19513

row_set: {0, 35, 4, 5, 8, 42, 14, 52, 55, 57, 63, 31}
col_set: {1, 3, 7, 17, 22, 33, 46, 48, 51, 54, 55, 56, 59, 65, 79, 81, 85, 86, 87, 88, 90, 91, 99, 101, 102, 103, 104, 105, 107, 108, 109, 110, 114, 118, 121, 123, 124, 132, 133, 134, 138, 150, 153, 157, 170, 206, 218, 219, 221, 224, 228, 229, 232, 233, 242, 244, 245, 247, 249, 251, 254, 258, 259, 260, 262, 265, 270, 271, 272, 275, 276, 279, 281, 282, 285, 289, 291, 293, 295, 296, 297, 302, 305, 313, 315, 316, 329, 349, 365, 366, 370, 371, 372, 376, 384, 397, 409, 434, 438, 457, 458, 460, 462, 465}
Number of ones in the best submatrix : 1248
