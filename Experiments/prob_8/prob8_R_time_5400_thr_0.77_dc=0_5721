----------------------------------------
 Input Data in csv files : data/prob_8.csv
Number Rows Data : 64
Number Cols Data : 466
Number Edges_1 : 19513
Number Edges_0 : 10311
----------------------------------------

Task with matrix 1 with size (64,466) and density 0.6542717274678111 and number of ones 19513  and number of zeros 10311 has been added to the queue.

----------------------------------------------------------------------

End of tasks generation stage. Last generated task from matrix 1 with winning node 1 and global time 0.0000000
----------------------------------------------------------------------
 Size of the queue: 1
 Matrix: 1, Size: 19513, Number Rows: 64,  Number Cols: 466,  Number Edges: 19513, obj None

----------------------------------------------------------------------


***QUEUE Processing of task number 1 with (edges 19513) selected_model max_e_r dec_conq 0 delta 0.0 threshold 0.77 rho 0.1 QBC_time 0.0 ***


----------------------------------------------------------------------
***Stats Current Input for matrix 1 in  data/prob_8.csv at level 0 and with model:  max_e_r***
Size of current matrix :  64 * 466 = 29824 ; dec_conq: 0
number input zeros :  10311 ; number input ones :  19513
rho =  0.1 ; delta :  0.0
Input density : 0.654 ; density_threshold: 0.77000
----------------------------------------------------------------------
End Current  Stats
----------------------------------------------------------------------


calling greedy approaches for zero deletion, density= 0.654 density  and density_threshold= 0.770


I am in the while loop with i= 1 density= 0.6542717274678111 and fixed_threshold= 0.77

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value :  1524.4747252747252
I solved model name = row_knapsack_problem for iteration i =  1 with obj value: 1524.4747252747252 KP time = 0 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.00954 - (Local CPU) 0.00954 - (Global CPU) 0.00954

 Solve status: Optimal Objective value: 1524.4747252747252 nb_rows 58 nb_cols 466
----------------------------------------
----------------------------------------

        Updated data after iteration: 1 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (58, 466) and density : 0.6601302353115288 and number of remaining ones : 17842
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(0, 53), (1, 48), (2, 52), (3, 49), (4, 52), (5, 45), (6, 47), (7, 51), (8, 45), (9, 48), (10, 40), (11, 42), (12, 41), (13, 40), (14, 39), (15, 39), (16, 44), (17, 58), (18, 12), (19, 21), (20, 51), (21, 15), (22, 52), (23, 14), (24, 26), (25, 23), (26, 26), (27, 14), (28, 38), (29, 18), (30, 46), (31, 22), (32, 20), (33, 52), (34, 22), (35, 48), (36, 25), (37, 31), (38, 23), (39, 42), (40, 46), (41, 25), (42, 46), (43, 44), (44, 40), (45, 45), (46, 48), (47, 21), (48, 47), (49, 34), (50, 29), (51, 50), (52, 33), (53, 45), (54, 42), (55, 45), (56, 47), (57, 31), (58, 46), (59, 40), (60, 42), (61, 34), (62, 34), (63, 39), (64, 42), (65, 49), (66, 50), (67, 46), (68, 44), (69, 50), (70, 31), (71, 45), (72, 43), (73, 43), (74, 35), (75, 45), (76, 35), (77, 44), (78, 30), (79, 36), (80, 24), (81, 37), (82, 40), (83, 30), (84, 28), (85, 46), (86, 48), (87, 48), (88, 48), (89, 47), (90, 46), (91, 47), (92, 27), (93, 30), (94, 38), (95, 39), (96, 40), (97, 42), (98, 33), (99, 43), (100, 48), (101, 45), (102, 48), (103, 46), (104, 45), (105, 49), (106, 42), (107, 50), (108, 41), (109, 44), (110, 38), (111, 48), (112, 42), (113, 33), (114, 49), (115, 43), (116, 48), (117, 46), (118, 43), (119, 25), (120, 39), (121, 40), (122, 35), (123, 35), (124, 38), (125, 42), (126, 44), (127, 43), (128, 47), (129, 32), (130, 41), (131, 45), (132, 43), (133, 52), (134, 44), (135, 46), (136, 34), (137, 31), (138, 46), (139, 16), (140, 43), (141, 23), (142, 45), (143, 38), (144, 32), (145, 46), (146, 32), (147, 46), (148, 22), (149, 24), (150, 47), (151, 44), (152, 44), (153, 51), (154, 39), (155, 36), (156, 48), (157, 44), (158, 31), (159, 40), (160, 34), (161, 37), (162, 44), (163, 42), (164, 39), (165, 25), (166, 39), (167, 37), (168, 35), (169, 40), (170, 48), (171, 37), (172, 39), (173, 37), (174, 34), (175, 47), (176, 43), (177, 39), (178, 33), (179, 44), (180, 31), (181, 33), (182, 34), (183, 30), (184, 28), (185, 34), (186, 41), (187, 39), (188, 31), (189, 46), (190, 36), (191, 42), (192, 40), (193, 45), (194, 42), (195, 37), (196, 39), (197, 39), (198, 47), (199, 37), (200, 43), (201, 39), (202, 44), (203, 45), (204, 49), (205, 50), (206, 49), (207, 39), (208, 32), (209, 40), (210, 44), (211, 46), (212, 41), (213, 33), (214, 43), (215, 39), (216, 2), (217, 32), (218, 52), (219, 40), (220, 30), (221, 50), (222, 32), (223, 35), (224, 46), (225, 36), (226, 42), (227, 44), (228, 45), (229, 46), (230, 36), (231, 46), (232, 41), (233, 44), (234, 35), (235, 37), (236, 30), (237, 47), (238, 24), (239, 35), (240, 41), (241, 34), (242, 51), (243, 23), (244, 46), (245, 46), (246, 25), (247, 47), (248, 21), (249, 51), (250, 30), (251, 43), (252, 47), (253, 32), (254, 54), (255, 36), (256, 31), (257, 16), (258, 50), (259, 49), (260, 46), (261, 23), (262, 51), (263, 31), (264, 29), (265, 46), (266, 46), (267, 42), (268, 42), (269, 34), (270, 45), (271, 50), (272, 51), (273, 30), (274, 48), (275, 50), (276, 47), (277, 23), (278, 45), (279, 46), (280, 25), (281, 41), (282, 44), (283, 47), (284, 43), (285, 50), (286, 21), (287, 25), (288, 28), (289, 41), (290, 25), (291, 50), (292, 24), (293, 51), (294, 29), (295, 50), (296, 52), (297, 47), (298, 31), (299, 35), (300, 51), (301, 18), (302, 45), (303, 41), (304, 24), (305, 44), (306, 24), (307, 27), (308, 26), (309, 46), (310, 10), (311, 13), (312, 21), (313, 48), (314, 47), (315, 56), (316, 45), (317, 40), (318, 24), (319, 45), (320, 18), (321, 18), (322, 17), (323, 28), (324, 17), (325, 42), (326, 24), (327, 40), (328, 39), (329, 56), (330, 13), (331, 38), (332, 30), (333, 42), (334, 29), (335, 40), (336, 42), (337, 39), (338, 38), (339, 44), (340, 30), (341, 31), (342, 39), (343, 32), (344, 49), (345, 28), (346, 48), (347, 31), (348, 48), (349, 49), (350, 30), (351, 30), (352, 37), (353, 18), (354, 38), (355, 39), (356, 31), (357, 42), (358, 34), (359, 41), (360, 17), (361, 19), (362, 14), (363, 14), (364, 15), (365, 49), (366, 48), (367, 48), (368, 12), (369, 18), (370, 48), (371, 45), (372, 46), (373, 7), (374, 23), (375, 13), (376, 46), (377, 23), (378, 38), (379, 18), (380, 29), (381, 32), (382, 44), (383, 26), (384, 35), (385, 39), (386, 48), (387, 30), (388, 48), (389, 40), (390, 38), (391, 46), (392, 45), (393, 45), (394, 36), (395, 37), (396, 41), (397, 50), (398, 34), (399, 40), (400, 40), (401, 49), (402, 22), (403, 22), (404, 23), (405, 32), (406, 52), (407, 21), (408, 46), (409, 55), (410, 48), (411, 47), (412, 17), (413, 45), (414, 16), (415, 33), (416, 45), (417, 29), (418, 23), (419, 37), (420, 39), (421, 50), (422, 44), (423, 33), (424, 46), (425, 42), (426, 44), (427, 44), (428, 47), (429, 36), (430, 41), (431, 41), (432, 50), (433, 40), (434, 49), (435, 22), (436, 36), (437, 23), (438, 44), (439, 24), (440, 56), (441, 42), (442, 41), (443, 25), (444, 43), (445, 43), (446, 44), (447, 42), (448, 44), (449, 37), (450, 39), (451, 50), (452, 41), (453, 36), (454, 49), (455, 47), (456, 46), (457, 51), (458, 48), (459, 49), (460, 48), (461, 44), (462, 48), (463, 40), (464, 43), (465, 50)]
nb_edges_0 = 9186 rho= 0.1 # of rows = 58 # of columns= 466 total_degree_0= 9186 RHS= 918.6
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  1 with obj value: 1524.4747252747252 KP time = 0.009541750012431294 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.00817 - (Local CPU) 0.00817 - (Global CPU) 0.01772

 Solve status: Optimal Objective value: 277.6146341463415 nb_rows 58 nb_cols 445
----------------------------------------
----------------------------------------

        Updated data after iteration: 1 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (58, 445) and density : 0.6802789616427741 and number of remaining ones : 17842
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.680 density  and density_threshold= 0.770


I am in the while loop with i= 2 density= 0.6802789616427741 and fixed_threshold= 0.77

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value :  1459.1333333333334
I solved model name = row_knapsack_problem for iteration i =  2 with obj value: 1459.1333333333334 KP time = 0.01771516603184864 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.00521 - (Local CPU) 0.00521 - (Global CPU) 0.02293

 Solve status: Optimal Objective value: 1459.1333333333334 nb_rows 52 nb_cols 445
----------------------------------------
----------------------------------------

        Updated data after iteration: 2 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (52, 445) and density : 0.6850043215211754 and number of remaining ones : 15851
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(0, 48), (1, 45), (2, 47), (3, 46), (4, 48), (5, 43), (6, 42), (7, 48), (8, 43), (9, 45), (10, 38), (11, 40), (12, 39), (13, 38), (14, 38), (15, 37), (16, 42), (17, 52), (19, 19), (20, 46), (22, 46), (24, 22), (25, 19), (26, 21), (28, 36), (29, 15), (30, 43), (31, 19), (32, 17), (33, 47), (34, 20), (35, 42), (36, 21), (37, 28), (38, 20), (39, 38), (40, 42), (41, 21), (42, 41), (43, 39), (44, 35), (45, 41), (46, 45), (47, 21), (48, 42), (49, 29), (50, 28), (51, 44), (52, 30), (53, 43), (54, 41), (55, 39), (56, 42), (57, 29), (58, 40), (59, 37), (60, 39), (61, 31), (62, 31), (63, 33), (64, 36), (65, 44), (66, 46), (67, 41), (68, 40), (69, 46), (70, 26), (71, 41), (72, 38), (73, 40), (74, 31), (75, 41), (76, 32), (77, 40), (78, 27), (79, 34), (80, 23), (81, 32), (82, 35), (83, 25), (84, 23), (85, 41), (86, 45), (87, 44), (88, 43), (89, 42), (90, 44), (91, 44), (92, 21), (93, 26), (94, 34), (95, 33), (96, 36), (97, 38), (98, 30), (99, 39), (100, 46), (101, 40), (102, 44), (103, 40), (104, 39), (105, 43), (106, 40), (107, 46), (108, 36), (109, 40), (110, 36), (111, 44), (112, 37), (113, 28), (114, 44), (115, 37), (116, 43), (117, 40), (118, 42), (119, 22), (120, 35), (121, 36), (122, 30), (123, 32), (124, 34), (125, 36), (126, 38), (127, 41), (128, 43), (129, 28), (130, 35), (131, 39), (132, 40), (133, 47), (134, 40), (135, 43), (136, 32), (137, 26), (138, 41), (140, 38), (141, 22), (142, 39), (143, 34), (144, 31), (145, 41), (146, 29), (147, 42), (148, 21), (149, 22), (150, 41), (151, 39), (152, 38), (153, 45), (154, 33), (155, 34), (156, 43), (157, 40), (158, 28), (159, 36), (160, 30), (161, 32), (162, 39), (163, 38), (164, 37), (165, 24), (166, 36), (167, 33), (168, 33), (169, 34), (170, 43), (171, 33), (172, 34), (173, 32), (174, 32), (175, 41), (176, 38), (177, 34), (178, 32), (179, 39), (180, 31), (181, 32), (182, 30), (183, 29), (184, 27), (185, 32), (186, 36), (187, 36), (188, 30), (189, 40), (190, 32), (191, 38), (192, 36), (193, 40), (194, 39), (195, 35), (196, 36), (197, 38), (198, 41), (199, 35), (200, 39), (201, 36), (202, 40), (203, 39), (204, 43), (205, 46), (206, 44), (207, 34), (208, 30), (209, 37), (210, 40), (211, 41), (212, 38), (213, 29), (214, 38), (215, 36), (217, 28), (218, 46), (219, 38), (220, 26), (221, 47), (222, 28), (223, 31), (224, 42), (225, 34), (226, 39), (227, 38), (228, 40), (229, 40), (230, 33), (231, 41), (232, 38), (233, 41), (234, 31), (235, 31), (236, 29), (237, 43), (238, 21), (239, 31), (240, 38), (241, 33), (242, 46), (243, 20), (244, 42), (245, 43), (246, 22), (247, 44), (248, 18), (249, 48), (250, 26), (251, 38), (252, 42), (253, 27), (254, 48), (255, 31), (256, 27), (258, 44), (259, 43), (260, 42), (261, 20), (262, 46), (263, 27), (264, 26), (265, 41), (266, 41), (267, 39), (268, 39), (269, 29), (270, 40), (271, 45), (272, 47), (273, 28), (274, 43), (275, 44), (276, 41), (277, 22), (278, 39), (279, 40), (280, 22), (281, 36), (282, 39), (283, 42), (284, 38), (285, 45), (286, 18), (287, 22), (288, 25), (289, 37), (290, 22), (291, 45), (292, 22), (293, 45), (294, 25), (295, 44), (296, 46), (297, 41), (298, 29), (299, 31), (300, 47), (301, 16), (302, 41), (303, 36), (304, 22), (305, 40), (306, 19), (307, 23), (308, 21), (309, 42), (312, 19), (313, 44), (314, 43), (315, 52), (316, 42), (317, 37), (318, 21), (319, 39), (320, 15), (321, 16), (323, 24), (325, 37), (326, 21), (327, 35), (328, 35), (329, 51), (331, 34), (332, 26), (333, 39), (334, 26), (335, 35), (336, 39), (337, 35), (338, 34), (339, 39), (340, 27), (341, 27), (342, 36), (343, 28), (344, 43), (345, 26), (346, 42), (347, 27), (348, 43), (349, 44), (350, 27), (351, 25), (352, 32), (353, 14), (354, 34), (355, 34), (356, 27), (357, 37), (358, 30), (359, 37), (361, 17), (365, 44), (366, 45), (367, 44), (369, 16), (370, 43), (371, 40), (372, 42), (374, 21), (376, 40), (377, 22), (378, 35), (379, 16), (380, 25), (381, 28), (382, 38), (383, 25), (384, 31), (385, 36), (386, 42), (387, 28), (388, 45), (389, 37), (390, 35), (391, 42), (392, 40), (393, 40), (394, 33), (395, 33), (396, 38), (397, 45), (398, 30), (399, 38), (400, 35), (401, 44), (402, 20), (403, 18), (404, 18), (405, 27), (406, 47), (407, 17), (408, 43), (409, 51), (410, 44), (411, 43), (413, 41), (415, 28), (416, 41), (417, 26), (418, 20), (419, 33), (420, 34), (421, 47), (422, 39), (423, 29), (424, 40), (425, 39), (426, 38), (427, 39), (428, 43), (429, 31), (430, 38), (431, 38), (432, 45), (433, 35), (434, 43), (435, 21), (436, 33), (437, 20), (438, 38), (439, 20), (440, 50), (441, 40), (442, 40), (443, 23), (444, 38), (445, 41), (446, 42), (447, 40), (448, 42), (449, 35), (450, 37), (451, 45), (452, 39), (453, 34), (454, 43), (455, 45), (456, 44), (457, 48), (458, 46), (459, 47), (460, 46), (461, 42), (462, 46), (463, 38), (464, 41), (465, 47)]
nb_edges_0 = 7289 rho= 0.1 # of rows = 52 # of columns= 445 total_degree_0= 7289 RHS= 728.9000000000001
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  2 with obj value: 1459.1333333333334 KP time = 0.022927082027308643 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.00737 - (Local CPU) 0.00737 - (Global CPU) 0.03030

 Solve status: Optimal Objective value: 367.8125 nb_rows 52 nb_cols 423
----------------------------------------
----------------------------------------

        Updated data after iteration: 2 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (52, 423) and density : 0.7030823786142935 and number of remaining ones : 15851
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.703 density  and density_threshold= 0.770


I am in the while loop with i= 3 density= 0.7030823786142935 and fixed_threshold= 0.77

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value :  1208.391724137931
I solved model name = row_knapsack_problem for iteration i =  3 with obj value: 1208.391724137931 KP time = 0.03029870701720938 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.00519 - (Local CPU) 0.00519 - (Global CPU) 0.03548

 Solve status: Optimal Objective value: 1208.391724137931 nb_rows 47 nb_cols 423
----------------------------------------
----------------------------------------

        Updated data after iteration: 3 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (47, 423) and density : 0.7087168653488255 and number of remaining ones : 14090
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(0, 44), (1, 44), (2, 43), (3, 45), (4, 43), (5, 41), (6, 40), (7, 45), (8, 38), (9, 43), (10, 37), (11, 39), (12, 39), (13, 38), (14, 38), (15, 36), (16, 41), (17, 47), (20, 42), (22, 42), (24, 18), (26, 17), (28, 35), (30, 40), (33, 43), (35, 38), (36, 16), (37, 23), (38, 16), (39, 35), (40, 39), (41, 19), (42, 39), (43, 37), (44, 32), (45, 36), (46, 42), (47, 20), (48, 38), (49, 26), (50, 26), (51, 39), (52, 27), (53, 39), (54, 38), (55, 35), (56, 38), (57, 26), (58, 36), (59, 33), (60, 35), (61, 27), (62, 29), (63, 31), (64, 33), (65, 41), (66, 42), (67, 38), (68, 35), (69, 42), (70, 23), (71, 38), (72, 36), (73, 36), (74, 28), (75, 37), (76, 29), (77, 36), (78, 24), (79, 33), (80, 19), (81, 30), (82, 31), (83, 22), (84, 22), (85, 37), (86, 43), (87, 41), (88, 41), (89, 37), (90, 41), (91, 39), (92, 20), (93, 24), (94, 32), (95, 30), (96, 33), (97, 34), (98, 28), (99, 36), (100, 43), (101, 36), (102, 40), (103, 37), (104, 35), (105, 38), (106, 36), (107, 41), (108, 33), (109, 38), (110, 32), (111, 39), (112, 34), (113, 25), (114, 40), (115, 33), (116, 39), (117, 36), (118, 38), (119, 19), (120, 32), (121, 33), (122, 25), (123, 30), (124, 33), (125, 31), (126, 36), (127, 37), (128, 39), (129, 25), (130, 30), (131, 36), (132, 37), (133, 43), (134, 38), (135, 38), (136, 30), (137, 22), (138, 37), (140, 34), (141, 20), (142, 36), (143, 32), (144, 27), (145, 39), (146, 24), (147, 38), (148, 18), (149, 20), (150, 39), (151, 37), (152, 36), (153, 42), (154, 30), (155, 29), (156, 38), (157, 37), (158, 23), (159, 32), (160, 26), (161, 28), (162, 35), (163, 33), (164, 35), (165, 22), (166, 31), (167, 30), (168, 29), (169, 32), (170, 40), (171, 30), (172, 30), (173, 31), (174, 28), (175, 39), (176, 34), (177, 30), (178, 27), (179, 35), (180, 29), (181, 29), (182, 26), (183, 26), (184, 22), (185, 29), (186, 34), (187, 32), (188, 26), (189, 36), (190, 28), (191, 35), (192, 33), (193, 36), (194, 35), (195, 32), (196, 33), (197, 33), (198, 36), (199, 30), (200, 36), (201, 34), (202, 37), (203, 36), (204, 39), (205, 42), (206, 41), (207, 30), (208, 28), (209, 32), (210, 37), (211, 36), (212, 35), (213, 25), (214, 37), (215, 32), (217, 25), (218, 42), (219, 35), (220, 23), (221, 44), (222, 24), (223, 28), (224, 38), (225, 30), (226, 36), (227, 33), (228, 36), (229, 36), (230, 30), (231, 36), (232, 35), (233, 37), (234, 28), (235, 27), (236, 26), (237, 38), (238, 17), (239, 28), (240, 34), (241, 30), (242, 41), (243, 18), (244, 38), (245, 40), (246, 19), (247, 39), (249, 44), (250, 22), (251, 36), (252, 37), (253, 23), (254, 44), (255, 27), (256, 24), (258, 39), (259, 40), (260, 40), (261, 17), (262, 42), (263, 23), (264, 23), (265, 38), (266, 36), (267, 35), (268, 36), (269, 26), (270, 36), (271, 41), (272, 42), (273, 24), (274, 41), (275, 41), (276, 38), (277, 18), (278, 36), (279, 37), (280, 18), (281, 34), (282, 37), (283, 38), (284, 34), (285, 40), (287, 18), (288, 22), (289, 35), (290, 18), (291, 41), (292, 20), (293, 41), (294, 22), (295, 41), (296, 41), (297, 38), (298, 25), (299, 26), (300, 44), (302, 37), (303, 34), (304, 18), (305, 38), (307, 18), (308, 18), (309, 40), (313, 40), (314, 41), (315, 47), (316, 40), (317, 34), (318, 17), (319, 36), (323, 21), (325, 33), (326, 18), (327, 32), (328, 33), (329, 46), (331, 32), (332, 21), (333, 36), (334, 22), (335, 34), (336, 34), (337, 31), (338, 30), (339, 34), (340, 25), (341, 24), (342, 33), (343, 24), (344, 40), (345, 22), (346, 40), (347, 24), (348, 40), (349, 42), (350, 24), (351, 22), (352, 29), (354, 31), (355, 30), (356, 23), (357, 33), (358, 27), (359, 34), (365, 39), (366, 42), (367, 40), (370, 40), (371, 37), (372, 38), (374, 18), (376, 35), (377, 20), (378, 31), (380, 21), (381, 26), (382, 33), (383, 23), (384, 28), (385, 33), (386, 37), (387, 25), (388, 42), (389, 34), (390, 34), (391, 37), (392, 39), (393, 36), (394, 29), (395, 28), (396, 34), (397, 40), (398, 26), (399, 33), (400, 33), (401, 39), (402, 17), (405, 23), (406, 44), (408, 40), (409, 47), (410, 42), (411, 41), (413, 38), (415, 25), (416, 38), (417, 24), (418, 19), (419, 29), (420, 31), (421, 42), (422, 36), (423, 26), (424, 36), (425, 36), (426, 35), (427, 35), (428, 39), (429, 27), (430, 33), (431, 34), (432, 40), (433, 31), (434, 38), (435, 19), (436, 29), (438, 35), (440, 45), (441, 40), (442, 39), (443, 23), (444, 36), (445, 40), (446, 41), (447, 39), (448, 40), (449, 35), (450, 36), (451, 41), (452, 38), (453, 33), (454, 40), (455, 44), (456, 42), (457, 44), (458, 45), (459, 45), (460, 45), (461, 41), (462, 44), (463, 37), (464, 40), (465, 45)]
nb_edges_0 = 5791 rho= 0.1 # of rows = 47 # of columns= 423 total_degree_0= 5791 RHS= 579.1
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  3 with obj value: 1208.391724137931 KP time = 0.03548474900890142 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.00744 - (Local CPU) 0.00744 - (Global CPU) 0.04292

 Solve status: Optimal Objective value: 345.9607142857143 nb_rows 47 nb_cols 403
----------------------------------------
----------------------------------------

        Updated data after iteration: 3 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (47, 403) and density : 0.7253048941449765 and number of remaining ones : 14090
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.725 density  and density_threshold= 0.770


I am in the while loop with i= 4 density= 0.7253048941449765 and fixed_threshold= 0.77

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value :  1089.49609375
I solved model name = row_knapsack_problem for iteration i =  4 with obj value: 1089.49609375 KP time = 0.0429215410258621 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.00518 - (Local CPU) 0.00518 - (Global CPU) 0.04810

 Solve status: Optimal Objective value: 1089.49609375 nb_rows 43 nb_cols 403
----------------------------------------
----------------------------------------

        Updated data after iteration: 4 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (43, 403) and density : 0.7298170696520284 and number of remaining ones : 12647
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(0, 40), (1, 42), (2, 39), (3, 42), (4, 40), (5, 39), (6, 36), (7, 43), (8, 35), (9, 41), (10, 36), (11, 37), (12, 36), (13, 36), (14, 36), (15, 35), (16, 39), (17, 43), (20, 39), (22, 39), (28, 33), (30, 38), (33, 39), (35, 37), (37, 19), (39, 32), (40, 35), (41, 17), (42, 35), (43, 34), (44, 29), (45, 34), (46, 39), (47, 17), (48, 35), (49, 23), (50, 23), (51, 36), (52, 23), (53, 36), (54, 34), (55, 33), (56, 35), (57, 23), (58, 33), (59, 31), (60, 32), (61, 25), (62, 25), (63, 27), (64, 29), (65, 38), (66, 38), (67, 36), (68, 33), (69, 38), (70, 19), (71, 34), (72, 32), (73, 33), (74, 26), (75, 34), (76, 25), (77, 34), (78, 23), (79, 32), (80, 17), (81, 30), (82, 27), (83, 20), (84, 19), (85, 35), (86, 41), (87, 39), (88, 37), (89, 34), (90, 37), (91, 36), (92, 19), (93, 22), (94, 28), (95, 27), (96, 30), (97, 34), (98, 25), (99, 32), (100, 40), (101, 33), (102, 36), (103, 33), (104, 32), (105, 35), (106, 32), (107, 38), (108, 30), (109, 36), (110, 29), (111, 36), (112, 30), (113, 23), (114, 37), (115, 31), (116, 36), (117, 33), (118, 37), (119, 17), (120, 28), (121, 31), (122, 23), (123, 29), (124, 32), (125, 28), (126, 33), (127, 35), (128, 37), (129, 22), (130, 26), (131, 32), (132, 35), (133, 39), (134, 35), (135, 34), (136, 27), (137, 19), (138, 35), (140, 31), (141, 18), (142, 34), (143, 29), (144, 25), (145, 35), (146, 22), (147, 34), (149, 18), (150, 36), (151, 34), (152, 33), (153, 38), (154, 28), (155, 26), (156, 36), (157, 34), (158, 22), (159, 30), (160, 23), (161, 26), (162, 32), (163, 31), (164, 32), (165, 20), (166, 29), (167, 26), (168, 28), (169, 30), (170, 36), (171, 26), (172, 26), (173, 27), (174, 25), (175, 35), (176, 31), (177, 27), (178, 24), (179, 31), (180, 28), (181, 27), (182, 23), (183, 23), (184, 20), (185, 25), (186, 32), (187, 28), (188, 22), (189, 33), (190, 26), (191, 32), (192, 32), (193, 33), (194, 31), (195, 29), (196, 31), (197, 30), (198, 32), (199, 28), (200, 35), (201, 32), (202, 34), (203, 34), (204, 36), (205, 38), (206, 37), (207, 27), (208, 26), (209, 29), (210, 34), (211, 32), (212, 32), (213, 22), (214, 33), (215, 29), (217, 22), (218, 38), (219, 32), (220, 20), (221, 40), (222, 22), (223, 27), (224, 35), (225, 27), (226, 33), (227, 30), (228, 33), (229, 34), (230, 26), (231, 33), (232, 32), (233, 34), (234, 26), (235, 25), (236, 23), (237, 34), (239, 26), (240, 33), (241, 26), (242, 38), (244, 36), (245, 38), (246, 17), (247, 35), (249, 41), (250, 19), (251, 34), (252, 35), (253, 22), (254, 41), (255, 24), (256, 20), (258, 37), (259, 37), (260, 37), (262, 39), (263, 21), (264, 19), (265, 35), (266, 34), (267, 31), (268, 34), (269, 23), (270, 32), (271, 38), (272, 39), (273, 21), (274, 38), (275, 37), (276, 34), (278, 34), (279, 35), (281, 33), (282, 36), (283, 34), (284, 32), (285, 38), (288, 18), (289, 33), (291, 39), (292, 17), (293, 40), (294, 20), (295, 39), (296, 37), (297, 36), (298, 23), (299, 22), (300, 40), (302, 34), (303, 33), (305, 35), (309, 38), (313, 36), (314, 38), (315, 43), (316, 36), (317, 32), (319, 33), (323, 18), (325, 31), (327, 29), (328, 30), (329, 43), (331, 28), (332, 19), (333, 32), (334, 19), (335, 31), (336, 31), (337, 29), (338, 28), (339, 32), (340, 23), (341, 24), (342, 32), (343, 22), (344, 37), (345, 21), (346, 38), (347, 20), (348, 37), (349, 39), (350, 22), (351, 20), (352, 27), (354, 27), (355, 26), (356, 19), (357, 29), (358, 26), (359, 31), (365, 38), (366, 38), (367, 37), (370, 39), (371, 36), (372, 37), (376, 33), (377, 18), (378, 27), (380, 19), (381, 26), (382, 31), (383, 22), (384, 28), (385, 30), (386, 34), (387, 21), (388, 38), (389, 32), (390, 31), (391, 33), (392, 36), (393, 32), (394, 29), (395, 27), (396, 30), (397, 38), (398, 23), (399, 32), (400, 31), (401, 35), (405, 20), (406, 40), (408, 37), (409, 43), (410, 38), (411, 37), (413, 36), (415, 25), (416, 34), (417, 20), (418, 17), (419, 28), (420, 28), (421, 38), (422, 32), (423, 25), (424, 32), (425, 33), (426, 33), (427, 31), (428, 35), (429, 25), (430, 30), (431, 31), (432, 36), (433, 28), (434, 36), (436, 25), (438, 34), (440, 42), (441, 38), (442, 37), (443, 21), (444, 33), (445, 38), (446, 40), (447, 37), (448, 39), (449, 33), (450, 34), (451, 37), (452, 36), (453, 31), (454, 38), (455, 42), (456, 40), (457, 42), (458, 43), (459, 42), (460, 43), (461, 40), (462, 42), (463, 35), (464, 38), (465, 42)]
nb_edges_0 = 4682 rho= 0.1 # of rows = 43 # of columns= 403 total_degree_0= 4682 RHS= 468.20000000000005
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  4 with obj value: 1089.49609375 KP time = 0.048102124012075365 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.00695 - (Local CPU) 0.00695 - (Global CPU) 0.05505

 Solve status: Optimal Objective value: 336.6166666666667 nb_rows 43 nb_cols 384
----------------------------------------
----------------------------------------

        Updated data after iteration: 4 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (43, 384) and density : 0.7452156007751938 and number of remaining ones : 12647
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.745 density  and density_threshold= 0.770


I am in the while loop with i= 5 density= 0.7452156007751938 and fixed_threshold= 0.77

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value :  949.2368421052631
I solved model name = row_knapsack_problem for iteration i =  5 with obj value: 949.2368421052631 KP time = 0.055052332987543195 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.00514 - (Local CPU) 0.00514 - (Global CPU) 0.06020

 Solve status: Optimal Objective value: 949.2368421052631 nb_rows 39 nb_cols 384
----------------------------------------
----------------------------------------

        Updated data after iteration: 5 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (39, 384) and density : 0.7504674145299145 and number of remaining ones : 11239
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(0, 36), (1, 38), (2, 35), (3, 38), (4, 37), (5, 35), (6, 33), (7, 39), (8, 32), (9, 37), (10, 32), (11, 33), (12, 32), (13, 32), (14, 33), (15, 31), (16, 35), (17, 39), (20, 35), (22, 36), (28, 30), (30, 34), (33, 37), (35, 33), (39, 28), (40, 31), (42, 32), (43, 30), (44, 29), (45, 30), (46, 35), (48, 31), (49, 19), (50, 19), (51, 32), (52, 20), (53, 33), (54, 31), (55, 31), (56, 32), (57, 20), (58, 32), (59, 28), (60, 29), (61, 24), (62, 25), (63, 26), (64, 25), (65, 34), (66, 34), (67, 32), (68, 29), (69, 34), (70, 19), (71, 30), (72, 31), (73, 30), (74, 22), (75, 31), (76, 21), (77, 31), (78, 19), (79, 28), (81, 29), (82, 24), (83, 19), (85, 32), (86, 37), (87, 35), (88, 33), (89, 31), (90, 33), (91, 35), (92, 16), (93, 19), (94, 25), (95, 25), (96, 26), (97, 34), (98, 21), (99, 28), (100, 36), (101, 32), (102, 32), (103, 29), (104, 31), (105, 31), (106, 29), (107, 35), (108, 29), (109, 32), (110, 28), (111, 35), (112, 26), (113, 22), (114, 36), (115, 27), (116, 32), (117, 30), (118, 36), (120, 24), (121, 30), (122, 21), (123, 28), (124, 32), (125, 24), (126, 29), (127, 32), (128, 33), (129, 18), (130, 22), (131, 28), (132, 34), (133, 36), (134, 35), (135, 30), (136, 27), (138, 35), (140, 31), (142, 30), (143, 29), (144, 21), (145, 31), (146, 19), (147, 31), (150, 35), (151, 33), (152, 31), (153, 34), (154, 27), (155, 22), (156, 32), (157, 32), (158, 20), (159, 26), (160, 22), (161, 25), (162, 30), (163, 29), (164, 29), (165, 19), (166, 25), (167, 26), (168, 25), (169, 27), (170, 33), (171, 23), (172, 24), (173, 26), (174, 22), (175, 32), (176, 29), (177, 27), (178, 22), (179, 29), (180, 24), (181, 26), (182, 21), (183, 20), (184, 19), (185, 22), (186, 29), (187, 25), (188, 21), (189, 29), (190, 23), (191, 29), (192, 28), (193, 30), (194, 28), (195, 27), (196, 30), (197, 27), (198, 30), (199, 27), (200, 32), (201, 30), (202, 30), (203, 30), (204, 32), (205, 35), (206, 35), (207, 24), (208, 22), (209, 28), (210, 31), (211, 30), (212, 29), (213, 20), (214, 31), (215, 28), (217, 19), (218, 35), (219, 29), (220, 18), (221, 36), (222, 20), (223, 24), (224, 33), (225, 25), (226, 29), (227, 28), (228, 30), (229, 32), (230, 22), (231, 32), (232, 31), (233, 32), (234, 24), (235, 24), (236, 21), (237, 33), (239, 22), (240, 31), (241, 24), (242, 35), (244, 33), (245, 37), (247, 33), (249, 38), (251, 32), (252, 33), (253, 19), (254, 37), (255, 20), (256, 16), (258, 33), (259, 34), (260, 36), (262, 35), (263, 18), (265, 33), (266, 30), (267, 30), (268, 30), (269, 19), (270, 32), (271, 34), (272, 36), (273, 19), (274, 34), (275, 33), (276, 30), (278, 31), (279, 32), (281, 31), (282, 33), (283, 31), (284, 30), (285, 35), (289, 32), (291, 36), (293, 36), (294, 17), (295, 37), (296, 36), (297, 32), (298, 20), (299, 18), (300, 36), (302, 32), (303, 29), (305, 32), (309, 35), (313, 35), (314, 35), (315, 39), (316, 35), (317, 31), (319, 31), (325, 30), (327, 28), (328, 30), (329, 39), (331, 27), (332, 15), (333, 31), (335, 31), (336, 27), (337, 25), (338, 27), (339, 29), (340, 22), (341, 20), (342, 29), (343, 22), (344, 34), (345, 21), (346, 34), (347, 20), (348, 34), (349, 37), (350, 21), (351, 20), (352, 23), (354, 23), (355, 23), (356, 19), (357, 25), (358, 22), (359, 27), (365, 35), (366, 34), (367, 34), (370, 36), (371, 33), (372, 34), (376, 31), (378, 25), (381, 24), (382, 29), (383, 21), (384, 26), (385, 26), (386, 31), (387, 18), (388, 34), (389, 28), (390, 28), (391, 29), (392, 32), (393, 30), (394, 28), (395, 26), (396, 27), (397, 36), (398, 19), (399, 29), (400, 28), (401, 32), (405, 16), (406, 36), (408, 36), (409, 39), (410, 34), (411, 33), (413, 33), (415, 25), (416, 30), (417, 17), (419, 27), (420, 26), (421, 34), (422, 28), (423, 22), (424, 28), (425, 30), (426, 30), (427, 27), (428, 31), (429, 25), (430, 27), (431, 27), (432, 33), (433, 26), (434, 34), (436, 21), (438, 32), (440, 38), (441, 34), (442, 33), (443, 19), (444, 30), (445, 34), (446, 36), (447, 33), (448, 35), (449, 29), (450, 30), (451, 34), (452, 33), (453, 27), (454, 34), (455, 38), (456, 36), (457, 38), (458, 39), (459, 38), (460, 39), (461, 36), (462, 39), (463, 32), (464, 35), (465, 38)]
nb_edges_0 = 3737 rho= 0.1 # of rows = 39 # of columns= 384 total_degree_0= 3737 RHS= 373.70000000000005
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  5 with obj value: 949.2368421052631 KP time = 0.060197125014383346 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.00702 - (Local CPU) 0.00702 - (Global CPU) 0.06722

 Solve status: Optimal Objective value: 312.115 nb_rows 39 nb_cols 366
----------------------------------------
----------------------------------------

        Updated data after iteration: 5 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (39, 366) and density : 0.7649572649572649 and number of remaining ones : 11239
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.765 density  and density_threshold= 0.770


I am in the while loop with i= 6 density= 0.7649572649572649 and fixed_threshold= 0.77

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value :  850.4117647058824
I solved model name = row_knapsack_problem for iteration i =  6 with obj value: 850.4117647058824 KP time = 0.06722108402755111 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.00522 - (Local CPU) 0.00522 - (Global CPU) 0.07244

 Solve status: Optimal Objective value: 850.4117647058824 nb_rows 35 nb_cols 366
----------------------------------------
----------------------------------------

        Updated data after iteration: 6 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (35, 366) and density : 0.770335675253708 and number of remaining ones : 9868
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(0, 33), (1, 34), (2, 31), (3, 34), (4, 33), (5, 31), (6, 30), (7, 35), (8, 28), (9, 33), (10, 29), (11, 29), (12, 29), (13, 29), (14, 30), (15, 27), (16, 31), (17, 35), (20, 31), (22, 32), (28, 27), (30, 30), (33, 34), (35, 29), (39, 25), (40, 28), (42, 28), (43, 26), (44, 27), (45, 27), (46, 31), (48, 27), (50, 16), (51, 28), (52, 17), (53, 29), (54, 28), (55, 29), (56, 28), (57, 18), (58, 30), (59, 25), (60, 27), (61, 21), (62, 25), (63, 24), (64, 21), (65, 30), (66, 30), (67, 29), (68, 27), (69, 31), (70, 17), (71, 27), (72, 28), (73, 27), (74, 19), (75, 27), (76, 18), (77, 28), (78, 16), (79, 24), (81, 28), (82, 20), (83, 17), (85, 28), (86, 34), (87, 31), (88, 30), (89, 28), (90, 30), (91, 33), (93, 15), (94, 21), (95, 25), (96, 22), (97, 31), (98, 18), (99, 27), (100, 33), (101, 29), (102, 29), (103, 26), (104, 30), (105, 28), (106, 27), (107, 32), (108, 27), (109, 29), (110, 27), (111, 33), (112, 23), (113, 21), (114, 34), (115, 23), (116, 29), (117, 26), (118, 34), (120, 21), (121, 28), (122, 18), (123, 27), (124, 30), (125, 21), (126, 26), (127, 29), (128, 29), (130, 19), (131, 24), (132, 32), (133, 32), (134, 31), (135, 27), (136, 26), (138, 33), (140, 29), (142, 27), (143, 27), (144, 19), (145, 27), (147, 28), (150, 33), (151, 30), (152, 29), (153, 31), (154, 24), (155, 20), (156, 28), (157, 28), (158, 19), (159, 23), (160, 20), (161, 24), (162, 27), (163, 27), (164, 25), (166, 23), (167, 25), (168, 22), (169, 25), (170, 29), (171, 21), (172, 22), (173, 23), (174, 20), (175, 28), (176, 26), (177, 26), (178, 21), (179, 27), (180, 22), (181, 25), (182, 18), (183, 19), (185, 20), (186, 27), (187, 22), (188, 19), (189, 25), (190, 21), (191, 26), (192, 26), (193, 26), (194, 25), (195, 23), (196, 28), (197, 25), (198, 27), (199, 24), (200, 29), (201, 27), (202, 26), (203, 27), (204, 28), (205, 31), (206, 31), (207, 22), (208, 19), (209, 25), (210, 28), (211, 27), (212, 26), (213, 18), (214, 29), (215, 25), (218, 32), (219, 27), (221, 32), (222, 18), (223, 22), (224, 30), (225, 23), (226, 25), (227, 26), (228, 28), (229, 30), (230, 18), (231, 29), (232, 30), (233, 30), (234, 22), (235, 22), (236, 19), (237, 31), (239, 19), (240, 28), (241, 21), (242, 32), (244, 31), (245, 34), (247, 30), (249, 34), (251, 31), (252, 29), (253, 15), (254, 34), (255, 16), (258, 31), (259, 31), (260, 32), (262, 31), (265, 30), (266, 28), (267, 28), (268, 28), (269, 16), (270, 30), (271, 30), (272, 34), (273, 16), (274, 30), (275, 30), (276, 29), (278, 29), (279, 31), (281, 30), (282, 31), (283, 30), (284, 30), (285, 32), (289, 30), (291, 33), (293, 33), (295, 34), (296, 32), (297, 30), (298, 16), (300, 32), (302, 30), (303, 27), (305, 29), (309, 32), (313, 33), (314, 32), (315, 35), (316, 32), (317, 28), (319, 29), (325, 28), (327, 26), (328, 27), (329, 35), (331, 25), (333, 28), (335, 28), (336, 25), (337, 24), (338, 25), (339, 26), (340, 20), (341, 18), (342, 26), (343, 20), (344, 30), (345, 20), (346, 31), (347, 18), (348, 30), (349, 33), (350, 19), (351, 19), (352, 20), (354, 20), (355, 20), (356, 17), (357, 22), (358, 19), (359, 23), (365, 31), (366, 31), (367, 30), (370, 32), (371, 29), (372, 31), (376, 28), (378, 21), (381, 22), (382, 26), (383, 19), (384, 23), (385, 24), (386, 29), (388, 31), (389, 25), (390, 25), (391, 25), (392, 28), (393, 29), (394, 25), (395, 24), (396, 24), (397, 32), (399, 25), (400, 25), (401, 28), (406, 32), (408, 32), (409, 35), (410, 30), (411, 29), (413, 30), (415, 24), (416, 27), (419, 25), (420, 24), (421, 30), (422, 26), (423, 20), (424, 26), (425, 27), (426, 28), (427, 25), (428, 29), (429, 23), (430, 25), (431, 24), (432, 29), (433, 23), (434, 31), (436, 19), (438, 29), (440, 34), (441, 30), (442, 30), (444, 28), (445, 30), (446, 32), (447, 29), (448, 31), (449, 26), (450, 27), (451, 30), (452, 29), (453, 23), (454, 30), (455, 34), (456, 32), (457, 34), (458, 35), (459, 34), (460, 35), (461, 32), (462, 35), (463, 28), (464, 31), (465, 34)]
nb_edges_0 = 2942 rho= 0.1 # of rows = 35 # of columns= 366 total_degree_0= 2942 RHS= 294.2
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  6 with obj value: 850.4117647058824 KP time = 0.07243695901706815 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.00686 - (Local CPU) 0.00686 - (Global CPU) 0.07930

 Solve status: Optimal Objective value: 266.21176470588233 nb_rows 35 nb_cols 349
----------------------------------------
----------------------------------------

        Updated data after iteration: 6 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (35, 349) and density : 0.7846090871878838 and number of remaining ones : 9868
        

----------------------------------------
----------------------------------------

----------------------------------------

            End of greedy approaches. Exit while loop. I did: 6 iterations
            Density : 0.785 > 0.77
            It took me : 0.079 time
            Found matrix of size : (35, 349) and density : 0.785
            
----------------------------------------

 Calling exact approaches for QB clique discovery with delta = 0.0
----------------------------------------

----------------------------------------------------------------------
Model status: Optimal
----------------------------------------------------------------------
Computed Objective Value: 1331.0
Model status: Optimal
Solution saved to Experiments/prob_8/results_0_M_1.csv

----------------------------------------------------------------------
Stats
 Model solved : max_e_r  Local Time:  - (real) 5717.54760 - (Local CPU) 1512.88481 - (Global CPU) 1512.88481

 Solve status: Optimal Objective value: 1331.0 nb_rows 11 nb_cols 121
----------------------------------------

----------------------------------------
Results from update_data after solving model = max_e_r  with delta =   0.0 and dec_conq=  0
Number of Remaining  Rows  : 11
Number of Remaining Columns : 121
Remaining  number Edges_0 P: 0 Remaining  number Edges_1 : 1331 Density : 1.0 current obj value 1331.0
----------------------------------------

----------------------------------------

Exit from the heuristic (or exact  approach)  max_e_r  with delta= 0.0 Found matrix with rows_res of lenght = 11  and cols_res of lenght = 121
----------------------------------------

        Exit from the exact approach: max_e_r for matrix 1
        with delta =  0.0
        Found matrix of size : (11, 121)
        and density : 1.0
        and # of ones : 1331
        and Heuristic QBC time   : 0.00000
        and Global QBC  time  : 1512.88481
        
 Remaining Rows  : [(0, 121), (4, 121), (5, 121), (8, 121), (31, 121), (35, 121), (42, 121), (52, 121), (55, 121), (57, 121), (63, 121)]
 Remaining  Cols  : [(1, 11), (3, 11), (7, 11), (17, 11), (22, 11), (33, 11), (46, 11), (48, 11), (51, 11), (54, 11), (55, 11), (56, 11), (59, 11), (65, 11), (79, 11), (81, 11), (85, 11), (86, 11), (87, 11), (88, 11), (90, 11), (91, 11), (99, 11), (101, 11), (102, 11), (103, 11), (104, 11), (105, 11), (106, 11), (107, 11), (108, 11), (109, 11), (110, 11), (114, 11), (118, 11), (121, 11), (123, 11), (124, 11), (127, 11), (132, 11), (133, 11), (134, 11), (136, 11), (138, 11), (150, 11), (153, 11), (156, 11), (157, 11), (162, 11), (163, 11), (169, 11), (170, 11), (176, 11), (206, 11), (210, 11), (218, 11), (219, 11), (221, 11), (223, 11), (224, 11), (228, 11), (229, 11), (232, 11), (233, 11), (234, 11), (242, 11), (244, 11), (245, 11), (247, 11), (249, 11), (251, 11), (254, 11), (258, 11), (259, 11), (260, 11), (262, 11), (265, 11), (270, 11), (271, 11), (272, 11), (275, 11), (276, 11), (279, 11), (281, 11), (282, 11), (285, 11), (289, 11), (291, 11), (293, 11), (295, 11), (296, 11), (297, 11), (302, 11), (303, 11), (305, 11), (313, 11), (314, 11), (315, 11), (316, 11), (329, 11), (337, 11), (349, 11), (365, 11), (366, 11), (370, 11), (371, 11), (372, 11), (376, 11), (384, 11), (392, 11), (397, 11), (409, 11), (419, 11), (426, 11), (434, 11), (438, 11), (457, 11), (458, 11), (460, 11), (462, 11), (465, 11)]

----------------------------------------------------------------------
 
    End of computations for matrix 1 in  data/prob_8.csv at level 0 and debug  2
    With  model: max_e_r and quasi-biclique error: 0.0 
    Size of Remaining matrix : (11,121), with  density : 1.0 and number of ones: 1331
    Global Time (in sec): 1512.964
    Total Time in QBC approaches: 1512.885
    Time in greedy approach: 0.079,  size of matrix found by greedy : (35,349) 
    With density : 0.785 and # ones : 9584 
    Time in heuristic only : 0.000 
    Time in warm start only : 0.000
    Number of iterations in greedy approach: 6
    Percentage of greedy approach run time in global run time : 0.01% 
    Percentage of heuristic run time in QBC run time : 0.00%
    With zero deletion rate (rho): 0.1 and threshold: 0.77
    
----------------------------------------------------------------------

PROCESSED TASK NUMBER 1 with (edges 19513) -> obj = 1331  with solving TIME : 5717.8775 sec

Best task: 1, Best objective: 1331 with # rows 11 and # cols 121
 Number of fathomed tasks : 0

----------------------------------------------------------------------

Evaluated Queue:
----------------------------------------------------------------------
 Size of the evaluated  queue: 1
 Matrix: 1, # Rows: 64,  # Cols: 466,  # Edges: 19513, size max clique  1331, # rows: 11 # columns: 121

----------------------------------------------------------------------

----------------------------------------------------------------------
Size of the COPY_QUEUE: 1
Matrix: 1, Size: 19513, Number Rows: 64, Number Cols: 466, Number Edges: 19513

----------------------------------------------------------------------
***End of computations !!!

----------------------------------------------------------------------
----------------------------------------------------------------------
 
    End of computations for matrix  data/prob_8.csv with rows: 64 and columns 466
    with  input density : 0.654 and number of ones: 19513
    time limit has been set to 5400
    using  model: max_e_r  with quasi-biclique error: 0.0 
    nd density_threshold: 0.770 and zero deletion rate (rho): 0.1 and debug: 2
    Decrease and conquer levels:  0, # ext task: 1, int task : 0 
    The solution has been found in matrix : 1  with 
    size max clique  1331, # rows: 11 # columns: 121,
    # solved  tasks : 1, # skipped  tasks : 0  # fathomed tasks : 0
    
----------------------------------------------------------------------

Best task: 1, Best objective: 1331 with # rows 11 and # cols 121

----------------------------------------------------------------------
 Model building and solving global time: 5721.2984 sec
 Tasks_generation time: 0.0000 sec
 Tasks_pure_solving time: 5717.8775 sec

size egdes_1: 19513

row_set: {0, 35, 4, 5, 8, 42, 52, 55, 57, 63, 31}
col_set: {1, 3, 7, 17, 22, 33, 46, 48, 51, 54, 55, 56, 59, 65, 79, 81, 85, 86, 87, 88, 90, 91, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 114, 118, 121, 123, 124, 127, 132, 133, 134, 136, 138, 150, 153, 156, 157, 162, 163, 169, 170, 176, 206, 210, 218, 219, 221, 223, 224, 228, 229, 232, 233, 234, 242, 244, 245, 247, 249, 251, 254, 258, 259, 260, 262, 265, 270, 271, 272, 275, 276, 279, 281, 282, 285, 289, 291, 293, 295, 296, 297, 302, 303, 305, 313, 314, 315, 316, 329, 337, 349, 365, 366, 370, 371, 372, 376, 384, 392, 397, 409, 419, 426, 434, 438, 457, 458, 460, 462, 465}
Number of ones in the best submatrix : 1331
