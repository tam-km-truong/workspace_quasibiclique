----------------------------------------
 Input Data in csv files : data/prob_8.csv
Number Rows Data : 64
Number Cols Data : 466
Number Edges_1 : 19513
Number Edges_0 : 10311
----------------------------------------

----------------------------------------------------------------------
***Stats Current Input for matrix 1 in  data/prob_8.csv at level 2 and with model:  max_e_c***
Size of current matrix :  64 * 466 = 29824 ; dec_conq: 2
Prev_lower_bound :  None number input zeros :  19513 ; number input ones :  10311
rho =  0.1 ; delta :  0.0
Input density : 0.346 ; density_threshold: 0.70000
----------------------------------------------------------------------
End Current  Stats
----------------------------------------------------------------------


calling greedy approaches for zero deletion, density= 0.346 density  and density_threshold= 0.700


I am in the while loop with i= 1 density= 0.34572827253218885 and fixed_threshold= 0.7

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 101.681
I solved model name = row_knapsack_problem for iteration i =  1 with obj value: 101.68133971291866 KP time = 0.0 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01922 - (Local CPU) 0.01922 - (Global CPU) 0.01922

 Solve status: Optimal Objective value: 101.68134 nb_rows 61 nb_cols 466
----------------------------------------
----------------------------------------

        Updated data after iteration: 1 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (61, 466) and density : 0.358 and number of remaining ones : 10182
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(0, 3), (1, 15), (2, 5), (3, 13), (4, 5), (5, 17), (6, 8), (7, 10), (8, 15), (9, 15), (10, 20), (11, 18), (12, 19), (13, 21), (14, 21), (15, 22), (16, 16), (17, 1), (18, 51), (19, 39), (20, 7), (21, 48), (22, 6), (23, 47), (24, 36), (25, 37), (26, 36), (27, 49), (28, 23), (29, 43), (30, 13), (31, 41), (32, 43), (33, 7), (34, 39), (35, 11), (36, 36), (37, 30), (38, 38), (39, 19), (40, 14), (41, 35), (42, 14), (43, 14), (44, 21), (45, 13), (46, 10), (47, 40), (48, 12), (49, 26), (50, 33), (51, 10), (52, 27), (53, 15), (54, 17), (55, 17), (56, 13), (57, 28), (58, 13), (59, 20), (60, 17), (61, 27), (62, 27), (63, 23), (64, 18), (65, 9), (66, 10), (67, 12), (68, 15), (69, 10), (70, 31), (71, 13), (72, 18), (73, 16), (74, 27), (75, 13), (76, 25), (77, 17), (78, 31), (79, 24), (80, 39), (81, 23), (82, 20), (83, 31), (84, 31), (85, 12), (86, 11), (87, 10), (88, 10), (89, 12), (90, 12), (91, 14), (92, 32), (93, 30), (94, 21), (95, 23), (96, 20), (97, 17), (98, 26), (99, 16), (100, 11), (101, 16), (102, 11), (103, 12), (104, 15), (105, 10), (106, 18), (107, 9), (108, 19), (109, 15), (110, 24), (111, 11), (112, 17), (113, 29), (114, 11), (115, 16), (116, 12), (117, 12), (118, 20), (119, 36), (120, 20), (121, 22), (122, 24), (123, 26), (124, 24), (125, 17), (126, 14), (127, 16), (128, 13), (129, 26), (130, 17), (131, 15), (132, 17), (133, 8), (134, 16), (135, 13), (136, 27), (137, 29), (138, 14), (139, 47), (140, 17), (141, 39), (142, 13), (143, 22), (144, 30), (145, 12), (146, 30), (147, 14), (148, 41), (149, 39), (150, 13), (151, 14), (152, 14), (153, 8), (154, 19), (155, 26), (156, 11), (157, 15), (158, 30), (159, 19), (160, 28), (161, 21), (162, 16), (163, 20), (164, 22), (165, 36), (166, 23), (167, 22), (168, 28), (169, 19), (170, 11), (171, 21), (172, 20), (173, 25), (174, 27), (175, 11), (176, 16), (177, 22), (178, 27), (179, 17), (180, 31), (181, 29), (182, 27), (183, 32), (184, 34), (185, 26), (186, 18), (187, 22), (188, 30), (189, 13), (190, 25), (191, 16), (192, 19), (193, 15), (194, 19), (195, 22), (196, 22), (197, 21), (198, 12), (199, 24), (200, 18), (201, 21), (202, 15), (203, 15), (204, 9), (205, 10), (206, 9), (207, 21), (208, 30), (209, 18), (210, 16), (211, 13), (212, 18), (213, 27), (214, 16), (215, 19), (216, 59), (217, 29), (218, 8), (219, 21), (220, 31), (221, 9), (222, 28), (223, 25), (224, 12), (225, 25), (226, 18), (227, 16), (228, 13), (229, 15), (230, 23), (231, 12), (232, 20), (233, 16), (234, 25), (235, 24), (236, 30), (237, 13), (238, 37), (239, 26), (240, 18), (241, 26), (242, 7), (243, 40), (244, 14), (245, 14), (246, 36), (247, 12), (248, 40), (249, 7), (250, 30), (251, 17), (252, 11), (253, 30), (254, 7), (255, 23), (256, 31), (257, 47), (258, 11), (259, 10), (260, 18), (261, 39), (262, 9), (263, 28), (264, 30), (265, 16), (266, 14), (267, 19), (268, 16), (269, 26), (270, 14), (271, 10), (272, 7), (273, 28), (274, 11), (275, 10), (276, 13), (277, 38), (278, 15), (279, 13), (280, 35), (281, 18), (282, 15), (283, 12), (284, 16), (285, 10), (286, 39), (287, 39), (288, 29), (289, 19), (290, 36), (291, 10), (292, 38), (293, 8), (294, 31), (295, 9), (296, 8), (297, 15), (298, 30), (299, 25), (300, 8), (301, 40), (302, 15), (303, 18), (304, 36), (305, 17), (306, 38), (307, 32), (308, 33), (309, 15), (310, 51), (311, 51), (312, 39), (313, 12), (314, 13), (315, 4), (316, 16), (317, 18), (318, 35), (319, 14), (320, 43), (321, 43), (322, 45), (323, 34), (324, 45), (325, 18), (326, 37), (327, 21), (328, 22), (329, 3), (330, 49), (331, 21), (332, 31), (333, 20), (334, 33), (335, 19), (336, 17), (337, 23), (338, 22), (339, 13), (340, 31), (341, 29), (342, 22), (343, 29), (344, 11), (345, 33), (346, 13), (347, 31), (348, 12), (349, 10), (350, 29), (351, 29), (352, 24), (353, 43), (354, 23), (355, 20), (356, 29), (357, 18), (358, 25), (359, 18), (360, 45), (361, 43), (362, 48), (363, 49), (364, 48), (365, 9), (366, 14), (367, 10), (368, 51), (369, 44), (370, 11), (371, 13), (372, 12), (373, 56), (374, 38), (375, 50), (376, 14), (377, 39), (378, 23), (379, 44), (380, 32), (381, 28), (382, 14), (383, 34), (384, 24), (385, 19), (386, 11), (387, 33), (388, 14), (389, 22), (390, 23), (391, 13), (392, 13), (393, 14), (394, 23), (395, 24), (396, 21), (397, 11), (398, 25), (399, 21), (400, 20), (401, 12), (402, 39), (403, 38), (404, 37), (405, 27), (406, 6), (407, 39), (408, 14), (409, 5), (410, 11), (411, 14), (412, 43), (413, 14), (414, 44), (415, 26), (416, 13), (417, 32), (418, 37), (419, 23), (420, 22), (421, 9), (422, 15), (423, 28), (424, 14), (425, 21), (426, 16), (427, 14), (428, 12), (429, 23), (430, 18), (431, 20), (432, 11), (433, 21), (434, 11), (435, 39), (436, 23), (437, 38), (438, 14), (439, 35), (440, 3), (441, 18), (442, 19), (443, 37), (444, 17), (445, 17), (446, 16), (447, 18), (448, 16), (449, 23), (450, 22), (451, 5), (452, 19), (453, 24), (454, 10), (455, 15), (456, 17), (457, 7), (458, 15), (459, 12), (460, 15), (461, 18), (462, 15), (463, 22), (464, 19), (465, 13)]
nb_edges_0 = 18244 rho= 0.1 # of rows = 61 # of columns= 466 total_degree_0= 18244 RHS= 1824.4
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  1 with obj value: 101.68133971291866 KP time = 0.01921741699334234 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01890 - (Local CPU) 0.01890 - (Global CPU) 0.03812

 Solve status: Optimal Objective value: 228.95385 nb_rows 61 nb_cols 432
----------------------------------------
----------------------------------------

        Updated data after iteration: 1 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (61, 432) and density : 0.378 and number of remaining ones : 10182
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.378 density  and density_threshold= 0.700


I am in the while loop with i= 2 density= 0.37758044930176077 and fixed_threshold= 0.7

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 793.907
I solved model name = row_knapsack_problem for iteration i =  2 with obj value: 793.9070422535211 KP time = 0.03811858408153057 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01643 - (Local CPU) 0.01644 - (Global CPU) 0.05455

 Solve status: Optimal Objective value: 793.90704 nb_rows 55 nb_cols 432
----------------------------------------
----------------------------------------

        Updated data after iteration: 2 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (55, 432) and density : 0.383 and number of remaining ones : 9102
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(1, 14), (3, 11), (5, 16), (7, 9), (8, 14), (9, 14), (10, 18), (11, 17), (12, 19), (13, 20), (14, 20), (15, 21), (16, 15), (18, 46), (19, 37), (21, 43), (23, 43), (24, 34), (25, 35), (26, 34), (27, 44), (28, 19), (29, 41), (30, 13), (31, 38), (32, 42), (34, 37), (35, 10), (36, 33), (37, 29), (38, 34), (39, 19), (40, 12), (41, 32), (42, 13), (43, 14), (44, 18), (45, 11), (46, 9), (47, 37), (48, 12), (49, 25), (50, 33), (51, 8), (52, 26), (53, 13), (54, 15), (55, 15), (56, 11), (57, 26), (58, 12), (59, 15), (60, 14), (61, 25), (62, 25), (63, 21), (64, 18), (66, 9), (67, 11), (68, 13), (69, 10), (70, 29), (71, 11), (72, 17), (73, 14), (74, 24), (75, 9), (76, 24), (77, 16), (78, 31), (79, 23), (80, 36), (81, 18), (82, 19), (83, 29), (84, 30), (85, 11), (86, 9), (87, 9), (88, 9), (89, 10), (90, 10), (91, 12), (92, 30), (93, 30), (94, 19), (95, 21), (96, 19), (97, 15), (98, 25), (99, 12), (100, 9), (101, 15), (102, 10), (103, 10), (104, 13), (105, 9), (106, 16), (108, 17), (109, 15), (110, 22), (111, 10), (112, 16), (113, 25), (114, 10), (115, 16), (116, 10), (117, 11), (118, 18), (119, 33), (120, 19), (121, 19), (122, 21), (123, 21), (124, 21), (125, 16), (126, 12), (127, 13), (128, 11), (129, 24), (130, 15), (131, 15), (132, 16), (134, 13), (135, 11), (136, 24), (137, 27), (138, 12), (139, 42), (140, 13), (141, 36), (142, 13), (143, 20), (144, 27), (145, 12), (146, 27), (147, 14), (148, 38), (149, 36), (150, 13), (151, 14), (152, 13), (154, 18), (155, 26), (156, 8), (157, 14), (158, 28), (159, 16), (160, 26), (161, 19), (162, 11), (163, 17), (164, 20), (165, 35), (166, 22), (167, 20), (168, 27), (169, 17), (170, 9), (171, 19), (172, 16), (173, 23), (174, 26), (175, 10), (176, 14), (177, 19), (178, 24), (179, 15), (180, 29), (181, 26), (182, 25), (183, 32), (184, 31), (185, 26), (186, 17), (187, 21), (188, 28), (189, 13), (190, 24), (191, 15), (192, 17), (193, 14), (194, 18), (195, 19), (196, 20), (197, 19), (198, 8), (199, 21), (200, 15), (201, 18), (202, 14), (203, 13), (205, 10), (207, 19), (208, 27), (209, 15), (210, 15), (211, 12), (212, 17), (213, 27), (214, 13), (215, 17), (216, 53), (217, 26), (219, 19), (220, 29), (222, 24), (223, 23), (224, 10), (225, 25), (226, 16), (227, 14), (228, 9), (229, 15), (230, 22), (231, 9), (232, 19), (233, 13), (234, 22), (235, 19), (236, 30), (237, 12), (238, 34), (239, 25), (240, 15), (241, 25), (243, 38), (244, 12), (245, 14), (246, 33), (247, 9), (248, 37), (250, 28), (251, 16), (252, 10), (253, 28), (255, 22), (256, 30), (257, 45), (258, 10), (259, 9), (260, 18), (261, 36), (263, 25), (264, 29), (265, 15), (266, 12), (267, 17), (268, 15), (269, 24), (270, 12), (271, 8), (273, 25), (274, 9), (275, 8), (276, 12), (277, 35), (278, 13), (279, 11), (280, 30), (281, 15), (282, 14), (283, 11), (284, 15), (285, 10), (286, 34), (287, 36), (288, 26), (289, 17), (290, 33), (291, 9), (292, 34), (294, 29), (297, 14), (298, 28), (299, 23), (301, 37), (302, 14), (303, 16), (304, 32), (305, 12), (306, 36), (307, 29), (308, 31), (309, 11), (310, 46), (311, 48), (312, 35), (313, 12), (314, 10), (316, 14), (317, 16), (318, 31), (319, 13), (320, 40), (321, 40), (322, 42), (323, 31), (324, 41), (325, 17), (326, 33), (327, 20), (328, 20), (330, 46), (331, 20), (332, 27), (333, 20), (334, 32), (335, 18), (336, 14), (337, 21), (338, 21), (339, 11), (340, 29), (341, 25), (342, 21), (343, 26), (344, 10), (345, 30), (346, 10), (347, 29), (348, 10), (349, 9), (350, 27), (351, 26), (352, 23), (353, 40), (354, 22), (355, 18), (356, 26), (357, 17), (358, 23), (359, 16), (360, 43), (361, 41), (362, 46), (363, 47), (364, 45), (366, 12), (367, 8), (368, 47), (369, 41), (370, 9), (371, 10), (372, 9), (373, 52), (374, 37), (375, 46), (376, 11), (377, 37), (378, 22), (379, 40), (380, 28), (381, 23), (382, 10), (383, 30), (384, 18), (385, 18), (386, 9), (387, 33), (388, 14), (389, 20), (390, 22), (391, 13), (392, 13), (393, 13), (394, 19), (395, 19), (396, 20), (397, 10), (398, 23), (399, 21), (400, 19), (401, 11), (402, 35), (403, 35), (404, 32), (405, 24), (407, 35), (408, 13), (410, 11), (411, 14), (412, 39), (413, 14), (414, 41), (415, 22), (416, 13), (417, 28), (418, 35), (419, 22), (420, 20), (422, 13), (423, 26), (424, 13), (425, 21), (426, 16), (427, 12), (428, 10), (429, 21), (430, 18), (431, 19), (432, 11), (433, 18), (434, 9), (435, 36), (436, 22), (437, 35), (438, 13), (439, 31), (441, 17), (442, 18), (443, 35), (444, 17), (445, 15), (446, 15), (447, 17), (448, 15), (449, 22), (450, 21), (452, 17), (453, 23), (454, 8), (455, 14), (456, 15), (458, 14), (459, 11), (460, 14), (461, 17), (462, 14), (463, 21), (464, 18), (465, 13)]
nb_edges_0 = 14658 rho= 0.1 # of rows = 55 # of columns= 432 total_degree_0= 14658 RHS= 1465.8000000000002
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  2 with obj value: 793.9070422535211 KP time = 0.05455391702707857 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01920 - (Local CPU) 0.01920 - (Global CPU) 0.07376

 Solve status: Optimal Objective value: 282.95556 nb_rows 55 nb_cols 400
----------------------------------------
----------------------------------------

        Updated data after iteration: 2 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (55, 400) and density : 0.401 and number of remaining ones : 9102
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.401 density  and density_threshold= 0.700


I am in the while loop with i= 3 density= 0.4007727272727273 and fixed_threshold= 0.7

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 729.417
I solved model name = row_knapsack_problem for iteration i =  3 with obj value: 729.4165354330709 KP time = 0.07375775009859353 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01572 - (Local CPU) 0.01572 - (Global CPU) 0.08948

 Solve status: Optimal Objective value: 729.41654 nb_rows 49 nb_cols 400
----------------------------------------
----------------------------------------

        Updated data after iteration: 3 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (49, 400) and density : 0.406 and number of remaining ones : 7959
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(1, 13), (3, 11), (5, 14), (8, 13), (9, 13), (10, 16), (11, 16), (12, 18), (13, 19), (14, 19), (15, 19), (16, 14), (18, 41), (19, 32), (21, 39), (23, 38), (24, 30), (25, 31), (26, 30), (27, 40), (28, 18), (29, 36), (30, 11), (31, 35), (32, 38), (34, 33), (36, 30), (37, 26), (38, 30), (39, 18), (40, 12), (41, 29), (42, 13), (43, 13), (44, 16), (45, 10), (47, 34), (48, 11), (49, 22), (50, 31), (52, 25), (53, 11), (54, 15), (55, 11), (56, 9), (57, 25), (58, 10), (59, 13), (60, 12), (61, 23), (62, 23), (63, 19), (64, 18), (67, 8), (68, 11), (69, 9), (70, 27), (71, 11), (72, 16), (73, 11), (74, 22), (76, 24), (77, 13), (78, 27), (79, 19), (80, 32), (81, 13), (82, 19), (83, 25), (84, 28), (85, 8), (89, 9), (90, 10), (91, 10), (92, 27), (93, 27), (94, 19), (95, 19), (96, 17), (97, 12), (98, 22), (99, 10), (101, 14), (102, 9), (103, 9), (104, 11), (106, 15), (108, 15), (109, 13), (110, 19), (112, 16), (113, 20), (114, 8), (115, 14), (116, 10), (117, 10), (118, 15), (119, 29), (120, 18), (121, 17), (122, 18), (123, 18), (124, 18), (125, 14), (126, 11), (127, 11), (128, 10), (129, 21), (130, 14), (131, 14), (132, 13), (134, 12), (135, 10), (136, 22), (137, 25), (138, 9), (139, 38), (140, 11), (141, 33), (142, 10), (143, 17), (144, 25), (145, 11), (146, 25), (147, 14), (148, 36), (149, 34), (150, 11), (151, 12), (152, 10), (154, 14), (155, 24), (157, 13), (158, 22), (159, 14), (160, 23), (161, 16), (162, 10), (163, 14), (164, 19), (165, 31), (166, 20), (167, 19), (168, 24), (169, 14), (171, 19), (172, 14), (173, 22), (174, 23), (175, 10), (176, 13), (177, 17), (178, 23), (179, 14), (180, 26), (181, 23), (182, 23), (183, 30), (184, 28), (185, 25), (186, 15), (187, 21), (188, 26), (189, 11), (190, 22), (191, 13), (192, 14), (193, 13), (194, 18), (195, 18), (196, 19), (197, 18), (199, 18), (200, 12), (201, 15), (202, 12), (203, 11), (205, 9), (207, 19), (208, 25), (209, 12), (210, 14), (211, 12), (212, 16), (213, 25), (214, 13), (215, 13), (216, 47), (217, 23), (219, 18), (220, 26), (222, 22), (223, 19), (224, 7), (225, 22), (226, 16), (227, 12), (229, 12), (230, 21), (232, 16), (233, 11), (234, 18), (235, 17), (236, 28), (237, 12), (238, 31), (239, 22), (240, 13), (241, 25), (243, 35), (244, 8), (245, 12), (246, 31), (248, 37), (250, 27), (251, 13), (253, 26), (255, 20), (256, 29), (257, 42), (258, 6), (260, 16), (261, 35), (263, 24), (264, 29), (265, 13), (266, 10), (267, 17), (268, 13), (269, 23), (270, 10), (273, 24), (276, 12), (277, 31), (278, 9), (279, 9), (280, 28), (281, 11), (282, 10), (283, 10), (284, 11), (285, 7), (286, 32), (287, 32), (288, 26), (289, 14), (290, 32), (292, 33), (294, 26), (297, 11), (298, 25), (299, 22), (301, 35), (302, 12), (303, 14), (304, 30), (305, 11), (306, 34), (307, 28), (308, 29), (309, 9), (310, 42), (311, 44), (312, 33), (313, 10), (314, 8), (316, 13), (317, 14), (318, 28), (319, 12), (320, 36), (321, 37), (322, 39), (323, 30), (324, 37), (325, 15), (326, 30), (327, 18), (328, 18), (330, 42), (331, 19), (332, 25), (333, 19), (334, 29), (335, 16), (336, 12), (337, 17), (338, 19), (339, 8), (340, 27), (341, 21), (342, 17), (343, 23), (344, 9), (345, 25), (346, 8), (347, 27), (348, 9), (350, 24), (351, 21), (352, 21), (353, 37), (354, 22), (355, 18), (356, 24), (357, 17), (358, 21), (359, 16), (360, 40), (361, 38), (362, 43), (363, 44), (364, 43), (366, 10), (368, 44), (369, 39), (371, 7), (373, 46), (374, 35), (375, 42), (376, 8), (377, 36), (378, 22), (379, 37), (380, 25), (381, 17), (382, 7), (383, 24), (384, 14), (385, 15), (387, 33), (388, 12), (389, 19), (390, 21), (391, 13), (392, 12), (393, 12), (394, 15), (395, 16), (396, 20), (398, 21), (399, 17), (400, 15), (401, 11), (402, 32), (403, 30), (404, 28), (405, 20), (407, 30), (408, 12), (410, 11), (411, 14), (412, 34), (413, 11), (414, 36), (415, 19), (416, 12), (417, 27), (418, 31), (419, 18), (420, 19), (422, 12), (423, 23), (424, 12), (425, 20), (426, 13), (427, 10), (428, 9), (429, 19), (430, 16), (431, 18), (432, 10), (433, 17), (435, 32), (436, 20), (437, 33), (438, 10), (439, 28), (441, 16), (442, 17), (443, 32), (444, 15), (445, 14), (446, 13), (447, 15), (448, 13), (449, 21), (450, 20), (452, 16), (453, 21), (455, 13), (456, 13), (458, 13), (459, 11), (460, 13), (461, 14), (462, 13), (463, 19), (464, 17), (465, 12)]
nb_edges_0 = 11641 rho= 0.1 # of rows = 49 # of columns= 400 total_degree_0= 11641 RHS= 1164.1000000000001
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  3 with obj value: 729.4165354330709 KP time = 0.08947600005194545 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01875 - (Local CPU) 0.01875 - (Global CPU) 0.10822

 Solve status: Optimal Objective value: 241.94872 nb_rows 49 nb_cols 371
----------------------------------------
----------------------------------------

        Updated data after iteration: 3 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (49, 371) and density : 0.424 and number of remaining ones : 7959
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.424 density  and density_threshold= 0.700


I am in the while loop with i= 4 density= 0.42433577204466694 and fixed_threshold= 0.7

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 661.577
I solved model name = row_knapsack_problem for iteration i =  4 with obj value: 661.5774336283187 KP time = 0.10822358296718448 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01607 - (Local CPU) 0.01607 - (Global CPU) 0.12429

 Solve status: Optimal Objective value: 661.57743 nb_rows 44 nb_cols 371
----------------------------------------
----------------------------------------

        Updated data after iteration: 4 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (44, 371) and density : 0.429 and number of remaining ones : 6995
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(1, 10), (3, 10), (5, 12), (8, 12), (9, 11), (10, 13), (11, 13), (12, 16), (13, 17), (14, 17), (15, 16), (16, 12), (18, 38), (19, 30), (21, 36), (23, 35), (24, 28), (25, 29), (26, 29), (27, 37), (28, 15), (29, 32), (30, 9), (31, 34), (32, 35), (34, 31), (36, 28), (37, 24), (38, 28), (39, 14), (40, 11), (41, 26), (42, 12), (43, 12), (44, 14), (45, 8), (47, 30), (48, 9), (49, 21), (50, 28), (52, 23), (53, 10), (54, 11), (55, 11), (57, 23), (58, 10), (59, 11), (60, 10), (61, 23), (62, 18), (63, 17), (64, 18), (68, 10), (70, 26), (71, 8), (72, 14), (73, 9), (74, 21), (76, 21), (77, 12), (78, 23), (79, 17), (80, 31), (81, 12), (82, 19), (83, 25), (84, 24), (90, 9), (92, 25), (93, 25), (94, 17), (95, 15), (96, 17), (97, 12), (98, 20), (99, 8), (101, 12), (104, 11), (106, 13), (108, 12), (109, 11), (110, 17), (112, 13), (113, 18), (115, 13), (116, 10), (117, 10), (118, 14), (119, 25), (120, 16), (121, 14), (122, 16), (123, 17), (124, 17), (125, 12), (126, 9), (127, 10), (128, 8), (129, 18), (130, 13), (131, 14), (132, 11), (134, 10), (135, 10), (136, 21), (137, 24), (139, 34), (140, 10), (141, 30), (142, 8), (143, 16), (144, 23), (145, 9), (146, 23), (147, 13), (148, 33), (149, 30), (150, 9), (151, 11), (152, 9), (154, 14), (155, 22), (157, 13), (158, 20), (159, 12), (160, 23), (161, 14), (162, 10), (163, 13), (164, 18), (165, 30), (166, 19), (167, 16), (168, 23), (169, 11), (171, 19), (172, 12), (173, 20), (174, 22), (175, 9), (176, 11), (177, 15), (178, 22), (179, 12), (180, 24), (181, 21), (182, 23), (183, 28), (184, 26), (185, 22), (186, 12), (187, 20), (188, 24), (189, 10), (190, 20), (191, 10), (192, 12), (193, 13), (194, 18), (195, 17), (196, 17), (197, 16), (199, 17), (200, 11), (201, 13), (202, 11), (203, 10), (207, 17), (208, 23), (209, 11), (210, 11), (211, 10), (212, 14), (213, 23), (214, 11), (215, 11), (216, 42), (217, 21), (219, 17), (220, 24), (222, 20), (223, 15), (225, 18), (226, 15), (227, 11), (229, 12), (230, 19), (232, 14), (233, 10), (234, 15), (235, 16), (236, 26), (237, 11), (238, 29), (239, 19), (240, 11), (241, 23), (243, 32), (245, 12), (246, 29), (248, 34), (250, 25), (251, 11), (253, 24), (255, 19), (256, 27), (257, 40), (260, 15), (261, 32), (263, 22), (264, 27), (265, 13), (266, 10), (267, 15), (268, 13), (269, 20), (270, 9), (273, 22), (276, 11), (277, 28), (280, 23), (281, 10), (282, 8), (284, 9), (286, 29), (287, 29), (288, 24), (289, 13), (290, 30), (292, 30), (294, 23), (297, 9), (298, 23), (299, 20), (301, 30), (302, 11), (303, 11), (304, 27), (305, 10), (306, 32), (307, 25), (308, 27), (310, 39), (311, 41), (312, 31), (313, 10), (316, 11), (317, 12), (318, 26), (319, 9), (320, 35), (321, 36), (322, 38), (323, 29), (324, 36), (325, 13), (326, 27), (327, 15), (328, 16), (330, 39), (331, 16), (332, 23), (333, 18), (334, 28), (335, 14), (336, 9), (337, 16), (338, 16), (340, 23), (341, 19), (342, 16), (343, 22), (345, 23), (347, 24), (350, 22), (351, 20), (352, 18), (353, 34), (354, 18), (355, 16), (356, 23), (357, 15), (358, 19), (359, 15), (360, 38), (361, 35), (362, 39), (363, 39), (364, 40), (366, 9), (368, 40), (369, 37), (373, 41), (374, 32), (375, 39), (377, 34), (378, 21), (379, 35), (380, 24), (381, 15), (383, 22), (384, 13), (385, 13), (387, 30), (388, 11), (389, 16), (390, 19), (391, 12), (392, 9), (393, 11), (394, 14), (395, 15), (396, 19), (398, 17), (399, 15), (400, 15), (401, 11), (402, 28), (403, 27), (404, 25), (405, 17), (407, 26), (408, 10), (410, 11), (411, 13), (412, 30), (413, 10), (414, 33), (415, 16), (416, 10), (417, 25), (418, 27), (419, 18), (420, 17), (422, 10), (423, 21), (424, 11), (425, 19), (426, 13), (427, 10), (429, 17), (430, 15), (431, 15), (433, 17), (435, 30), (436, 17), (437, 30), (438, 8), (439, 25), (441, 14), (442, 15), (443, 29), (444, 13), (445, 11), (446, 11), (447, 13), (448, 11), (449, 18), (450, 17), (452, 14), (453, 19), (455, 11), (456, 12), (458, 11), (459, 10), (460, 11), (461, 12), (462, 11), (463, 16), (464, 15), (465, 9)]
nb_edges_0 = 9329 rho= 0.1 # of rows = 44 # of columns= 371 total_degree_0= 9329 RHS= 932.9000000000001
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  4 with obj value: 661.5774336283187 KP time = 0.12429008295293897 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01770 - (Local CPU) 0.01770 - (Global CPU) 0.14199

 Solve status: Optimal Objective value: 234.26471 nb_rows 44 nb_cols 344
----------------------------------------
----------------------------------------

        Updated data after iteration: 4 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (44, 344) and density : 0.446 and number of remaining ones : 6995
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.446 density  and density_threshold= 0.700


I am in the while loop with i= 5 density= 0.446353065539112 and fixed_threshold= 0.7

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 561.724
I solved model name = row_knapsack_problem for iteration i =  5 with obj value: 561.7241379310345 KP time = 0.14198824996128678 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01507 - (Local CPU) 0.01507 - (Global CPU) 0.15706

 Solve status: Optimal Objective value: 561.72414 nb_rows 39 nb_cols 344
----------------------------------------
----------------------------------------

        Updated data after iteration: 5 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (39, 344) and density : 0.452 and number of remaining ones : 6063
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(1, 7), (3, 7), (5, 9), (8, 10), (9, 9), (10, 9), (11, 9), (12, 13), (13, 14), (14, 14), (15, 13), (16, 8), (18, 34), (19, 27), (21, 32), (23, 31), (24, 25), (25, 26), (26, 26), (27, 33), (28, 13), (29, 28), (31, 32), (32, 31), (34, 28), (36, 27), (37, 22), (38, 26), (39, 13), (40, 10), (41, 25), (42, 11), (43, 11), (44, 12), (47, 26), (49, 21), (50, 26), (52, 21), (53, 8), (54, 7), (55, 10), (57, 21), (58, 9), (59, 10), (60, 9), (61, 21), (62, 16), (63, 14), (64, 18), (68, 10), (70, 25), (72, 12), (74, 19), (76, 20), (77, 11), (78, 20), (79, 14), (80, 30), (81, 10), (82, 19), (83, 24), (84, 21), (92, 23), (93, 23), (94, 16), (95, 13), (96, 16), (97, 11), (98, 19), (101, 10), (104, 10), (106, 11), (108, 12), (109, 9), (110, 13), (112, 11), (113, 17), (115, 12), (116, 10), (117, 9), (118, 13), (119, 20), (120, 14), (121, 12), (122, 14), (123, 13), (124, 15), (125, 11), (127, 9), (129, 17), (130, 12), (131, 13), (132, 9), (134, 8), (135, 9), (136, 18), (137, 22), (139, 31), (140, 10), (141, 27), (143, 15), (144, 21), (146, 21), (147, 12), (148, 30), (149, 26), (151, 9), (154, 12), (155, 21), (157, 10), (158, 20), (159, 12), (160, 23), (161, 12), (162, 9), (163, 13), (164, 16), (165, 28), (166, 19), (167, 16), (168, 22), (169, 9), (171, 18), (172, 11), (173, 17), (174, 20), (176, 10), (177, 13), (178, 21), (179, 11), (180, 22), (181, 20), (182, 22), (183, 24), (184, 25), (185, 21), (186, 10), (187, 18), (188, 23), (189, 8), (190, 20), (191, 8), (192, 11), (193, 12), (194, 17), (195, 14), (196, 14), (197, 16), (199, 16), (200, 10), (201, 10), (202, 8), (203, 8), (207, 16), (208, 20), (209, 11), (210, 10), (211, 9), (212, 10), (213, 21), (214, 9), (215, 10), (216, 38), (217, 18), (219, 15), (220, 21), (222, 19), (223, 13), (225, 17), (226, 11), (227, 10), (229, 11), (230, 17), (232, 12), (233, 9), (234, 13), (235, 16), (236, 22), (237, 9), (238, 27), (239, 19), (240, 10), (241, 21), (243, 30), (245, 10), (246, 27), (248, 32), (250, 24), (251, 9), (253, 23), (255, 18), (256, 25), (257, 36), (260, 14), (261, 31), (263, 21), (264, 25), (265, 12), (267, 15), (268, 9), (269, 18), (273, 19), (276, 9), (277, 26), (280, 21), (281, 7), (286, 26), (287, 27), (288, 20), (289, 11), (290, 27), (292, 27), (294, 21), (298, 22), (299, 19), (301, 26), (302, 11), (303, 9), (304, 25), (305, 7), (306, 30), (307, 23), (308, 24), (310, 35), (311, 38), (312, 28), (313, 8), (316, 9), (317, 11), (318, 25), (320, 34), (321, 35), (322, 36), (323, 27), (324, 33), (325, 12), (326, 24), (327, 14), (328, 13), (330, 35), (331, 14), (332, 22), (333, 15), (334, 25), (335, 12), (337, 14), (338, 15), (340, 23), (341, 15), (342, 14), (343, 19), (345, 20), (347, 22), (350, 19), (351, 17), (352, 18), (353, 32), (354, 18), (355, 16), (356, 21), (357, 15), (358, 17), (359, 13), (360, 36), (361, 33), (362, 35), (363, 36), (364, 36), (368, 36), (369, 35), (373, 38), (374, 30), (375, 36), (377, 30), (378, 20), (379, 33), (380, 22), (381, 11), (383, 18), (384, 9), (385, 11), (387, 29), (388, 10), (389, 14), (390, 16), (391, 11), (393, 10), (394, 12), (395, 14), (396, 18), (398, 16), (399, 13), (400, 12), (401, 11), (402, 26), (403, 25), (404, 22), (405, 16), (407, 23), (410, 8), (411, 10), (412, 25), (413, 8), (414, 28), (415, 14), (416, 7), (417, 24), (418, 24), (419, 15), (420, 16), (422, 10), (423, 18), (424, 11), (425, 17), (426, 10), (427, 9), (429, 16), (430, 13), (431, 14), (433, 17), (435, 27), (436, 16), (437, 28), (439, 24), (441, 11), (442, 12), (443, 25), (444, 12), (445, 8), (446, 8), (447, 10), (448, 7), (449, 15), (450, 14), (452, 11), (453, 16), (455, 8), (456, 9), (458, 8), (460, 8), (461, 10), (462, 8), (463, 13), (464, 12)]
nb_edges_0 = 7353 rho= 0.1 # of rows = 39 # of columns= 344 total_degree_0= 7353 RHS= 735.3000000000001
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  5 with obj value: 561.7241379310345 KP time = 0.15706312493421137 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01794 - (Local CPU) 0.01795 - (Global CPU) 0.17501

 Solve status: Optimal Objective value: 181.59000 nb_rows 39 nb_cols 320
----------------------------------------
----------------------------------------

        Updated data after iteration: 5 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (39, 320) and density : 0.471 and number of remaining ones : 6063
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.471 density  and density_threshold= 0.700


I am in the while loop with i= 6 density= 0.47091346153846153 and fixed_threshold= 0.7

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 485.580
I solved model name = row_knapsack_problem for iteration i =  6 with obj value: 485.579781420765 KP time = 0.1750092499423772 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01536 - (Local CPU) 0.01536 - (Global CPU) 0.19037

 Solve status: Optimal Objective value: 485.57978 nb_rows 35 nb_cols 320
----------------------------------------
----------------------------------------

        Updated data after iteration: 6 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (35, 320) and density : 0.476 and number of remaining ones : 5334
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(5, 8), (8, 9), (9, 7), (10, 7), (11, 7), (12, 10), (13, 11), (14, 11), (15, 10), (18, 31), (19, 25), (21, 30), (23, 29), (24, 24), (25, 25), (26, 25), (27, 30), (28, 10), (29, 25), (31, 30), (32, 29), (34, 26), (36, 26), (37, 22), (38, 25), (39, 10), (40, 8), (41, 23), (42, 8), (43, 8), (44, 11), (47, 24), (49, 19), (50, 24), (52, 20), (55, 10), (57, 19), (58, 9), (59, 10), (60, 7), (61, 20), (62, 13), (63, 12), (64, 15), (68, 9), (70, 24), (72, 11), (74, 17), (76, 18), (77, 9), (78, 19), (79, 10), (80, 28), (81, 9), (82, 17), (83, 22), (84, 18), (92, 20), (93, 20), (94, 14), (95, 13), (96, 13), (97, 10), (98, 16), (101, 10), (104, 9), (106, 9), (108, 10), (109, 5), (110, 12), (112, 11), (113, 15), (115, 10), (116, 9), (117, 8), (118, 12), (119, 19), (120, 13), (121, 11), (122, 12), (123, 12), (124, 13), (125, 10), (127, 7), (129, 14), (130, 11), (131, 12), (132, 8), (135, 8), (136, 17), (137, 20), (139, 28), (140, 9), (141, 24), (143, 12), (144, 19), (146, 21), (147, 10), (148, 27), (149, 24), (154, 11), (155, 19), (157, 7), (158, 20), (159, 12), (160, 22), (161, 11), (162, 8), (163, 12), (164, 14), (165, 26), (166, 18), (167, 12), (168, 22), (169, 9), (171, 17), (172, 9), (173, 15), (174, 20), (176, 9), (177, 12), (178, 21), (179, 10), (180, 19), (181, 19), (182, 21), (183, 23), (184, 25), (185, 20), (186, 9), (187, 17), (188, 20), (190, 20), (192, 9), (193, 11), (194, 15), (195, 12), (196, 13), (197, 15), (199, 16), (200, 8), (201, 9), (207, 16), (208, 18), (209, 10), (210, 9), (211, 8), (212, 8), (213, 20), (214, 8), (215, 8), (216, 34), (217, 18), (219, 12), (220, 21), (222, 18), (223, 12), (225, 16), (226, 10), (227, 10), (229, 11), (230, 14), (232, 12), (233, 9), (234, 11), (235, 16), (236, 20), (237, 9), (238, 26), (239, 17), (240, 10), (241, 17), (243, 27), (245, 7), (246, 25), (248, 29), (250, 23), (251, 6), (253, 23), (255, 18), (256, 24), (257, 32), (260, 11), (261, 29), (263, 20), (264, 23), (265, 11), (267, 13), (268, 9), (269, 17), (273, 19), (276, 7), (277, 25), (280, 21), (286, 23), (287, 27), (288, 19), (289, 10), (290, 26), (292, 24), (294, 20), (298, 20), (299, 19), (301, 24), (302, 9), (303, 8), (304, 23), (306, 28), (307, 22), (308, 23), (310, 32), (311, 35), (312, 26), (316, 8), (317, 9), (318, 22), (320, 32), (321, 32), (322, 33), (323, 25), (324, 31), (325, 11), (326, 23), (327, 13), (328, 12), (330, 33), (331, 11), (332, 22), (333, 13), (334, 23), (335, 10), (337, 13), (338, 13), (340, 20), (341, 14), (342, 12), (343, 18), (345, 18), (347, 20), (350, 17), (351, 15), (352, 17), (353, 29), (354, 17), (355, 15), (356, 19), (357, 14), (358, 16), (359, 12), (360, 32), (361, 29), (362, 31), (363, 32), (364, 32), (368, 32), (369, 31), (373, 34), (374, 26), (375, 32), (377, 27), (378, 18), (379, 29), (380, 20), (381, 10), (383, 16), (384, 8), (385, 10), (387, 26), (388, 9), (389, 14), (390, 14), (391, 10), (393, 9), (394, 11), (395, 13), (396, 16), (398, 14), (399, 13), (400, 10), (401, 10), (402, 25), (403, 21), (404, 21), (405, 15), (407, 20), (411, 10), (412, 23), (414, 26), (415, 12), (417, 22), (418, 21), (419, 13), (420, 14), (422, 9), (423, 17), (424, 10), (425, 15), (426, 8), (427, 7), (429, 14), (430, 12), (431, 14), (433, 16), (435, 25), (436, 14), (437, 27), (439, 22), (441, 8), (442, 10), (443, 21), (444, 10), (447, 8), (449, 12), (450, 12), (452, 9), (453, 13), (456, 7), (461, 8), (463, 11), (464, 10)]
nb_edges_0 = 5866 rho= 0.1 # of rows = 35 # of columns= 320 total_degree_0= 5866 RHS= 586.6
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  6 with obj value: 485.579781420765 KP time = 0.19036808295641094 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01727 - (Local CPU) 0.01727 - (Global CPU) 0.20764

 Solve status: Optimal Objective value: 154.36296 nb_rows 35 nb_cols 298
----------------------------------------
----------------------------------------

        Updated data after iteration: 6 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (35, 298) and density : 0.496 and number of remaining ones : 5334
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.496 density  and density_threshold= 0.700


I am in the while loop with i= 7 density= 0.4959731543624161 and fixed_threshold= 0.7

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 414.304
I solved model name = row_knapsack_problem for iteration i =  7 with obj value: 414.30375000000004 KP time = 0.2076394580071792 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01465 - (Local CPU) 0.01465 - (Global CPU) 0.22229

 Solve status: Optimal Objective value: 414.30375 nb_rows 31 nb_cols 298
----------------------------------------
----------------------------------------

        Updated data after iteration: 7 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (31, 298) and density : 0.502 and number of remaining ones : 4642
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(8, 9), (12, 7), (13, 9), (14, 8), (15, 7), (18, 27), (19, 22), (21, 27), (23, 25), (24, 22), (25, 23), (26, 23), (27, 27), (28, 8), (29, 23), (31, 28), (32, 26), (34, 24), (36, 24), (37, 20), (38, 23), (39, 7), (40, 6), (41, 21), (44, 10), (47, 22), (49, 18), (50, 21), (52, 19), (55, 7), (57, 17), (58, 8), (59, 9), (61, 18), (62, 10), (63, 10), (64, 15), (68, 7), (70, 22), (72, 8), (74, 15), (76, 17), (77, 9), (78, 19), (79, 8), (80, 25), (81, 8), (82, 14), (83, 21), (84, 18), (92, 20), (93, 18), (94, 14), (95, 10), (96, 13), (97, 10), (98, 16), (101, 8), (104, 8), (106, 8), (108, 8), (110, 10), (112, 11), (113, 14), (115, 10), (116, 7), (117, 8), (118, 9), (119, 16), (120, 12), (121, 9), (122, 12), (123, 9), (124, 9), (125, 10), (129, 14), (130, 11), (131, 10), (135, 8), (136, 13), (137, 20), (139, 25), (140, 8), (141, 21), (143, 11), (144, 17), (146, 18), (147, 8), (148, 23), (149, 20), (154, 9), (155, 17), (158, 18), (159, 10), (160, 19), (161, 11), (162, 8), (163, 11), (164, 12), (165, 24), (166, 14), (167, 11), (168, 20), (169, 8), (171, 17), (172, 8), (173, 12), (174, 19), (176, 9), (177, 10), (178, 18), (179, 9), (180, 16), (181, 16), (182, 21), (183, 21), (184, 23), (185, 18), (186, 9), (187, 15), (188, 17), (190, 19), (192, 8), (193, 9), (194, 12), (195, 12), (196, 12), (197, 13), (199, 13), (201, 8), (207, 16), (208, 16), (209, 10), (210, 8), (213, 19), (214, 7), (215, 7), (216, 30), (217, 16), (219, 9), (220, 20), (222, 16), (223, 10), (225, 14), (226, 10), (227, 9), (229, 11), (230, 11), (232, 11), (233, 8), (234, 10), (235, 15), (236, 19), (237, 9), (238, 24), (239, 15), (240, 10), (241, 14), (243, 25), (246, 23), (248, 28), (250, 22), (253, 20), (255, 17), (256, 22), (257, 29), (260, 9), (261, 26), (263, 18), (264, 22), (265, 9), (267, 10), (268, 7), (269, 17), (273, 18), (277, 23), (280, 19), (286, 21), (287, 23), (288, 18), (289, 8), (290, 25), (292, 21), (294, 19), (298, 16), (299, 18), (301, 22), (302, 7), (303, 8), (304, 22), (306, 26), (307, 20), (308, 22), (310, 29), (311, 31), (312, 23), (316, 7), (317, 9), (318, 20), (320, 30), (321, 30), (322, 30), (323, 22), (324, 29), (325, 10), (326, 20), (327, 12), (328, 11), (330, 30), (331, 10), (332, 20), (333, 11), (334, 20), (335, 10), (337, 10), (338, 12), (340, 18), (341, 14), (342, 10), (343, 17), (345, 17), (347, 18), (350, 15), (351, 14), (352, 15), (353, 27), (354, 15), (355, 14), (356, 18), (357, 12), (358, 15), (359, 11), (360, 30), (361, 27), (362, 28), (363, 29), (364, 29), (368, 29), (369, 29), (373, 31), (374, 24), (375, 29), (377, 23), (378, 17), (379, 26), (380, 19), (381, 9), (383, 14), (385, 10), (387, 23), (388, 6), (389, 11), (390, 12), (391, 8), (393, 9), (394, 10), (395, 12), (396, 14), (398, 12), (399, 9), (400, 9), (401, 9), (402, 23), (403, 20), (404, 19), (405, 13), (407, 19), (411, 8), (412, 22), (414, 23), (415, 12), (417, 19), (418, 19), (419, 12), (420, 11), (422, 6), (423, 16), (424, 9), (425, 14), (426, 7), (429, 14), (430, 12), (431, 11), (433, 13), (435, 23), (436, 14), (437, 24), (439, 21), (442, 7), (443, 18), (444, 9), (447, 5), (449, 9), (450, 9), (452, 6), (453, 10), (463, 8), (464, 7)]
nb_edges_0 = 4596 rho= 0.1 # of rows = 31 # of columns= 298 total_degree_0= 4596 RHS= 459.6
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  7 with obj value: 414.30375000000004 KP time = 0.22228670795448124 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01704 - (Local CPU) 0.01705 - (Global CPU) 0.23933

 Solve status: Optimal Objective value: 126.30000 nb_rows 31 nb_cols 279
----------------------------------------
----------------------------------------

        Updated data after iteration: 7 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (31, 279) and density : 0.522 and number of remaining ones : 4642
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.522 density  and density_threshold= 0.700


I am in the while loop with i= 8 density= 0.5220256677072493 and fixed_threshold= 0.7

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 372.768
I solved model name = row_knapsack_problem for iteration i =  8 with obj value: 372.7684931506849 KP time = 0.23933337489143014 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01581 - (Local CPU) 0.01581 - (Global CPU) 0.25515

 Solve status: Optimal Objective value: 372.76849 nb_rows 28 nb_cols 279
----------------------------------------
----------------------------------------

        Updated data after iteration: 8 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (28, 279) and density : 0.527 and number of remaining ones : 4118
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(8, 7), (13, 8), (14, 7), (18, 24), (19, 20), (21, 25), (23, 24), (24, 21), (25, 22), (26, 22), (27, 25), (28, 6), (29, 22), (31, 25), (32, 24), (34, 23), (36, 23), (37, 19), (38, 21), (41, 20), (44, 9), (47, 21), (49, 17), (50, 18), (52, 18), (57, 16), (58, 6), (59, 7), (61, 18), (62, 10), (63, 8), (64, 13), (70, 21), (72, 7), (74, 14), (76, 14), (77, 8), (78, 18), (79, 6), (80, 22), (81, 7), (82, 12), (83, 20), (84, 16), (92, 18), (93, 16), (94, 12), (95, 9), (96, 12), (97, 9), (98, 15), (101, 8), (104, 6), (106, 8), (108, 8), (110, 9), (112, 10), (113, 12), (115, 10), (117, 8), (118, 9), (119, 16), (120, 10), (121, 9), (122, 12), (123, 9), (124, 8), (125, 10), (129, 14), (130, 10), (131, 8), (135, 7), (136, 13), (137, 18), (139, 23), (140, 8), (141, 19), (143, 10), (144, 15), (146, 17), (147, 7), (148, 21), (149, 19), (154, 8), (155, 15), (158, 16), (159, 9), (160, 18), (161, 10), (162, 8), (163, 9), (164, 10), (165, 22), (166, 12), (167, 11), (168, 17), (169, 6), (171, 16), (172, 7), (173, 11), (174, 18), (176, 8), (177, 8), (178, 18), (179, 8), (180, 15), (181, 15), (182, 19), (183, 21), (184, 21), (185, 18), (186, 8), (187, 15), (188, 16), (190, 18), (192, 7), (193, 8), (194, 11), (195, 10), (196, 11), (197, 13), (199, 12), (201, 8), (207, 14), (208, 14), (209, 9), (210, 7), (213, 17), (216, 27), (217, 14), (219, 8), (220, 19), (222, 15), (223, 9), (225, 12), (226, 9), (227, 8), (229, 10), (230, 11), (232, 11), (233, 7), (234, 9), (235, 14), (236, 18), (237, 8), (238, 21), (239, 13), (240, 9), (241, 13), (243, 23), (246, 21), (248, 25), (250, 19), (253, 18), (255, 15), (256, 20), (257, 26), (260, 8), (261, 24), (263, 17), (264, 21), (265, 8), (267, 10), (269, 15), (273, 17), (277, 21), (280, 17), (286, 19), (287, 21), (288, 17), (289, 7), (290, 23), (292, 20), (294, 17), (298, 16), (299, 16), (301, 21), (303, 7), (304, 19), (306, 24), (307, 19), (308, 21), (310, 27), (311, 28), (312, 21), (317, 8), (318, 19), (320, 27), (321, 27), (322, 27), (323, 21), (324, 26), (325, 8), (326, 19), (327, 10), (328, 9), (330, 27), (331, 8), (332, 19), (333, 9), (334, 17), (335, 8), (337, 9), (338, 10), (340, 16), (341, 13), (342, 9), (343, 14), (345, 14), (347, 16), (350, 14), (351, 12), (352, 14), (353, 24), (354, 15), (355, 13), (356, 15), (357, 12), (358, 14), (359, 11), (360, 27), (361, 24), (362, 25), (363, 26), (364, 26), (368, 26), (369, 26), (373, 28), (374, 21), (375, 26), (377, 20), (378, 14), (379, 23), (380, 16), (381, 9), (383, 14), (385, 10), (387, 21), (389, 10), (390, 11), (391, 7), (393, 8), (394, 8), (395, 11), (396, 12), (398, 11), (399, 7), (400, 8), (401, 8), (402, 20), (403, 19), (404, 17), (405, 12), (407, 18), (411, 7), (412, 20), (414, 22), (415, 12), (417, 17), (418, 18), (419, 11), (420, 11), (423, 15), (424, 7), (425, 12), (429, 14), (430, 12), (431, 9), (433, 12), (435, 23), (436, 14), (437, 23), (439, 21), (443, 17), (444, 9), (449, 8), (450, 7), (453, 7), (463, 6)]
nb_edges_0 = 3694 rho= 0.1 # of rows = 28 # of columns= 279 total_degree_0= 3694 RHS= 369.40000000000003
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  8 with obj value: 372.7684931506849 KP time = 0.25514812488108873 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01704 - (Local CPU) 0.01704 - (Global CPU) 0.27219

 Solve status: Optimal Objective value: 115.13333 nb_rows 28 nb_cols 261
----------------------------------------
----------------------------------------

        Updated data after iteration: 8 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (28, 261) and density : 0.547 and number of remaining ones : 4118
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.547 density  and density_threshold= 0.700


I am in the while loop with i= 9 density= 0.547071702244116 and fixed_threshold= 0.7

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 324.489
I solved model name = row_knapsack_problem for iteration i =  9 with obj value: 324.4885496183206 KP time = 0.2721929579274729 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01568 - (Local CPU) 0.01568 - (Global CPU) 0.28787

 Solve status: Optimal Objective value: 324.48855 nb_rows 25 nb_cols 261
----------------------------------------
----------------------------------------

        Updated data after iteration: 9 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (25, 261) and density : 0.553 and number of remaining ones : 3610
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(8, 5), (13, 6), (14, 6), (18, 21), (19, 18), (21, 22), (23, 22), (24, 18), (25, 20), (26, 19), (27, 23), (29, 20), (31, 22), (32, 21), (34, 21), (36, 21), (37, 17), (38, 19), (41, 18), (44, 7), (47, 20), (49, 16), (50, 16), (52, 17), (57, 16), (61, 16), (62, 9), (63, 6), (64, 12), (70, 19), (74, 12), (76, 13), (77, 6), (78, 16), (80, 20), (82, 12), (83, 19), (84, 16), (92, 18), (93, 16), (94, 12), (95, 7), (96, 11), (97, 8), (98, 15), (101, 6), (106, 6), (108, 7), (110, 6), (112, 9), (113, 10), (115, 8), (117, 8), (118, 6), (119, 14), (120, 10), (121, 7), (122, 12), (123, 8), (124, 6), (125, 9), (129, 14), (130, 10), (131, 7), (136, 12), (137, 17), (139, 21), (140, 7), (141, 17), (143, 9), (144, 13), (146, 15), (147, 5), (148, 19), (149, 17), (154, 7), (155, 13), (158, 15), (159, 9), (160, 17), (161, 10), (162, 6), (163, 7), (164, 9), (165, 20), (166, 11), (167, 9), (168, 14), (171, 15), (172, 7), (173, 9), (174, 15), (176, 7), (177, 6), (178, 17), (179, 7), (180, 13), (181, 13), (182, 17), (183, 18), (184, 18), (185, 17), (186, 7), (187, 14), (188, 14), (190, 17), (192, 7), (193, 8), (194, 11), (195, 8), (196, 8), (197, 12), (199, 10), (201, 7), (207, 14), (208, 12), (209, 8), (210, 7), (213, 17), (216, 24), (217, 13), (219, 7), (220, 18), (222, 15), (223, 7), (225, 10), (226, 8), (227, 7), (229, 7), (230, 11), (232, 8), (233, 5), (234, 7), (235, 13), (236, 16), (237, 7), (238, 19), (239, 12), (240, 9), (241, 12), (243, 21), (246, 20), (248, 23), (250, 18), (253, 16), (255, 15), (256, 18), (257, 24), (260, 5), (261, 23), (263, 17), (264, 20), (265, 5), (267, 8), (269, 14), (273, 17), (277, 19), (280, 17), (286, 18), (287, 18), (288, 17), (290, 21), (292, 18), (294, 16), (298, 15), (299, 15), (301, 20), (304, 18), (306, 22), (307, 19), (308, 20), (310, 25), (311, 25), (312, 20), (317, 7), (318, 18), (320, 25), (321, 25), (322, 25), (323, 18), (324, 25), (325, 7), (326, 18), (327, 8), (328, 7), (330, 25), (331, 7), (332, 17), (333, 7), (334, 15), (335, 7), (337, 7), (338, 9), (340, 14), (341, 12), (342, 8), (343, 12), (345, 12), (347, 14), (350, 12), (351, 10), (352, 14), (353, 22), (354, 14), (355, 13), (356, 13), (357, 12), (358, 14), (359, 11), (360, 24), (361, 21), (362, 22), (363, 23), (364, 23), (368, 23), (369, 23), (373, 25), (374, 20), (375, 23), (377, 18), (378, 12), (379, 21), (380, 16), (381, 8), (383, 11), (385, 10), (387, 19), (389, 8), (390, 10), (393, 7), (394, 8), (395, 9), (396, 11), (398, 11), (400, 7), (401, 7), (402, 19), (403, 18), (404, 15), (405, 12), (407, 17), (412, 18), (414, 19), (415, 9), (417, 16), (418, 17), (419, 8), (420, 9), (423, 14), (425, 10), (429, 13), (430, 12), (431, 8), (433, 10), (435, 21), (436, 14), (437, 22), (439, 21), (443, 14), (444, 6), (449, 6)]
nb_edges_0 = 2915 rho= 0.1 # of rows = 25 # of columns= 261 total_degree_0= 2915 RHS= 291.5
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  9 with obj value: 324.4885496183206 KP time = 0.2878748750081286 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01768 - (Local CPU) 0.01768 - (Global CPU) 0.30555

 Solve status: Optimal Objective value: 85.47368 nb_rows 25 nb_cols 245
----------------------------------------
----------------------------------------

        Updated data after iteration: 9 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (25, 245) and density : 0.575 and number of remaining ones : 3610
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.575 density  and density_threshold= 0.700


I am in the while loop with i= 10 density= 0.574530612244898 and fixed_threshold= 0.7

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 270.095
I solved model name = row_knapsack_problem for iteration i =  10 with obj value: 270.0949152542373 KP time = 0.30555404105689377 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01645 - (Local CPU) 0.01645 - (Global CPU) 0.32201

 Solve status: Optimal Objective value: 270.09492 nb_rows 22 nb_cols 245
----------------------------------------
----------------------------------------

        Updated data after iteration: 10 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (22, 245) and density : 0.583 and number of remaining ones : 3143
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(18, 18), (19, 15), (21, 19), (23, 19), (24, 15), (25, 17), (26, 16), (27, 20), (29, 17), (31, 20), (32, 18), (34, 18), (36, 18), (37, 15), (38, 17), (41, 16), (44, 5), (47, 18), (49, 15), (50, 16), (52, 17), (57, 16), (61, 15), (62, 7), (63, 4), (64, 12), (70, 17), (74, 11), (76, 13), (78, 15), (80, 17), (82, 12), (83, 16), (84, 16), (92, 16), (93, 14), (94, 11), (95, 6), (96, 11), (97, 6), (98, 14), (106, 4), (108, 6), (112, 9), (113, 8), (115, 8), (117, 7), (119, 12), (120, 10), (121, 5), (122, 11), (123, 7), (125, 8), (129, 13), (130, 9), (131, 7), (136, 10), (137, 16), (139, 19), (140, 5), (141, 16), (143, 7), (144, 13), (146, 13), (148, 18), (149, 15), (154, 6), (155, 12), (158, 14), (159, 8), (160, 15), (161, 9), (163, 6), (164, 9), (165, 19), (166, 10), (167, 6), (168, 14), (171, 13), (172, 6), (173, 7), (174, 14), (176, 6), (178, 15), (179, 6), (180, 11), (181, 11), (182, 16), (183, 16), (184, 17), (185, 16), (186, 6), (187, 14), (188, 12), (190, 16), (192, 6), (193, 8), (194, 11), (195, 7), (196, 5), (197, 10), (199, 9), (201, 5), (207, 12), (208, 11), (209, 7), (210, 6), (213, 15), (216, 21), (217, 12), (219, 6), (220, 16), (222, 13), (223, 7), (225, 9), (226, 8), (227, 6), (229, 6), (230, 10), (232, 7), (234, 6), (235, 10), (236, 15), (237, 5), (238, 16), (239, 12), (240, 7), (241, 11), (243, 19), (246, 18), (248, 20), (250, 17), (253, 15), (255, 14), (256, 17), (257, 22), (261, 20), (263, 16), (264, 19), (267, 7), (269, 14), (273, 14), (277, 17), (280, 16), (286, 15), (287, 18), (288, 17), (290, 20), (292, 17), (294, 15), (298, 14), (299, 15), (301, 18), (304, 15), (306, 19), (307, 18), (308, 18), (310, 22), (311, 22), (312, 19), (317, 5), (318, 17), (320, 22), (321, 22), (322, 22), (323, 17), (324, 22), (325, 5), (326, 17), (327, 6), (328, 5), (330, 22), (331, 5), (332, 16), (333, 5), (334, 12), (335, 5), (337, 6), (338, 7), (340, 12), (341, 11), (342, 7), (343, 9), (345, 9), (347, 12), (350, 9), (351, 8), (352, 13), (353, 20), (354, 13), (355, 13), (356, 10), (357, 12), (358, 13), (359, 11), (360, 21), (361, 20), (362, 21), (363, 21), (364, 21), (368, 21), (369, 21), (373, 22), (374, 19), (375, 20), (377, 18), (378, 12), (379, 18), (380, 13), (381, 5), (383, 9), (385, 10), (387, 19), (389, 8), (390, 10), (393, 7), (394, 7), (395, 6), (396, 11), (398, 9), (400, 7), (401, 7), (402, 18), (403, 16), (404, 12), (405, 10), (407, 15), (412, 15), (414, 16), (415, 7), (417, 15), (418, 15), (419, 6), (420, 7), (423, 13), (425, 10), (429, 12), (430, 11), (431, 7), (433, 8), (435, 18), (436, 13), (437, 19), (439, 19), (443, 12)]
nb_edges_0 = 2247 rho= 0.1 # of rows = 22 # of columns= 245 total_degree_0= 2247 RHS= 224.70000000000002
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  10 with obj value: 270.0949152542373 KP time = 0.32200887403450906 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01669 - (Local CPU) 0.01669 - (Global CPU) 0.33870

 Solve status: Optimal Objective value: 63.50000 nb_rows 22 nb_cols 231
----------------------------------------
----------------------------------------

        Updated data after iteration: 10 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (22, 231) and density : 0.605 and number of remaining ones : 3143
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.605 density  and density_threshold= 0.700


I am in the while loop with i= 11 density= 0.6050767414403778 and fixed_threshold= 0.7

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 217.881
I solved model name = row_knapsack_problem for iteration i =  11 with obj value: 217.88055555555553 KP time = 0.3387027910212055 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01480 - (Local CPU) 0.01480 - (Global CPU) 0.35350

 Solve status: Optimal Objective value: 217.88056 nb_rows 20 nb_cols 231
----------------------------------------
----------------------------------------

        Updated data after iteration: 11 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (20, 231) and density : 0.613 and number of remaining ones : 2834
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(18, 17), (19, 14), (21, 17), (23, 17), (24, 13), (25, 15), (26, 14), (27, 18), (29, 15), (31, 18), (32, 16), (34, 17), (36, 16), (37, 14), (38, 15), (41, 14), (47, 16), (49, 15), (50, 16), (52, 17), (57, 15), (61, 13), (62, 5), (64, 12), (70, 15), (74, 11), (76, 13), (78, 15), (80, 15), (82, 12), (83, 14), (84, 16), (92, 16), (93, 14), (94, 11), (95, 5), (96, 11), (97, 4), (98, 14), (108, 4), (112, 9), (113, 6), (115, 8), (117, 7), (119, 10), (120, 10), (122, 9), (123, 5), (125, 8), (129, 13), (130, 9), (131, 7), (136, 8), (137, 16), (139, 17), (141, 16), (143, 5), (144, 13), (146, 12), (148, 18), (149, 14), (154, 5), (155, 12), (158, 13), (159, 8), (160, 14), (161, 8), (163, 5), (164, 9), (165, 18), (166, 10), (167, 5), (168, 13), (171, 13), (172, 5), (173, 6), (174, 13), (176, 4), (178, 15), (179, 6), (180, 10), (181, 10), (182, 14), (183, 15), (184, 17), (185, 14), (186, 4), (187, 12), (188, 12), (190, 14), (192, 6), (193, 6), (194, 9), (195, 7), (197, 10), (199, 9), (207, 10), (208, 11), (209, 7), (210, 6), (213, 13), (216, 19), (217, 10), (219, 4), (220, 14), (222, 13), (223, 7), (225, 9), (226, 8), (227, 4), (229, 4), (230, 10), (232, 5), (234, 6), (235, 8), (236, 13), (238, 14), (239, 12), (240, 5), (241, 11), (243, 17), (246, 18), (248, 18), (250, 17), (253, 15), (255, 14), (256, 17), (257, 20), (261, 20), (263, 16), (264, 17), (267, 5), (269, 14), (273, 14), (277, 17), (280, 16), (286, 15), (287, 16), (288, 17), (290, 18), (292, 17), (294, 15), (298, 14), (299, 15), (301, 18), (304, 14), (306, 18), (307, 17), (308, 18), (310, 20), (311, 20), (312, 19), (317, 3), (318, 17), (320, 20), (321, 20), (322, 20), (323, 17), (324, 20), (326, 17), (327, 4), (330, 20), (332, 16), (334, 10), (337, 6), (338, 5), (340, 10), (341, 11), (342, 7), (343, 8), (345, 8), (347, 10), (350, 8), (351, 7), (352, 12), (353, 18), (354, 12), (355, 12), (356, 9), (357, 11), (358, 12), (359, 10), (360, 19), (361, 18), (362, 19), (363, 19), (364, 19), (368, 19), (369, 19), (373, 20), (374, 17), (375, 18), (377, 16), (378, 10), (379, 16), (380, 11), (383, 9), (385, 10), (387, 17), (389, 8), (390, 8), (393, 5), (394, 5), (395, 6), (396, 9), (398, 9), (400, 5), (401, 5), (402, 16), (403, 15), (404, 12), (405, 10), (407, 13), (412, 14), (414, 15), (415, 6), (417, 13), (418, 14), (419, 5), (420, 7), (423, 11), (425, 8), (429, 10), (430, 9), (431, 7), (433, 8), (435, 17), (436, 12), (437, 18), (439, 18), (443, 11)]
nb_edges_0 = 1786 rho= 0.1 # of rows = 20 # of columns= 231 total_degree_0= 1786 RHS= 178.60000000000002
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  11 with obj value: 217.88055555555553 KP time = 0.3534992489730939 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01658 - (Local CPU) 0.01658 - (Global CPU) 0.37008

 Solve status: Optimal Objective value: 46.20000 nb_rows 20 nb_cols 219
----------------------------------------
----------------------------------------

        Updated data after iteration: 11 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (20, 219) and density : 0.636 and number of remaining ones : 2834
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.636 density  and density_threshold= 0.700


I am in the while loop with i= 12 density= 0.6356164383561644 and fixed_threshold= 0.7

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 201.404
I solved model name = row_knapsack_problem for iteration i =  12 with obj value: 201.40421052631578 KP time = 0.3700793330790475 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01441 - (Local CPU) 0.01441 - (Global CPU) 0.38449

 Solve status: Optimal Objective value: 201.40421 nb_rows 18 nb_cols 219
----------------------------------------
----------------------------------------

        Updated data after iteration: 12 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (18, 219) and density : 0.644 and number of remaining ones : 2539
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(18, 15), (19, 12), (21, 16), (23, 16), (24, 13), (25, 14), (26, 13), (27, 17), (29, 13), (31, 17), (32, 14), (34, 15), (36, 15), (37, 13), (38, 14), (41, 12), (47, 15), (49, 14), (50, 15), (52, 15), (57, 14), (61, 11), (62, 4), (64, 10), (70, 14), (74, 10), (76, 12), (78, 13), (80, 14), (82, 11), (83, 13), (84, 14), (92, 14), (93, 12), (94, 10), (95, 4), (96, 10), (98, 13), (112, 8), (113, 6), (115, 7), (117, 7), (119, 9), (120, 8), (122, 8), (123, 5), (125, 7), (129, 12), (130, 8), (131, 5), (136, 7), (137, 15), (139, 16), (141, 15), (143, 4), (144, 13), (146, 12), (148, 17), (149, 14), (154, 3), (155, 12), (158, 12), (159, 7), (160, 13), (161, 7), (163, 4), (164, 8), (165, 16), (166, 10), (167, 4), (168, 12), (171, 13), (172, 4), (173, 4), (174, 13), (178, 14), (179, 5), (180, 9), (181, 9), (182, 13), (183, 14), (184, 15), (185, 13), (187, 12), (188, 12), (190, 12), (192, 5), (193, 5), (194, 9), (195, 6), (197, 10), (199, 8), (207, 10), (208, 10), (209, 6), (210, 6), (213, 12), (216, 17), (217, 8), (220, 14), (222, 13), (223, 5), (225, 9), (226, 8), (230, 10), (232, 5), (234, 4), (235, 7), (236, 12), (238, 14), (239, 11), (240, 4), (241, 10), (243, 16), (246, 16), (248, 17), (250, 16), (253, 14), (255, 13), (256, 16), (257, 18), (261, 18), (263, 15), (264, 16), (267, 4), (269, 13), (273, 13), (277, 16), (280, 15), (286, 13), (287, 15), (288, 15), (290, 16), (292, 16), (294, 14), (298, 13), (299, 14), (301, 18), (304, 14), (306, 17), (307, 16), (308, 17), (310, 18), (311, 18), (312, 17), (318, 15), (320, 18), (321, 18), (322, 18), (323, 15), (324, 18), (326, 15), (330, 18), (332, 14), (334, 8), (337, 4), (340, 10), (341, 9), (342, 7), (343, 6), (345, 6), (347, 8), (350, 6), (351, 5), (352, 12), (353, 16), (354, 12), (355, 12), (356, 7), (357, 11), (358, 12), (359, 10), (360, 17), (361, 16), (362, 17), (363, 17), (364, 17), (368, 17), (369, 17), (373, 18), (374, 16), (375, 17), (377, 14), (378, 9), (379, 15), (380, 10), (383, 9), (385, 10), (387, 15), (389, 6), (390, 8), (394, 5), (395, 5), (396, 8), (398, 8), (401, 4), (402, 15), (403, 14), (404, 11), (405, 10), (407, 13), (412, 12), (414, 13), (415, 5), (417, 12), (418, 14), (419, 4), (420, 5), (423, 10), (425, 8), (429, 8), (430, 9), (431, 7), (433, 6), (435, 15), (436, 12), (437, 16), (439, 16), (443, 10)]
nb_edges_0 = 1403 rho= 0.1 # of rows = 18 # of columns= 219 total_degree_0= 1403 RHS= 140.3
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  12 with obj value: 201.40421052631578 KP time = 0.38449295808095485 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01582 - (Local CPU) 0.01582 - (Global CPU) 0.40031

 Solve status: Optimal Objective value: 38.80000 nb_rows 18 nb_cols 209
----------------------------------------
----------------------------------------

        Updated data after iteration: 12 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (18, 209) and density : 0.665 and number of remaining ones : 2539
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.665 density  and density_threshold= 0.700


I am in the while loop with i= 13 density= 0.6645401382243488 and fixed_threshold= 0.7

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 181.645
I solved model name = row_knapsack_problem for iteration i =  13 with obj value: 181.64470588235295 KP time = 0.40031287411693484 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01446 - (Local CPU) 0.01446 - (Global CPU) 0.41477

 Solve status: Optimal Objective value: 181.64471 nb_rows 16 nb_cols 209
----------------------------------------
----------------------------------------

        Updated data after iteration: 13 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (16, 209) and density : 0.674 and number of remaining ones : 2253
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(18, 13), (19, 11), (21, 15), (23, 14), (24, 12), (25, 13), (26, 12), (27, 15), (29, 12), (31, 15), (32, 12), (34, 14), (36, 14), (37, 12), (38, 13), (41, 11), (47, 14), (49, 12), (50, 14), (52, 14), (57, 13), (61, 10), (64, 9), (70, 12), (74, 8), (76, 11), (78, 12), (80, 13), (82, 10), (83, 11), (84, 13), (92, 12), (93, 10), (94, 9), (95, 4), (96, 9), (98, 12), (112, 8), (113, 5), (115, 6), (117, 6), (119, 8), (120, 8), (122, 7), (123, 5), (125, 6), (129, 10), (130, 7), (131, 4), (136, 6), (137, 13), (139, 14), (141, 14), (144, 12), (146, 11), (148, 15), (149, 13), (155, 11), (158, 11), (159, 7), (160, 11), (161, 7), (164, 7), (165, 15), (166, 10), (168, 12), (171, 12), (174, 12), (178, 14), (179, 4), (180, 9), (181, 9), (182, 13), (183, 13), (184, 14), (185, 12), (187, 12), (188, 11), (190, 12), (192, 3), (193, 4), (194, 9), (195, 6), (197, 10), (199, 8), (207, 9), (208, 9), (209, 5), (210, 5), (213, 10), (216, 15), (217, 6), (220, 12), (222, 12), (223, 4), (225, 9), (226, 7), (230, 10), (232, 4), (234, 4), (235, 7), (236, 11), (238, 13), (239, 10), (240, 4), (241, 9), (243, 15), (246, 15), (248, 15), (250, 15), (253, 13), (255, 12), (256, 15), (257, 16), (261, 16), (263, 14), (264, 15), (267, 3), (269, 12), (273, 12), (277, 15), (280, 13), (286, 12), (287, 14), (288, 13), (290, 15), (292, 14), (294, 13), (298, 11), (299, 12), (301, 16), (304, 12), (306, 15), (307, 14), (308, 15), (310, 16), (311, 16), (312, 15), (318, 13), (320, 16), (321, 16), (322, 16), (323, 13), (324, 16), (326, 13), (330, 16), (332, 13), (334, 7), (340, 9), (341, 9), (342, 5), (343, 5), (345, 6), (347, 7), (350, 6), (351, 5), (352, 10), (353, 14), (354, 10), (355, 10), (356, 7), (357, 9), (358, 10), (359, 8), (360, 15), (361, 14), (362, 15), (363, 15), (364, 15), (368, 15), (369, 15), (373, 16), (374, 15), (375, 15), (377, 13), (378, 8), (379, 13), (380, 8), (383, 8), (385, 10), (387, 14), (389, 6), (390, 7), (394, 4), (395, 4), (396, 7), (398, 7), (402, 13), (403, 13), (404, 10), (405, 9), (407, 11), (412, 11), (414, 11), (415, 5), (417, 12), (418, 13), (420, 5), (423, 8), (425, 7), (429, 7), (430, 8), (431, 6), (433, 5), (435, 14), (436, 10), (437, 14), (439, 15), (443, 8)]
nb_edges_0 = 1091 rho= 0.1 # of rows = 16 # of columns= 209 total_degree_0= 1091 RHS= 109.10000000000001
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  13 with obj value: 181.64470588235295 KP time = 0.41476949909701943 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01570 - (Local CPU) 0.01570 - (Global CPU) 0.43047

 Solve status: Optimal Objective value: 33.70000 nb_rows 16 nb_cols 200
----------------------------------------
----------------------------------------

        Updated data after iteration: 13 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (16, 200) and density : 0.693 and number of remaining ones : 2253
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.693 density  and density_threshold= 0.700


I am in the while loop with i= 14 density= 0.6934375 and fixed_threshold= 0.7

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 147.150
I solved model name = row_knapsack_problem for iteration i =  14 with obj value: 147.14999999999998 KP time = 0.43046670709736645 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01429 - (Local CPU) 0.01429 - (Global CPU) 0.44476

 Solve status: Optimal Objective value: 147.15000 nb_rows 14 nb_cols 200
----------------------------------------
----------------------------------------

        Updated data after iteration: 14 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (14, 200) and density : 0.707 and number of remaining ones : 1979
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(18, 11), (19, 10), (21, 13), (23, 12), (24, 12), (25, 13), (26, 12), (27, 13), (29, 12), (31, 13), (32, 12), (34, 12), (36, 13), (37, 12), (38, 11), (41, 11), (47, 13), (49, 12), (50, 13), (52, 13), (57, 11), (61, 10), (64, 9), (70, 12), (74, 7), (76, 10), (78, 12), (80, 12), (82, 10), (83, 11), (84, 12), (92, 11), (93, 10), (94, 9), (95, 3), (96, 8), (98, 11), (112, 7), (113, 5), (115, 6), (117, 6), (119, 8), (120, 7), (122, 7), (123, 3), (125, 6), (129, 10), (130, 7), (136, 5), (137, 12), (139, 12), (141, 12), (144, 10), (146, 10), (148, 13), (149, 11), (155, 9), (158, 9), (159, 5), (160, 10), (161, 6), (164, 6), (165, 13), (166, 8), (168, 10), (171, 10), (174, 10), (178, 12), (180, 7), (181, 7), (182, 11), (183, 11), (184, 12), (185, 10), (187, 10), (188, 9), (190, 10), (194, 8), (195, 5), (197, 8), (199, 8), (207, 9), (208, 9), (209, 4), (210, 5), (213, 10), (216, 13), (217, 6), (220, 12), (222, 12), (225, 8), (226, 6), (230, 10), (234, 3), (235, 6), (236, 9), (238, 12), (239, 9), (240, 3), (241, 8), (243, 13), (246, 13), (248, 13), (250, 13), (253, 12), (255, 11), (256, 13), (257, 14), (261, 14), (263, 12), (264, 13), (269, 12), (273, 11), (277, 14), (280, 12), (286, 11), (287, 13), (288, 11), (290, 14), (292, 12), (294, 12), (298, 10), (299, 11), (301, 14), (304, 10), (306, 14), (307, 13), (308, 14), (310, 14), (311, 14), (312, 14), (318, 12), (320, 14), (321, 14), (322, 14), (323, 12), (324, 14), (326, 12), (330, 14), (332, 12), (334, 5), (340, 8), (341, 9), (342, 5), (343, 3), (345, 4), (347, 5), (350, 4), (351, 3), (352, 10), (353, 12), (354, 10), (355, 10), (356, 5), (357, 9), (358, 10), (359, 8), (360, 13), (361, 12), (362, 13), (363, 13), (364, 13), (368, 13), (369, 13), (373, 14), (374, 13), (375, 13), (377, 11), (378, 7), (379, 11), (380, 7), (383, 7), (385, 8), (387, 12), (389, 5), (390, 6), (396, 6), (398, 6), (402, 12), (403, 11), (404, 9), (405, 8), (407, 9), (412, 9), (414, 9), (415, 4), (417, 11), (418, 11), (420, 5), (423, 7), (425, 5), (429, 6), (430, 6), (431, 5), (433, 5), (435, 13), (436, 9), (437, 13), (439, 14), (443, 7)]
nb_edges_0 = 821 rho= 0.1 # of rows = 14 # of columns= 200 total_degree_0= 821 RHS= 82.10000000000001
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  14 with obj value: 147.14999999999998 KP time = 0.4447604981251061 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01566 - (Local CPU) 0.01567 - (Global CPU) 0.46043

 Solve status: Optimal Objective value: 24.44000 nb_rows 14 nb_cols 192
----------------------------------------
----------------------------------------

        Updated data after iteration: 14 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (14, 192) and density : 0.727 and number of remaining ones : 1979
        

----------------------------------------
----------------------------------------

----------------------------------------

            End of greedy approaches. Exit while loop. I did: 14 iterations
            Density : 0.727 > 0.700
            It took me : 0.460 time
            Found matrix of size : (14, 192) and density : 0.727
            
----------------------------------------

 Calling exact approaches for QB clique discovery with delta = 0.0
----------------------------------------

----------------------------------------

I am in warm_exact before calling max_e_h $$$$$$$$$$$$$$$$$$

----------------------------------------------------------------------
Model status: Optimal
----------------------------------------------------------------------
Computed by max_e_h Objective Value : 2236.000 
Model status: Optimal
Solution saved to Experiments/prob_8/results_h_2_M_1.csv

----------------------------------------------------------------------
Stats
 Model solved : max_e_h  Local Time:  - (real) 0.09855 - (Local CPU) 0.09856 - (Global CPU) 0.09856

 Solve status: Optimal Objective value: 2236.00000 nb_rows 13 nb_cols 30
----------------------------------------

----------------------------------------
Results from updating data after solving model = max_e_h  delta =   0.0
Number of Remaining number  Rows  : 13
Number of Remaining number Columns : 30
Remaining  number Edges_0 P: 0 Remaining  number Edges_1 : 390 Density : 1.0 current obj value 2236.0
----------------------------------------

----------------------------------------

Exit from the heuristic (or exact  approach)  max_e_c  with delta= 0.0 Found matrix with rows_res of lenght = 13  and cols_res of lenght = 30
----------------------------------------

        Exit from the exact approach: max_e_c for matrix 1
        with delta =  0.0
        Found matrix of size : (13, 30)
        and density : 1.000
        and # of ones : 390
        and Heuristic QBC time   : 0.09856
        and Global QBC  time  : 0.09856
        
 Remaining Rows  : [0, 14, 16, 18, 29, 31, 35, 37, 4, 42, 5, 58, 8]
 Remaining  Cols  : [216, 243, 246, 248, 250, 256, 257, 261, 264, 277, 290, 301, 306, 308, 310, 311, 312, 320, 321, 322, 324, 330, 362, 363, 364, 368, 369, 373, 374, 439]

----------------------------------------------------------------------
 
    End of computations for matrix 1 in  data/prob_8.csv at level 2 and debug  2
    With  model: max_e_c and quasi-biclique error: 0.0 
    Size of Remaining matrix : (13,30), with  density : 1.0 and number of ones: 390
    Global Time (in sec): 0.559
    Total Time in QBC approaches: 0.099
    Time in greedy approach: 0.460,  size of matrix found by greedy : (14,192) 
    With density : 0.727 and # ones : 1953 
    Time in heuristic only : 0.099 
    Time in warm start only : 0.000
    Number of iterations in greedy approach: 14
    Percentage of greedy approach run time in global run time : 82.37% 
    Percentage of heuristic run time in QBC run time : 100.00%
    With zero deletion rate (rho): 0.1 and threshold: 0.7
    
----------------------------------------------------------------------

dec_conq= 2

 Level 1, Matrix 2:
Size Rows: 51
Size Cols: 466

 Level 1 Matrix  3:
Size Rows: 64
Size Cols: 436

----------------------------------------------------------------------
***Stats Current Input for matrix 2 in  data/prob_8.csv at level 1 and with model:  max_e_c***
Size of current matrix :  51 * 466 = 23766 ; dec_conq: 1
Prev_lower_bound :  None number input zeros :  15683 ; number input ones :  8083
rho =  0.1 ; delta :  0.0
Input density : 0.340 ; density_threshold: 0.70000
----------------------------------------------------------------------
End Current  Stats
----------------------------------------------------------------------


calling greedy approaches for zero deletion, density= 0.340 density  and density_threshold= 0.700


I am in the while loop with i= 1 density= 0.3401077169065051 and fixed_threshold= 0.7

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 101.681
I solved model name = row_knapsack_problem for iteration i =  1 with obj value: 101.68133971291866 KP time = 0.46042553905863315 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01777 - (Local CPU) 0.01777 - (Global CPU) 0.47819

 Solve status: Optimal Objective value: 101.68134 nb_rows 48 nb_cols 466
----------------------------------------
----------------------------------------

        Updated data after iteration: 1 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (48, 466) and density : 0.356 and number of remaining ones : 7954
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(0, 3), (1, 15), (2, 5), (3, 13), (4, 4), (5, 17), (6, 8), (7, 10), (8, 10), (9, 14), (10, 20), (11, 17), (12, 17), (13, 19), (14, 19), (15, 21), (16, 16), (17, 1), (18, 41), (19, 30), (20, 5), (21, 36), (22, 5), (23, 36), (24, 25), (25, 25), (26, 25), (27, 37), (28, 22), (29, 32), (30, 13), (31, 29), (32, 32), (33, 6), (34, 28), (35, 10), (36, 24), (37, 19), (38, 28), (39, 16), (40, 13), (41, 24), (42, 12), (43, 10), (44, 19), (45, 10), (46, 10), (47, 28), (48, 11), (49, 15), (50, 21), (51, 10), (52, 15), (53, 12), (54, 16), (55, 17), (56, 13), (57, 18), (58, 12), (59, 18), (60, 14), (61, 18), (62, 25), (63, 22), (64, 10), (65, 9), (66, 6), (67, 9), (68, 11), (69, 7), (70, 20), (71, 11), (72, 17), (73, 14), (74, 20), (75, 11), (76, 15), (77, 15), (78, 19), (79, 23), (80, 28), (81, 21), (82, 11), (83, 21), (84, 20), (85, 12), (86, 11), (87, 9), (88, 10), (89, 10), (90, 11), (91, 12), (92, 22), (93, 21), (94, 13), (95, 20), (96, 13), (97, 14), (98, 16), (99, 16), (100, 11), (101, 14), (102, 11), (103, 12), (104, 14), (105, 10), (106, 16), (107, 8), (108, 17), (109, 15), (110, 23), (111, 9), (112, 11), (113, 24), (114, 10), (115, 11), (116, 11), (117, 7), (118, 18), (119, 29), (120, 13), (121, 19), (122, 18), (123, 23), (124, 22), (125, 12), (126, 11), (127, 13), (128, 10), (129, 17), (130, 11), (131, 11), (132, 16), (133, 6), (134, 16), (135, 8), (136, 22), (137, 17), (138, 13), (139, 36), (140, 14), (141, 28), (142, 10), (143, 19), (144, 21), (145, 10), (146, 21), (147, 13), (148, 29), (149, 29), (150, 13), (151, 13), (152, 13), (153, 7), (154, 16), (155, 18), (156, 10), (157, 13), (158, 22), (159, 15), (160, 18), (161, 15), (162, 13), (163, 18), (164, 17), (165, 24), (166, 16), (167, 19), (168, 19), (169, 17), (170, 10), (171, 12), (172, 17), (173, 22), (174, 18), (175, 8), (176, 14), (177, 21), (178, 16), (179, 13), (180, 25), (181, 23), (182, 17), (183, 22), (184, 23), (185, 17), (186, 17), (187, 13), (188, 22), (189, 10), (190, 16), (191, 15), (192, 18), (193, 11), (194, 11), (195, 18), (196, 21), (197, 14), (198, 10), (199, 16), (200, 17), (201, 20), (202, 14), (203, 13), (204, 7), (205, 8), (206, 9), (207, 12), (208, 22), (209, 15), (210, 11), (211, 12), (212, 16), (213, 18), (214, 14), (215, 17), (216, 46), (217, 23), (218, 6), (219, 19), (220, 20), (221, 9), (222, 17), (223, 22), (224, 12), (225, 17), (226, 12), (227, 14), (228, 13), (229, 13), (230, 14), (231, 12), (232, 18), (233, 14), (234, 22), (235, 19), (236, 21), (237, 12), (238, 25), (239, 17), (240, 15), (241, 18), (242, 7), (243, 27), (244, 14), (245, 14), (246, 23), (247, 12), (248, 27), (249, 7), (250, 17), (251, 17), (252, 10), (253, 19), (254, 7), (255, 12), (256, 18), (257, 34), (258, 11), (259, 10), (260, 18), (261, 26), (262, 9), (263, 16), (264, 17), (265, 16), (266, 12), (267, 18), (268, 14), (269, 15), (270, 14), (271, 10), (272, 7), (273, 17), (274, 11), (275, 9), (276, 13), (277, 25), (278, 14), (279, 13), (280, 23), (281, 18), (282, 14), (283, 10), (284, 14), (285, 9), (286, 28), (287, 27), (288, 18), (289, 19), (290, 23), (291, 10), (292, 27), (293, 8), (294, 19), (295, 9), (296, 8), (297, 14), (298, 20), (299, 14), (300, 8), (301, 27), (302, 15), (303, 16), (304, 26), (305, 17), (306, 25), (307, 20), (308, 20), (309, 14), (310, 38), (311, 38), (312, 26), (313, 12), (314, 12), (315, 4), (316, 16), (317, 16), (318, 24), (319, 12), (320, 30), (321, 30), (322, 32), (323, 23), (324, 32), (325, 16), (326, 26), (327, 18), (328, 20), (329, 3), (330, 36), (331, 19), (332, 20), (333, 18), (334, 29), (335, 17), (336, 11), (337, 22), (338, 18), (339, 12), (340, 23), (341, 21), (342, 18), (343, 26), (344, 9), (345, 29), (346, 12), (347, 27), (348, 9), (349, 10), (350, 26), (351, 26), (352, 14), (353, 31), (354, 14), (355, 11), (356, 25), (357, 9), (358, 16), (359, 10), (360, 33), (361, 31), (362, 35), (363, 36), (364, 35), (365, 9), (366, 13), (367, 10), (368, 38), (369, 31), (370, 11), (371, 12), (372, 12), (373, 43), (374, 25), (375, 38), (376, 13), (377, 28), (378, 16), (379, 34), (380, 26), (381, 26), (382, 14), (383, 28), (384, 24), (385, 11), (386, 9), (387, 21), (388, 12), (389, 17), (390, 17), (391, 8), (392, 10), (393, 11), (394, 20), (395, 21), (396, 16), (397, 10), (398, 19), (399, 18), (400, 18), (401, 10), (402, 27), (403, 28), (404, 28), (405, 19), (406, 2), (407, 30), (408, 14), (409, 5), (410, 8), (411, 10), (412, 34), (413, 11), (414, 35), (415, 22), (416, 11), (417, 22), (418, 27), (419, 21), (420, 17), (421, 7), (422, 11), (423, 21), (424, 11), (425, 17), (426, 15), (427, 11), (428, 9), (429, 17), (430, 13), (431, 16), (432, 7), (433, 16), (434, 10), (435, 27), (436, 15), (437, 26), (438, 13), (439, 22), (440, 3), (441, 17), (442, 18), (443, 31), (444, 14), (445, 17), (446, 16), (447, 17), (448, 16), (449, 20), (450, 19), (451, 3), (452, 17), (453, 21), (454, 8), (455, 15), (456, 17), (457, 6), (458, 15), (459, 12), (460, 15), (461, 18), (462, 15), (463, 20), (464, 17), (465, 13)]
nb_edges_0 = 14414 rho= 0.1 # of rows = 48 # of columns= 466 total_degree_0= 14414 RHS= 1441.4
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  1 with obj value: 101.68133971291866 KP time = 0.47819395607803017 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01872 - (Local CPU) 0.01872 - (Global CPU) 0.49691

 Solve status: Optimal Objective value: 200.68000 nb_rows 48 nb_cols 431
----------------------------------------
----------------------------------------

        Updated data after iteration: 1 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (48, 431) and density : 0.374 and number of remaining ones : 7954
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.374 density  and density_threshold= 0.700


I am in the while loop with i= 2 density= 0.37446829079659705 and fixed_threshold= 0.7

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 624.453
I solved model name = row_knapsack_problem for iteration i =  2 with obj value: 624.4527972027971 KP time = 0.49691374704707414 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01551 - (Local CPU) 0.01551 - (Global CPU) 0.51242

 Solve status: Optimal Objective value: 624.45280 nb_rows 43 nb_cols 431
----------------------------------------
----------------------------------------

        Updated data after iteration: 2 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (43, 431) and density : 0.380 and number of remaining ones : 7043
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(1, 14), (3, 11), (5, 16), (7, 9), (8, 9), (9, 13), (10, 19), (11, 16), (12, 17), (13, 18), (14, 18), (15, 20), (16, 15), (18, 37), (19, 28), (21, 32), (23, 33), (24, 23), (25, 23), (26, 23), (27, 33), (28, 19), (29, 30), (30, 13), (31, 27), (32, 31), (34, 27), (35, 9), (36, 21), (37, 18), (38, 25), (39, 16), (40, 12), (41, 21), (42, 11), (43, 10), (44, 16), (45, 8), (46, 10), (47, 26), (48, 11), (49, 14), (50, 21), (51, 8), (52, 14), (53, 10), (54, 15), (55, 15), (56, 11), (57, 17), (58, 11), (59, 14), (60, 12), (61, 16), (62, 24), (63, 20), (64, 10), (65, 8), (67, 8), (68, 9), (70, 18), (71, 10), (72, 16), (73, 12), (74, 18), (75, 7), (76, 14), (77, 14), (78, 19), (79, 22), (80, 25), (81, 17), (82, 10), (83, 19), (84, 20), (85, 11), (86, 10), (87, 8), (88, 10), (89, 8), (90, 10), (91, 10), (92, 21), (93, 21), (94, 12), (95, 18), (96, 12), (97, 12), (98, 15), (99, 13), (100, 10), (101, 13), (102, 10), (103, 10), (104, 13), (105, 9), (106, 15), (108, 15), (109, 15), (110, 21), (111, 8), (112, 11), (113, 20), (114, 9), (115, 11), (116, 10), (118, 16), (119, 26), (120, 13), (121, 16), (122, 15), (123, 19), (124, 19), (125, 11), (126, 10), (127, 11), (128, 8), (129, 15), (130, 9), (131, 11), (132, 15), (134, 13), (135, 7), (136, 20), (137, 16), (138, 11), (139, 32), (140, 11), (141, 26), (142, 10), (143, 17), (144, 19), (145, 10), (146, 19), (147, 13), (148, 27), (149, 27), (150, 13), (151, 13), (152, 12), (154, 15), (155, 18), (156, 8), (157, 12), (158, 20), (159, 13), (160, 16), (161, 13), (162, 9), (163, 16), (164, 15), (165, 23), (166, 15), (167, 17), (168, 18), (169, 16), (170, 8), (171, 10), (172, 14), (173, 20), (174, 18), (176, 13), (177, 18), (178, 13), (179, 11), (180, 23), (181, 20), (182, 16), (183, 22), (184, 20), (185, 17), (186, 16), (187, 13), (188, 20), (189, 10), (190, 16), (191, 14), (192, 16), (193, 10), (194, 11), (195, 16), (196, 19), (197, 13), (198, 6), (199, 13), (200, 15), (201, 17), (202, 13), (203, 12), (206, 9), (207, 10), (208, 20), (209, 13), (210, 11), (211, 12), (212, 16), (213, 18), (214, 12), (215, 15), (216, 41), (217, 20), (219, 18), (220, 18), (221, 9), (222, 13), (223, 20), (224, 10), (225, 17), (226, 11), (227, 12), (228, 10), (229, 13), (230, 13), (231, 9), (232, 17), (233, 11), (234, 20), (235, 15), (236, 21), (237, 11), (238, 22), (239, 17), (240, 12), (241, 17), (243, 26), (244, 12), (245, 14), (246, 20), (247, 10), (248, 25), (250, 16), (251, 16), (252, 9), (253, 18), (255, 12), (256, 18), (257, 33), (258, 10), (259, 9), (260, 18), (261, 24), (262, 8), (263, 14), (264, 17), (265, 15), (266, 10), (267, 16), (268, 13), (269, 14), (270, 12), (271, 8), (273, 15), (274, 9), (275, 7), (276, 12), (277, 23), (278, 12), (279, 11), (280, 19), (281, 15), (282, 13), (283, 9), (284, 13), (285, 9), (286, 24), (287, 25), (288, 16), (289, 17), (290, 21), (291, 9), (292, 24), (293, 7), (294, 18), (295, 8), (297, 13), (298, 18), (299, 13), (301, 24), (302, 14), (303, 14), (304, 23), (305, 13), (306, 23), (307, 18), (308, 18), (309, 11), (310, 34), (311, 35), (312, 23), (313, 12), (314, 10), (316, 15), (317, 14), (318, 21), (319, 11), (320, 28), (321, 28), (322, 30), (323, 21), (324, 29), (325, 15), (326, 23), (327, 17), (328, 18), (330, 34), (331, 18), (332, 17), (333, 18), (334, 28), (335, 16), (336, 9), (337, 20), (338, 17), (339, 10), (340, 21), (341, 17), (342, 17), (343, 23), (344, 8), (345, 26), (346, 9), (347, 25), (348, 8), (349, 9), (350, 24), (351, 23), (352, 13), (353, 28), (354, 13), (355, 9), (356, 23), (357, 8), (358, 14), (359, 8), (360, 32), (361, 30), (362, 34), (363, 35), (364, 33), (365, 6), (366, 12), (367, 8), (368, 35), (369, 29), (370, 9), (371, 9), (372, 9), (373, 40), (374, 25), (375, 35), (376, 10), (377, 27), (378, 16), (379, 31), (380, 23), (381, 21), (382, 10), (383, 25), (384, 19), (385, 10), (386, 7), (387, 21), (388, 12), (389, 15), (390, 17), (392, 10), (393, 11), (394, 17), (395, 16), (396, 16), (397, 9), (398, 17), (399, 18), (400, 18), (401, 10), (402, 24), (403, 25), (404, 23), (405, 16), (407, 26), (408, 13), (411, 10), (412, 30), (413, 11), (414, 32), (415, 18), (416, 11), (417, 19), (418, 25), (419, 21), (420, 15), (422, 10), (423, 19), (424, 10), (425, 17), (426, 15), (427, 10), (428, 8), (429, 15), (430, 13), (431, 15), (433, 13), (434, 9), (435, 24), (436, 14), (437, 23), (438, 12), (439, 19), (441, 16), (442, 17), (443, 29), (444, 14), (445, 15), (446, 15), (447, 16), (448, 15), (449, 19), (450, 18), (452, 15), (453, 20), (454, 6), (455, 14), (456, 15), (458, 14), (459, 11), (460, 14), (461, 17), (462, 14), (463, 19), (464, 16), (465, 13)]
nb_edges_0 = 11490 rho= 0.1 # of rows = 43 # of columns= 431 total_degree_0= 11490 RHS= 1149.0
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  2 with obj value: 624.4527972027971 KP time = 0.5124229970388114 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01856 - (Local CPU) 0.01856 - (Global CPU) 0.53098

 Solve status: Optimal Objective value: 256.08824 nb_rows 43 nb_cols 398
----------------------------------------
----------------------------------------

        Updated data after iteration: 2 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (43, 398) and density : 0.396 and number of remaining ones : 7043
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.396 density  and density_threshold= 0.700


I am in the while loop with i= 3 density= 0.39640060768961083 and fixed_threshold= 0.7

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 582.690
I solved model name = row_knapsack_problem for iteration i =  3 with obj value: 582.6904761904761 KP time = 0.5309813721105456 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01639 - (Local CPU) 0.01639 - (Global CPU) 0.54737

 Solve status: Optimal Objective value: 582.69048 nb_rows 38 nb_cols 398
----------------------------------------
----------------------------------------

        Updated data after iteration: 3 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (38, 398) and density : 0.401 and number of remaining ones : 6064
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(1, 14), (3, 11), (5, 15), (7, 9), (9, 13), (10, 18), (11, 15), (12, 17), (13, 18), (14, 18), (15, 20), (16, 15), (18, 32), (19, 24), (21, 29), (23, 30), (24, 21), (25, 21), (26, 21), (27, 30), (28, 16), (29, 26), (30, 11), (31, 24), (32, 27), (34, 22), (35, 7), (36, 19), (37, 16), (38, 22), (39, 14), (40, 11), (41, 17), (42, 11), (43, 9), (44, 13), (46, 7), (47, 22), (48, 10), (49, 13), (50, 19), (52, 12), (53, 10), (54, 13), (55, 14), (56, 10), (57, 15), (58, 10), (59, 13), (60, 10), (61, 14), (62, 20), (63, 18), (64, 10), (68, 8), (70, 16), (71, 8), (72, 14), (73, 9), (74, 16), (76, 13), (77, 13), (78, 16), (79, 20), (80, 23), (81, 13), (82, 10), (83, 18), (84, 16), (85, 10), (86, 8), (88, 8), (90, 9), (91, 9), (92, 18), (93, 19), (94, 11), (95, 16), (96, 10), (97, 11), (98, 13), (99, 11), (100, 9), (101, 12), (102, 9), (103, 9), (104, 11), (105, 8), (106, 14), (108, 13), (109, 13), (110, 20), (112, 9), (113, 17), (114, 8), (115, 9), (116, 9), (118, 14), (119, 24), (120, 10), (121, 14), (122, 14), (123, 16), (124, 17), (125, 10), (126, 8), (127, 9), (129, 14), (130, 9), (131, 10), (132, 12), (134, 13), (136, 18), (137, 14), (138, 10), (139, 29), (140, 9), (141, 24), (142, 7), (143, 15), (144, 18), (145, 8), (146, 18), (147, 12), (148, 24), (149, 25), (150, 11), (151, 12), (152, 11), (154, 12), (155, 18), (157, 12), (158, 17), (159, 11), (160, 14), (161, 10), (162, 7), (163, 13), (164, 15), (165, 21), (166, 15), (167, 15), (168, 16), (169, 13), (171, 10), (172, 12), (173, 19), (174, 16), (176, 11), (177, 16), (178, 12), (179, 10), (180, 21), (181, 18), (182, 14), (183, 21), (184, 18), (185, 16), (186, 15), (187, 11), (188, 17), (189, 9), (190, 14), (191, 13), (192, 14), (193, 9), (194, 10), (195, 14), (196, 19), (197, 12), (199, 11), (200, 14), (201, 15), (202, 11), (203, 10), (207, 10), (208, 18), (209, 10), (210, 10), (211, 10), (212, 15), (213, 17), (214, 11), (215, 12), (216, 36), (217, 17), (219, 15), (220, 17), (222, 12), (223, 17), (224, 8), (225, 15), (226, 9), (227, 9), (228, 7), (229, 13), (230, 11), (231, 7), (232, 16), (233, 9), (234, 16), (235, 13), (236, 20), (237, 11), (238, 22), (239, 14), (240, 11), (241, 17), (243, 23), (244, 10), (245, 13), (246, 20), (247, 9), (248, 24), (250, 14), (251, 14), (252, 7), (253, 16), (255, 10), (256, 17), (257, 31), (258, 8), (259, 8), (260, 18), (261, 22), (263, 13), (264, 16), (265, 13), (266, 9), (267, 15), (268, 12), (269, 12), (270, 10), (273, 12), (276, 12), (277, 19), (278, 11), (279, 9), (280, 15), (281, 13), (282, 12), (283, 8), (284, 11), (285, 8), (286, 21), (287, 22), (288, 14), (289, 14), (290, 19), (291, 8), (292, 21), (294, 14), (297, 11), (298, 15), (299, 10), (301, 22), (302, 13), (303, 14), (304, 20), (305, 11), (306, 21), (307, 16), (308, 16), (309, 9), (310, 29), (311, 32), (312, 19), (313, 11), (314, 8), (316, 14), (317, 14), (318, 17), (319, 11), (320, 24), (321, 24), (322, 26), (323, 18), (324, 26), (325, 15), (326, 19), (327, 16), (328, 18), (330, 30), (331, 18), (332, 13), (333, 18), (334, 26), (335, 16), (336, 6), (337, 17), (338, 17), (339, 8), (340, 20), (341, 14), (342, 15), (343, 21), (345, 23), (346, 7), (347, 24), (349, 7), (350, 22), (351, 20), (352, 11), (353, 26), (354, 12), (356, 21), (358, 12), (360, 28), (361, 27), (362, 31), (363, 31), (364, 30), (366, 9), (368, 32), (369, 26), (370, 8), (371, 8), (373, 35), (374, 22), (375, 31), (376, 8), (377, 25), (378, 14), (379, 28), (380, 20), (381, 18), (382, 9), (383, 21), (384, 17), (385, 7), (387, 20), (388, 10), (389, 14), (390, 16), (392, 9), (393, 9), (394, 15), (395, 15), (396, 15), (397, 8), (398, 15), (399, 15), (400, 15), (401, 9), (402, 20), (403, 22), (404, 19), (405, 13), (407, 23), (408, 12), (411, 10), (412, 27), (413, 10), (414, 30), (415, 16), (416, 9), (417, 18), (418, 23), (419, 18), (420, 13), (422, 8), (423, 18), (424, 10), (425, 17), (426, 14), (427, 7), (429, 14), (430, 12), (431, 14), (433, 12), (434, 7), (435, 22), (436, 12), (437, 21), (438, 9), (439, 14), (441, 16), (442, 17), (443, 27), (444, 13), (445, 14), (446, 15), (447, 15), (448, 14), (449, 19), (450, 18), (452, 15), (453, 19), (455, 14), (456, 14), (458, 14), (459, 11), (460, 14), (461, 15), (462, 14), (463, 17), (464, 16), (465, 12)]
nb_edges_0 = 9060 rho= 0.1 # of rows = 38 # of columns= 398 total_degree_0= 9060 RHS= 906.0
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  3 with obj value: 582.6904761904761 KP time = 0.5473709561629221 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01858 - (Local CPU) 0.01858 - (Global CPU) 0.56595

 Solve status: Optimal Objective value: 223.86667 nb_rows 38 nb_cols 368
----------------------------------------
----------------------------------------

        Updated data after iteration: 3 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (38, 368) and density : 0.417 and number of remaining ones : 6064
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.417 density  and density_threshold= 0.700


I am in the while loop with i= 4 density= 0.4174771167048055 and fixed_threshold= 0.7

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 489.774
I solved model name = row_knapsack_problem for iteration i =  4 with obj value: 489.7735682819383 KP time = 0.5659481642069295 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01569 - (Local CPU) 0.01569 - (Global CPU) 0.58163

 Solve status: Optimal Objective value: 489.77357 nb_rows 34 nb_cols 368
----------------------------------------
----------------------------------------

        Updated data after iteration: 4 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (34, 368) and density : 0.422 and number of remaining ones : 5284
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(1, 12), (3, 11), (5, 14), (7, 8), (9, 12), (10, 15), (11, 14), (12, 16), (13, 17), (14, 17), (15, 17), (16, 14), (18, 30), (19, 22), (21, 26), (23, 26), (24, 18), (25, 18), (26, 19), (27, 27), (28, 16), (29, 23), (30, 10), (31, 23), (32, 26), (34, 21), (36, 17), (37, 15), (38, 19), (39, 12), (40, 11), (41, 16), (42, 10), (43, 8), (44, 13), (47, 20), (48, 9), (49, 11), (50, 17), (52, 11), (53, 9), (54, 12), (55, 12), (56, 9), (57, 13), (58, 9), (59, 12), (60, 8), (61, 14), (62, 18), (63, 18), (64, 10), (70, 15), (72, 14), (73, 8), (74, 14), (76, 12), (77, 11), (78, 13), (79, 18), (80, 21), (81, 10), (82, 10), (83, 16), (84, 14), (85, 9), (86, 8), (88, 8), (90, 8), (91, 8), (92, 17), (93, 18), (94, 11), (95, 13), (96, 10), (97, 9), (98, 12), (99, 10), (100, 9), (101, 11), (102, 8), (103, 7), (104, 10), (106, 12), (108, 12), (109, 11), (110, 18), (112, 8), (113, 15), (114, 7), (115, 8), (116, 9), (118, 13), (119, 20), (120, 10), (121, 13), (122, 11), (123, 15), (124, 15), (125, 8), (126, 7), (127, 7), (129, 12), (130, 8), (131, 10), (132, 11), (134, 12), (136, 17), (137, 13), (138, 8), (139, 26), (140, 8), (141, 21), (143, 14), (144, 15), (146, 15), (147, 12), (148, 22), (149, 22), (150, 10), (151, 11), (152, 10), (154, 11), (155, 15), (157, 11), (158, 13), (159, 9), (160, 13), (161, 8), (163, 11), (164, 14), (165, 20), (166, 13), (167, 14), (168, 15), (169, 11), (171, 10), (172, 11), (173, 19), (174, 14), (176, 10), (177, 15), (178, 12), (179, 9), (180, 20), (181, 17), (182, 13), (183, 19), (184, 16), (185, 14), (186, 12), (187, 11), (188, 17), (189, 8), (190, 12), (191, 11), (192, 12), (193, 9), (194, 10), (195, 14), (196, 17), (197, 10), (199, 10), (200, 12), (201, 14), (202, 11), (203, 8), (207, 8), (208, 17), (209, 9), (210, 7), (211, 9), (212, 12), (213, 15), (214, 10), (215, 11), (216, 32), (217, 16), (219, 15), (220, 15), (222, 10), (223, 14), (225, 12), (226, 9), (227, 9), (229, 11), (230, 11), (232, 14), (233, 9), (234, 15), (235, 12), (236, 18), (237, 10), (238, 19), (239, 12), (240, 10), (241, 16), (243, 21), (244, 9), (245, 12), (246, 18), (247, 9), (248, 22), (250, 13), (251, 11), (253, 14), (255, 9), (256, 16), (257, 29), (260, 17), (261, 20), (263, 11), (264, 15), (265, 13), (266, 8), (267, 14), (268, 11), (269, 10), (270, 10), (273, 11), (276, 11), (277, 17), (278, 8), (279, 9), (280, 13), (281, 10), (282, 9), (284, 9), (286, 19), (287, 19), (288, 13), (289, 14), (290, 17), (292, 20), (294, 12), (297, 9), (298, 13), (299, 9), (301, 19), (302, 11), (303, 11), (304, 18), (305, 11), (306, 20), (307, 14), (308, 14), (309, 8), (310, 28), (311, 30), (312, 18), (313, 11), (316, 14), (317, 12), (318, 15), (319, 9), (320, 23), (321, 24), (322, 26), (323, 18), (324, 24), (325, 12), (326, 17), (327, 14), (328, 16), (330, 27), (331, 16), (332, 12), (333, 17), (334, 25), (335, 14), (337, 15), (338, 14), (340, 17), (341, 11), (342, 13), (343, 20), (345, 21), (347, 23), (350, 21), (351, 18), (352, 9), (353, 23), (354, 11), (356, 20), (358, 10), (360, 27), (361, 24), (362, 28), (363, 29), (364, 28), (366, 9), (368, 29), (369, 25), (373, 31), (374, 20), (375, 29), (377, 23), (378, 14), (379, 26), (380, 19), (381, 15), (382, 8), (383, 18), (384, 15), (387, 19), (388, 10), (389, 12), (390, 15), (392, 8), (393, 8), (394, 13), (395, 13), (396, 15), (398, 12), (399, 13), (400, 14), (401, 9), (402, 18), (403, 18), (404, 17), (405, 10), (407, 19), (408, 12), (411, 10), (412, 23), (413, 8), (414, 26), (415, 13), (416, 9), (417, 16), (418, 20), (419, 16), (420, 12), (423, 15), (424, 9), (425, 16), (426, 12), (429, 11), (430, 11), (431, 13), (433, 12), (435, 20), (436, 11), (437, 19), (438, 8), (439, 12), (441, 15), (442, 16), (443, 25), (444, 11), (445, 13), (446, 13), (447, 14), (448, 13), (449, 17), (450, 16), (452, 14), (453, 18), (455, 13), (456, 13), (458, 13), (459, 11), (460, 13), (461, 14), (462, 13), (463, 16), (464, 15), (465, 11)]
nb_edges_0 = 7228 rho= 0.1 # of rows = 34 # of columns= 368 total_degree_0= 7228 RHS= 722.8000000000001
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  4 with obj value: 489.7735682819383 KP time = 0.5816340391756967 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01760 - (Local CPU) 0.01760 - (Global CPU) 0.59923

 Solve status: Optimal Objective value: 215.86154 nb_rows 34 nb_cols 340
----------------------------------------
----------------------------------------

        Updated data after iteration: 4 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (34, 340) and density : 0.438 and number of remaining ones : 5284
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.438 density  and density_threshold= 0.700


I am in the while loop with i= 5 density= 0.43814878892733566 and fixed_threshold= 0.7

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 429.958
I solved model name = row_knapsack_problem for iteration i =  5 with obj value: 429.9581280788177 KP time = 0.5992330812150612 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01486 - (Local CPU) 0.01486 - (Global CPU) 0.61409

 Solve status: Optimal Objective value: 429.95813 nb_rows 30 nb_cols 340
----------------------------------------
----------------------------------------

        Updated data after iteration: 5 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (30, 340) and density : 0.443 and number of remaining ones : 4522
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(1, 12), (3, 11), (5, 14), (9, 12), (10, 14), (11, 13), (12, 16), (13, 17), (14, 17), (15, 16), (16, 13), (18, 27), (19, 19), (21, 23), (23, 23), (24, 15), (25, 15), (26, 16), (27, 24), (28, 15), (29, 19), (30, 9), (31, 20), (32, 22), (34, 17), (36, 15), (37, 13), (38, 17), (39, 10), (40, 10), (41, 16), (42, 9), (44, 12), (47, 19), (48, 6), (49, 10), (50, 17), (52, 10), (53, 8), (54, 10), (55, 11), (56, 7), (57, 12), (58, 9), (59, 10), (61, 14), (62, 16), (63, 14), (64, 9), (70, 15), (72, 13), (74, 13), (76, 11), (77, 9), (78, 11), (79, 15), (80, 20), (81, 10), (82, 9), (83, 14), (84, 12), (85, 7), (86, 8), (91, 8), (92, 14), (93, 14), (94, 10), (95, 12), (96, 9), (97, 9), (98, 11), (99, 8), (100, 9), (101, 10), (104, 9), (106, 10), (108, 11), (109, 9), (110, 15), (112, 7), (113, 13), (116, 9), (118, 13), (119, 16), (120, 9), (121, 12), (122, 7), (123, 14), (124, 15), (129, 9), (131, 10), (132, 10), (134, 12), (136, 17), (137, 10), (139, 23), (141, 18), (143, 14), (144, 13), (146, 13), (147, 11), (148, 19), (149, 18), (150, 9), (151, 10), (152, 9), (154, 10), (155, 12), (157, 8), (158, 12), (159, 9), (160, 13), (163, 11), (164, 14), (165, 19), (166, 11), (167, 13), (168, 15), (169, 10), (171, 10), (172, 8), (173, 17), (174, 13), (176, 9), (177, 13), (178, 12), (179, 8), (180, 19), (181, 17), (182, 12), (183, 17), (184, 16), (185, 14), (186, 12), (187, 9), (188, 15), (190, 12), (191, 8), (192, 11), (193, 8), (194, 9), (195, 13), (196, 16), (197, 10), (199, 10), (200, 10), (201, 13), (202, 7), (207, 8), (208, 15), (209, 9), (211, 7), (212, 10), (213, 13), (214, 10), (215, 9), (216, 29), (217, 14), (219, 14), (220, 13), (222, 9), (223, 12), (225, 11), (226, 7), (227, 8), (229, 10), (230, 8), (232, 13), (233, 9), (234, 12), (235, 12), (236, 15), (237, 9), (238, 16), (239, 11), (240, 10), (241, 14), (243, 18), (244, 8), (245, 11), (246, 15), (247, 7), (248, 19), (250, 11), (251, 10), (253, 13), (255, 8), (256, 13), (257, 25), (260, 16), (261, 19), (263, 9), (264, 13), (265, 13), (267, 14), (268, 10), (269, 8), (270, 9), (273, 10), (276, 9), (277, 15), (279, 8), (280, 11), (281, 10), (282, 8), (284, 8), (286, 16), (287, 16), (288, 11), (289, 14), (290, 15), (292, 18), (294, 10), (297, 9), (298, 12), (299, 8), (301, 16), (302, 11), (303, 10), (304, 16), (305, 10), (306, 17), (307, 11), (308, 12), (310, 25), (311, 27), (312, 16), (313, 9), (316, 13), (317, 11), (318, 13), (319, 8), (320, 20), (321, 21), (322, 23), (323, 16), (324, 21), (325, 10), (326, 15), (327, 12), (328, 14), (330, 24), (331, 13), (332, 11), (333, 15), (334, 21), (335, 12), (337, 14), (338, 11), (340, 16), (341, 9), (342, 12), (343, 17), (345, 18), (347, 19), (350, 17), (351, 14), (352, 9), (353, 19), (354, 11), (356, 16), (358, 10), (360, 23), (361, 20), (362, 24), (363, 25), (364, 24), (366, 9), (368, 25), (369, 21), (373, 27), (374, 16), (375, 25), (377, 21), (378, 13), (379, 22), (380, 16), (381, 13), (383, 16), (384, 12), (387, 17), (388, 10), (389, 12), (390, 14), (394, 11), (395, 10), (396, 14), (398, 10), (399, 12), (400, 12), (401, 9), (402, 16), (403, 14), (404, 15), (405, 8), (407, 15), (408, 12), (411, 10), (412, 19), (414, 22), (415, 11), (416, 8), (417, 15), (418, 16), (419, 13), (420, 12), (423, 12), (424, 8), (425, 14), (426, 9), (429, 9), (430, 8), (431, 12), (433, 12), (435, 18), (436, 8), (437, 18), (439, 10), (441, 15), (442, 16), (443, 23), (444, 11), (445, 13), (446, 13), (447, 14), (448, 12), (449, 17), (450, 16), (452, 14), (453, 17), (455, 13), (456, 13), (458, 13), (459, 11), (460, 13), (461, 14), (462, 13), (463, 16), (464, 15), (465, 11)]
nb_edges_0 = 5678 rho= 0.1 # of rows = 30 # of columns= 340 total_degree_0= 5678 RHS= 567.8000000000001
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  5 with obj value: 429.9581280788177 KP time = 0.6140931221889332 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01748 - (Local CPU) 0.01748 - (Global CPU) 0.63157

 Solve status: Optimal Objective value: 192.83636 nb_rows 30 nb_cols 314
----------------------------------------
----------------------------------------

        Updated data after iteration: 5 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (30, 314) and density : 0.459 and number of remaining ones : 4522
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.459 density  and density_threshold= 0.700


I am in the while loop with i= 6 density= 0.45902335456475585 and fixed_threshold= 0.7

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 362.699
I solved model name = row_knapsack_problem for iteration i =  6 with obj value: 362.6989010989011 KP time = 0.6315696641104296 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01522 - (Local CPU) 0.01522 - (Global CPU) 0.64679

 Solve status: Optimal Objective value: 362.69890 nb_rows 27 nb_cols 314
----------------------------------------
----------------------------------------

        Updated data after iteration: 6 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (27, 314) and density : 0.464 and number of remaining ones : 3932
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(1, 10), (3, 10), (5, 12), (9, 10), (10, 12), (11, 11), (12, 14), (13, 15), (14, 15), (15, 14), (16, 11), (18, 24), (19, 18), (21, 20), (23, 20), (24, 14), (25, 14), (26, 15), (27, 21), (28, 13), (29, 18), (30, 9), (31, 19), (32, 19), (34, 16), (36, 14), (37, 11), (38, 16), (39, 10), (40, 9), (41, 15), (42, 8), (44, 12), (47, 17), (49, 10), (50, 15), (52, 9), (53, 6), (54, 8), (55, 10), (57, 10), (58, 9), (59, 9), (61, 14), (62, 14), (63, 14), (64, 9), (70, 15), (72, 12), (74, 12), (76, 11), (77, 9), (78, 10), (79, 15), (80, 20), (81, 9), (82, 8), (83, 14), (84, 11), (86, 7), (91, 7), (92, 13), (93, 14), (94, 9), (95, 11), (96, 9), (97, 9), (98, 9), (100, 9), (101, 7), (104, 9), (106, 9), (108, 9), (109, 9), (110, 12), (113, 12), (116, 9), (118, 12), (119, 13), (120, 7), (121, 11), (123, 11), (124, 13), (129, 8), (131, 8), (132, 9), (134, 9), (136, 14), (137, 10), (139, 22), (141, 16), (143, 13), (144, 13), (146, 12), (147, 10), (148, 18), (149, 16), (150, 9), (151, 8), (152, 8), (154, 9), (155, 12), (158, 12), (159, 9), (160, 13), (163, 11), (164, 14), (165, 18), (166, 10), (167, 11), (168, 15), (169, 9), (171, 10), (173, 14), (174, 13), (176, 9), (177, 11), (178, 11), (180, 17), (181, 16), (182, 12), (183, 15), (184, 15), (185, 12), (186, 11), (187, 9), (188, 14), (190, 12), (192, 10), (194, 8), (195, 12), (196, 14), (197, 9), (199, 9), (200, 10), (201, 12), (208, 14), (209, 8), (212, 8), (213, 10), (214, 8), (215, 8), (216, 26), (217, 12), (219, 13), (220, 11), (222, 6), (223, 12), (225, 10), (227, 8), (229, 10), (232, 11), (233, 7), (234, 11), (235, 12), (236, 14), (237, 9), (238, 13), (239, 9), (240, 9), (241, 12), (243, 17), (245, 11), (246, 14), (248, 18), (250, 10), (251, 10), (253, 12), (255, 7), (256, 12), (257, 23), (260, 15), (261, 17), (263, 8), (264, 12), (265, 13), (267, 13), (268, 8), (270, 7), (273, 10), (276, 7), (277, 14), (279, 7), (280, 9), (281, 9), (286, 14), (287, 15), (288, 9), (289, 12), (290, 14), (292, 17), (294, 9), (297, 9), (298, 11), (299, 7), (301, 13), (302, 11), (303, 8), (304, 16), (305, 8), (306, 16), (307, 9), (308, 10), (310, 22), (311, 25), (312, 14), (313, 9), (316, 12), (317, 10), (318, 12), (320, 19), (321, 20), (322, 21), (323, 15), (324, 19), (325, 10), (326, 13), (327, 12), (328, 12), (330, 22), (331, 13), (332, 10), (333, 14), (334, 20), (335, 12), (337, 13), (338, 10), (340, 15), (341, 8), (342, 11), (343, 17), (345, 17), (347, 18), (350, 17), (351, 14), (352, 8), (353, 18), (354, 9), (356, 16), (358, 8), (360, 22), (361, 19), (362, 22), (363, 22), (364, 22), (366, 9), (368, 23), (369, 20), (373, 24), (374, 15), (375, 24), (377, 19), (378, 13), (379, 21), (380, 16), (381, 11), (383, 13), (384, 10), (387, 17), (388, 10), (389, 10), (390, 12), (394, 9), (395, 10), (396, 14), (398, 8), (399, 10), (400, 11), (401, 9), (402, 15), (403, 13), (404, 13), (407, 13), (408, 11), (411, 9), (412, 16), (414, 19), (415, 10), (417, 13), (418, 14), (419, 13), (420, 10), (423, 12), (424, 7), (425, 13), (426, 9), (429, 9), (431, 11), (433, 11), (435, 15), (437, 15), (439, 9), (441, 13), (442, 14), (443, 21), (444, 10), (445, 11), (446, 11), (447, 12), (448, 10), (449, 15), (450, 14), (452, 12), (453, 15), (455, 11), (456, 11), (458, 11), (459, 9), (460, 11), (461, 12), (462, 11), (463, 14), (464, 13), (465, 9)]
nb_edges_0 = 4546 rho= 0.1 # of rows = 27 # of columns= 314 total_degree_0= 4546 RHS= 454.6
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  6 with obj value: 362.6989010989011 KP time = 0.6467941640876234 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01695 - (Local CPU) 0.01695 - (Global CPU) 0.66375

 Solve status: Optimal Objective value: 170.09474 nb_rows 27 nb_cols 290
----------------------------------------
----------------------------------------

        Updated data after iteration: 6 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (27, 290) and density : 0.480 and number of remaining ones : 3932
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.480 density  and density_threshold= 0.700


I am in the while loop with i= 7 density= 0.47956577266922096 and fixed_threshold= 0.7

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 312.163
I solved model name = row_knapsack_problem for iteration i =  7 with obj value: 312.1625766871166 KP time = 0.6637450390262529 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01477 - (Local CPU) 0.01477 - (Global CPU) 0.67851

 Solve status: Optimal Objective value: 312.16258 nb_rows 24 nb_cols 290
----------------------------------------
----------------------------------------

        Updated data after iteration: 7 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (24, 290) and density : 0.485 and number of remaining ones : 3377
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(1, 9), (3, 9), (5, 10), (9, 9), (10, 10), (11, 10), (12, 13), (13, 14), (14, 14), (15, 13), (16, 10), (18, 22), (19, 17), (21, 19), (23, 18), (24, 13), (25, 13), (26, 14), (27, 19), (28, 11), (29, 16), (30, 8), (31, 17), (32, 17), (34, 15), (36, 13), (37, 10), (38, 15), (39, 7), (40, 8), (41, 13), (44, 11), (47, 14), (49, 8), (50, 12), (52, 7), (55, 10), (57, 8), (58, 9), (59, 8), (61, 12), (62, 13), (63, 13), (64, 7), (70, 13), (72, 11), (74, 11), (76, 9), (77, 8), (78, 9), (79, 14), (80, 19), (81, 9), (83, 12), (84, 8), (92, 10), (93, 11), (94, 6), (95, 10), (96, 7), (97, 9), (98, 6), (100, 8), (104, 9), (106, 9), (108, 8), (109, 9), (110, 12), (113, 11), (116, 8), (118, 12), (119, 12), (121, 10), (123, 11), (124, 13), (131, 7), (132, 9), (134, 8), (136, 14), (137, 9), (139, 19), (141, 14), (143, 12), (144, 12), (146, 11), (147, 10), (148, 16), (149, 14), (150, 8), (152, 7), (154, 9), (155, 11), (158, 11), (159, 7), (160, 12), (163, 10), (164, 11), (165, 15), (166, 9), (167, 10), (168, 13), (169, 8), (171, 9), (173, 12), (174, 12), (176, 8), (177, 10), (178, 10), (180, 15), (181, 14), (182, 11), (183, 14), (184, 13), (185, 11), (186, 9), (187, 8), (188, 12), (190, 10), (192, 7), (194, 8), (195, 11), (196, 13), (197, 8), (199, 9), (200, 8), (201, 9), (208, 12), (212, 8), (213, 8), (214, 7), (215, 7), (216, 24), (217, 10), (219, 13), (220, 9), (223, 11), (225, 10), (227, 8), (229, 10), (232, 11), (234, 10), (235, 10), (236, 13), (237, 9), (238, 13), (239, 7), (240, 8), (241, 11), (243, 15), (245, 11), (246, 12), (248, 16), (250, 8), (251, 10), (253, 9), (256, 10), (257, 20), (260, 14), (261, 15), (264, 10), (265, 12), (267, 13), (268, 8), (273, 9), (277, 11), (280, 7), (281, 9), (286, 12), (287, 12), (288, 8), (289, 11), (290, 12), (292, 14), (294, 7), (297, 8), (298, 10), (301, 10), (302, 11), (304, 15), (305, 8), (306, 14), (307, 7), (308, 8), (310, 20), (311, 22), (312, 12), (313, 9), (316, 11), (317, 10), (318, 10), (320, 17), (321, 18), (322, 19), (323, 13), (324, 17), (325, 10), (326, 10), (327, 11), (328, 12), (330, 20), (331, 12), (332, 9), (333, 14), (334, 19), (335, 11), (337, 12), (338, 10), (340, 13), (342, 9), (343, 16), (345, 17), (347, 16), (350, 15), (351, 14), (353, 17), (354, 6), (356, 15), (360, 20), (361, 18), (362, 20), (363, 20), (364, 21), (366, 8), (368, 21), (369, 19), (373, 21), (374, 14), (375, 21), (377, 18), (378, 12), (379, 19), (380, 14), (381, 10), (383, 12), (384, 9), (387, 15), (388, 9), (389, 10), (390, 10), (394, 8), (395, 10), (396, 11), (398, 8), (399, 9), (400, 10), (401, 7), (402, 13), (403, 12), (404, 13), (407, 11), (408, 10), (411, 6), (412, 16), (414, 18), (415, 10), (417, 12), (418, 12), (419, 13), (420, 10), (423, 10), (425, 11), (426, 9), (429, 8), (431, 9), (433, 10), (435, 14), (437, 13), (439, 8), (441, 12), (442, 13), (443, 18), (444, 9), (445, 10), (446, 10), (447, 11), (448, 9), (449, 14), (450, 12), (452, 11), (453, 13), (455, 9), (456, 11), (458, 10), (459, 9), (460, 10), (461, 11), (462, 10), (463, 13), (464, 12), (465, 8)]
nb_edges_0 = 3583 rho= 0.1 # of rows = 24 # of columns= 290 total_degree_0= 3583 RHS= 358.3
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  7 with obj value: 312.1625766871166 KP time = 0.6785137470578775 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01682 - (Local CPU) 0.01682 - (Global CPU) 0.69533

 Solve status: Optimal Objective value: 144.65000 nb_rows 24 nb_cols 269
----------------------------------------
----------------------------------------

        Updated data after iteration: 7 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (24, 269) and density : 0.501 and number of remaining ones : 3377
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.501 density  and density_threshold= 0.700


I am in the while loop with i= 8 density= 0.5006195786864932 and fixed_threshold= 0.7

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 250.624
I solved model name = row_knapsack_problem for iteration i =  8 with obj value: 250.6241610738255 KP time = 0.6953307470539585 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01498 - (Local CPU) 0.01498 - (Global CPU) 0.71032

 Solve status: Optimal Objective value: 250.62416 nb_rows 21 nb_cols 269
----------------------------------------
----------------------------------------

        Updated data after iteration: 8 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (21, 269) and density : 0.509 and number of remaining ones : 2877
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(1, 8), (3, 8), (5, 10), (9, 8), (10, 9), (11, 9), (12, 12), (13, 13), (14, 13), (15, 11), (16, 9), (18, 19), (19, 15), (21, 18), (23, 17), (24, 13), (25, 13), (26, 14), (27, 18), (28, 8), (29, 15), (30, 6), (31, 15), (32, 14), (34, 14), (36, 13), (37, 9), (38, 14), (40, 7), (41, 12), (44, 10), (47, 13), (49, 7), (50, 10), (55, 10), (57, 7), (58, 8), (59, 7), (61, 11), (62, 12), (63, 11), (70, 13), (72, 9), (74, 11), (76, 7), (77, 8), (78, 8), (79, 11), (80, 18), (81, 8), (83, 11), (84, 5), (92, 7), (93, 9), (95, 9), (97, 8), (100, 8), (104, 8), (106, 9), (108, 6), (109, 7), (110, 11), (113, 9), (116, 6), (118, 12), (119, 11), (121, 9), (123, 11), (124, 12), (132, 9), (134, 8), (136, 13), (137, 8), (139, 16), (141, 13), (143, 10), (144, 11), (146, 11), (147, 9), (148, 14), (149, 14), (150, 8), (154, 7), (155, 10), (158, 10), (160, 11), (163, 9), (164, 9), (165, 13), (166, 8), (167, 9), (168, 11), (169, 6), (171, 8), (173, 9), (174, 11), (176, 7), (177, 9), (178, 10), (180, 13), (181, 12), (182, 9), (183, 14), (184, 12), (185, 10), (186, 8), (187, 8), (188, 11), (190, 9), (194, 8), (195, 10), (196, 12), (197, 8), (199, 7), (200, 8), (201, 9), (208, 10), (212, 8), (213, 8), (216, 21), (217, 9), (219, 12), (220, 9), (223, 8), (225, 9), (227, 8), (229, 10), (232, 11), (234, 9), (235, 8), (236, 13), (237, 9), (238, 12), (240, 7), (241, 10), (243, 13), (245, 10), (246, 10), (248, 14), (250, 6), (251, 9), (253, 7), (256, 8), (257, 17), (260, 13), (261, 13), (264, 7), (265, 12), (267, 13), (268, 8), (273, 7), (277, 9), (281, 9), (286, 10), (287, 10), (288, 6), (289, 10), (290, 10), (292, 13), (297, 8), (298, 9), (301, 9), (302, 9), (304, 14), (305, 8), (306, 11), (308, 6), (310, 18), (311, 19), (312, 10), (313, 9), (316, 11), (317, 9), (318, 8), (320, 15), (321, 16), (322, 17), (323, 11), (324, 15), (325, 9), (326, 9), (327, 10), (328, 11), (330, 17), (331, 10), (332, 8), (333, 13), (334, 17), (335, 9), (337, 11), (338, 9), (340, 11), (342, 8), (343, 14), (345, 15), (347, 14), (350, 14), (351, 12), (353, 14), (356, 13), (360, 17), (361, 15), (362, 17), (363, 17), (364, 18), (366, 7), (368, 18), (369, 16), (373, 18), (374, 11), (375, 18), (377, 16), (378, 10), (379, 16), (380, 12), (381, 9), (383, 11), (384, 8), (387, 13), (388, 8), (389, 9), (390, 9), (394, 7), (395, 10), (396, 10), (398, 7), (399, 9), (400, 7), (402, 11), (403, 10), (404, 12), (407, 10), (408, 8), (412, 15), (414, 17), (415, 10), (417, 9), (418, 11), (419, 12), (420, 9), (423, 9), (425, 9), (426, 8), (431, 8), (433, 9), (435, 12), (437, 10), (441, 11), (442, 11), (443, 17), (444, 8), (445, 9), (446, 9), (447, 10), (448, 9), (449, 12), (450, 11), (452, 10), (453, 11), (455, 8), (456, 10), (458, 9), (459, 8), (460, 9), (461, 10), (462, 10), (463, 11), (464, 10), (465, 7)]
nb_edges_0 = 2772 rho= 0.1 # of rows = 21 # of columns= 269 total_degree_0= 2772 RHS= 277.2
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  8 with obj value: 250.6241610738255 KP time = 0.7103155379882082 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01654 - (Local CPU) 0.01654 - (Global CPU) 0.72685

 Solve status: Optimal Objective value: 125.10000 nb_rows 21 nb_cols 249
----------------------------------------
----------------------------------------

        Updated data after iteration: 8 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (21, 249) and density : 0.525 and number of remaining ones : 2877
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.525 density  and density_threshold= 0.700


I am in the while loop with i= 9 density= 0.5251482118951999 and fixed_threshold= 0.7

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 209.676
I solved model name = row_knapsack_problem for iteration i =  9 with obj value: 209.67555555555555 KP time = 0.7268539960496128 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01477 - (Local CPU) 0.01477 - (Global CPU) 0.74162

 Solve status: Optimal Objective value: 209.67556 nb_rows 19 nb_cols 249
----------------------------------------
----------------------------------------

        Updated data after iteration: 9 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (19, 249) and density : 0.532 and number of remaining ones : 2518
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(1, 8), (3, 8), (5, 10), (9, 8), (10, 9), (11, 9), (12, 12), (13, 12), (14, 13), (15, 11), (16, 9), (18, 17), (19, 13), (21, 16), (23, 15), (24, 12), (25, 11), (26, 12), (27, 16), (28, 8), (29, 13), (31, 13), (32, 12), (34, 12), (36, 11), (37, 8), (38, 13), (41, 11), (44, 10), (47, 12), (50, 9), (55, 9), (58, 8), (61, 10), (62, 12), (63, 11), (70, 11), (72, 9), (74, 9), (76, 6), (77, 7), (78, 6), (79, 10), (80, 16), (81, 8), (83, 9), (93, 7), (95, 9), (97, 8), (100, 8), (104, 8), (106, 8), (109, 7), (110, 10), (113, 8), (118, 12), (119, 11), (121, 9), (123, 11), (124, 12), (132, 9), (134, 8), (136, 12), (137, 6), (139, 16), (141, 11), (143, 9), (144, 11), (146, 10), (147, 8), (148, 12), (149, 13), (150, 8), (155, 9), (158, 10), (160, 9), (163, 9), (164, 8), (165, 12), (166, 8), (167, 7), (168, 11), (171, 7), (173, 7), (174, 11), (176, 7), (177, 9), (178, 9), (180, 12), (181, 12), (182, 7), (183, 12), (184, 11), (185, 8), (186, 8), (187, 8), (188, 10), (190, 8), (194, 8), (195, 9), (196, 11), (197, 8), (199, 7), (200, 8), (201, 7), (208, 9), (212, 7), (213, 7), (216, 19), (217, 8), (219, 12), (220, 8), (223, 7), (225, 9), (227, 7), (229, 9), (232, 11), (234, 8), (235, 7), (236, 12), (237, 9), (238, 11), (240, 6), (241, 9), (243, 12), (245, 10), (246, 8), (248, 13), (251, 9), (253, 6), (256, 7), (257, 15), (260, 12), (261, 11), (265, 11), (267, 11), (268, 7), (273, 6), (277, 8), (281, 8), (286, 8), (287, 10), (289, 10), (290, 8), (292, 12), (297, 6), (298, 8), (301, 8), (302, 7), (304, 13), (305, 7), (306, 10), (310, 16), (311, 17), (312, 8), (313, 9), (316, 11), (317, 9), (318, 6), (320, 13), (321, 14), (322, 15), (323, 9), (324, 13), (325, 9), (326, 7), (327, 10), (328, 11), (330, 15), (331, 10), (332, 6), (333, 13), (334, 15), (335, 9), (337, 9), (338, 9), (340, 11), (342, 7), (343, 12), (345, 13), (347, 13), (350, 12), (351, 11), (353, 13), (356, 11), (360, 15), (361, 14), (362, 16), (363, 16), (364, 17), (368, 17), (369, 15), (373, 16), (374, 11), (375, 17), (377, 15), (378, 10), (379, 15), (380, 11), (381, 7), (383, 10), (384, 7), (387, 12), (388, 7), (389, 8), (390, 9), (395, 8), (396, 9), (399, 8), (402, 10), (403, 9), (404, 10), (407, 9), (408, 7), (412, 13), (414, 15), (415, 9), (417, 9), (418, 10), (419, 10), (420, 8), (423, 8), (425, 9), (426, 7), (431, 7), (433, 8), (435, 10), (437, 8), (441, 11), (442, 11), (443, 16), (444, 7), (445, 9), (446, 9), (447, 10), (448, 9), (449, 12), (450, 11), (452, 9), (453, 11), (455, 8), (456, 10), (458, 9), (459, 8), (460, 9), (461, 9), (462, 10), (463, 10), (464, 10)]
nb_edges_0 = 2213 rho= 0.1 # of rows = 19 # of columns= 249 total_degree_0= 2213 RHS= 221.3
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  9 with obj value: 209.67555555555555 KP time = 0.7416232050163671 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01589 - (Local CPU) 0.01589 - (Global CPU) 0.75752

 Solve status: Optimal Objective value: 114.84167 nb_rows 19 nb_cols 231
----------------------------------------
----------------------------------------

        Updated data after iteration: 9 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (19, 231) and density : 0.547 and number of remaining ones : 2518
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.547 density  and density_threshold= 0.700


I am in the while loop with i= 10 density= 0.5470494417862839 and fixed_threshold= 0.7

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 181.155
I solved model name = row_knapsack_problem for iteration i =  10 with obj value: 181.1551724137931 KP time = 0.7575169550254941 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01445 - (Local CPU) 0.01445 - (Global CPU) 0.77196

 Solve status: Optimal Objective value: 181.15517 nb_rows 17 nb_cols 231
----------------------------------------
----------------------------------------

        Updated data after iteration: 10 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (17, 231) and density : 0.555 and number of remaining ones : 2179
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(1, 8), (3, 8), (5, 9), (9, 8), (10, 9), (11, 9), (12, 11), (13, 11), (14, 12), (15, 11), (16, 9), (18, 16), (19, 12), (21, 15), (23, 14), (24, 11), (25, 10), (26, 11), (27, 14), (28, 7), (29, 11), (31, 12), (32, 11), (34, 11), (36, 10), (37, 7), (38, 11), (41, 10), (44, 10), (47, 12), (50, 9), (55, 8), (58, 8), (61, 10), (62, 11), (63, 10), (70, 9), (72, 8), (74, 7), (77, 5), (79, 8), (80, 14), (81, 7), (83, 8), (93, 5), (95, 9), (97, 7), (100, 8), (104, 7), (106, 7), (109, 5), (110, 10), (113, 7), (118, 11), (119, 10), (121, 9), (123, 10), (124, 11), (132, 8), (134, 8), (136, 11), (139, 15), (141, 10), (143, 8), (144, 9), (146, 9), (147, 7), (148, 10), (149, 11), (150, 7), (155, 8), (158, 9), (160, 8), (163, 9), (164, 8), (165, 12), (166, 8), (167, 6), (168, 11), (171, 5), (173, 7), (174, 10), (176, 6), (177, 9), (178, 9), (180, 12), (181, 12), (182, 7), (183, 11), (184, 11), (185, 7), (186, 7), (187, 7), (188, 9), (190, 8), (194, 7), (195, 9), (196, 10), (197, 8), (199, 7), (200, 8), (201, 6), (208, 7), (212, 6), (213, 6), (216, 17), (217, 7), (219, 12), (220, 7), (223, 6), (225, 9), (227, 7), (229, 9), (232, 10), (234, 7), (235, 7), (236, 11), (237, 8), (238, 10), (241, 8), (243, 11), (245, 9), (246, 7), (248, 11), (251, 7), (257, 13), (260, 11), (261, 9), (265, 10), (267, 9), (268, 7), (277, 8), (281, 6), (286, 7), (287, 10), (289, 9), (290, 7), (292, 10), (298, 7), (301, 7), (302, 7), (304, 11), (305, 6), (306, 9), (310, 14), (311, 15), (312, 7), (313, 8), (316, 10), (317, 8), (320, 11), (321, 12), (322, 13), (323, 8), (324, 11), (325, 8), (326, 6), (327, 9), (328, 10), (330, 13), (331, 9), (333, 12), (334, 13), (335, 8), (337, 8), (338, 8), (340, 10), (343, 11), (345, 12), (347, 11), (350, 11), (351, 10), (353, 11), (356, 10), (360, 13), (361, 12), (362, 14), (363, 14), (364, 15), (368, 15), (369, 13), (373, 14), (374, 10), (375, 15), (377, 14), (378, 9), (379, 13), (380, 9), (383, 9), (387, 11), (389, 8), (390, 8), (395, 7), (396, 9), (399, 8), (402, 9), (403, 7), (404, 8), (407, 8), (412, 11), (414, 13), (415, 8), (417, 8), (418, 8), (419, 9), (420, 7), (423, 7), (425, 9), (433, 7), (435, 8), (437, 7), (441, 9), (442, 11), (443, 14), (445, 9), (446, 9), (447, 10), (448, 9), (449, 10), (450, 11), (452, 9), (453, 10), (455, 8), (456, 10), (458, 9), (459, 8), (460, 9), (461, 9), (462, 10), (463, 10), (464, 10)]
nb_edges_0 = 1748 rho= 0.1 # of rows = 17 # of columns= 231 total_degree_0= 1748 RHS= 174.8
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  10 with obj value: 181.1551724137931 KP time = 0.771964289015159 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01671 - (Local CPU) 0.01671 - (Global CPU) 0.78867

 Solve status: Optimal Objective value: 93.46000 nb_rows 17 nb_cols 215
----------------------------------------
----------------------------------------

        Updated data after iteration: 10 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (17, 215) and density : 0.570 and number of remaining ones : 2179
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.570 density  and density_threshold= 0.700


I am in the while loop with i= 11 density= 0.5701778385772914 and fixed_threshold= 0.7

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 162.533
I solved model name = row_knapsack_problem for iteration i =  11 with obj value: 162.53333333333333 KP time = 0.7886698299553245 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01504 - (Local CPU) 0.01505 - (Global CPU) 0.80372

 Solve status: Optimal Objective value: 162.53333 nb_rows 15 nb_cols 215
----------------------------------------
----------------------------------------

        Updated data after iteration: 11 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (15, 215) and density : 0.578 and number of remaining ones : 1865
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(1, 7), (3, 7), (5, 8), (9, 8), (10, 8), (11, 8), (12, 9), (13, 10), (14, 11), (15, 9), (16, 8), (18, 14), (19, 10), (21, 13), (23, 12), (24, 9), (25, 8), (26, 9), (27, 12), (28, 7), (29, 9), (31, 11), (32, 10), (34, 10), (36, 9), (38, 10), (41, 8), (44, 8), (47, 11), (50, 8), (55, 7), (58, 6), (61, 9), (62, 10), (63, 8), (70, 7), (72, 7), (74, 7), (79, 6), (80, 13), (81, 6), (83, 7), (95, 7), (97, 7), (100, 7), (104, 6), (106, 7), (110, 10), (113, 7), (118, 11), (119, 9), (121, 8), (123, 9), (124, 9), (132, 7), (134, 6), (136, 10), (139, 14), (141, 9), (143, 7), (144, 9), (146, 9), (147, 7), (148, 10), (149, 11), (150, 6), (155, 8), (158, 8), (160, 8), (163, 8), (164, 7), (165, 11), (166, 8), (168, 10), (173, 6), (174, 9), (177, 8), (178, 9), (180, 10), (181, 11), (182, 7), (183, 10), (184, 10), (185, 7), (186, 5), (187, 7), (188, 9), (190, 7), (194, 7), (195, 7), (196, 10), (197, 8), (199, 7), (200, 7), (208, 7), (216, 15), (217, 6), (219, 10), (220, 6), (225, 8), (227, 6), (229, 7), (232, 9), (234, 6), (235, 7), (236, 10), (237, 7), (238, 9), (241, 8), (243, 10), (245, 9), (246, 7), (248, 10), (251, 6), (257, 11), (260, 10), (261, 8), (265, 8), (267, 9), (268, 5), (277, 8), (286, 6), (287, 10), (289, 7), (290, 7), (292, 9), (298, 7), (301, 6), (302, 7), (304, 10), (306, 8), (310, 12), (311, 14), (312, 6), (313, 8), (316, 9), (317, 7), (320, 10), (321, 11), (322, 12), (323, 7), (324, 10), (325, 7), (327, 8), (328, 8), (330, 12), (331, 8), (333, 11), (334, 12), (335, 6), (337, 7), (338, 7), (340, 9), (343, 10), (345, 11), (347, 10), (350, 10), (351, 8), (353, 10), (356, 9), (360, 12), (361, 11), (362, 13), (363, 13), (364, 14), (368, 13), (369, 12), (373, 13), (374, 9), (375, 14), (377, 12), (378, 8), (379, 12), (380, 8), (383, 8), (387, 10), (389, 6), (390, 7), (396, 9), (399, 7), (402, 7), (404, 6), (407, 7), (412, 9), (414, 11), (415, 7), (417, 7), (418, 6), (419, 8), (420, 7), (423, 6), (425, 8), (433, 6), (435, 8), (437, 7), (441, 8), (442, 10), (443, 13), (445, 8), (446, 8), (447, 8), (448, 8), (449, 9), (450, 9), (452, 8), (453, 8), (455, 7), (456, 9), (458, 8), (459, 7), (460, 8), (461, 8), (462, 9), (463, 9), (464, 9)]
nb_edges_0 = 1360 rho= 0.1 # of rows = 15 # of columns= 215 total_degree_0= 1360 RHS= 136.0
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  11 with obj value: 162.53333333333333 KP time = 0.8037152049364522 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01602 - (Local CPU) 0.01602 - (Global CPU) 0.81973

 Solve status: Optimal Objective value: 87.33333 nb_rows 15 nb_cols 200
----------------------------------------
----------------------------------------

        Updated data after iteration: 11 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (15, 200) and density : 0.592 and number of remaining ones : 1865
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.592 density  and density_threshold= 0.700


I am in the while loop with i= 12 density= 0.5923333333333334 and fixed_threshold= 0.7

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 143.570
I solved model name = row_knapsack_problem for iteration i =  12 with obj value: 143.5695652173913 KP time = 0.8197312469128519 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01438 - (Local CPU) 0.01438 - (Global CPU) 0.83411

 Solve status: Optimal Objective value: 143.56957 nb_rows 13 nb_cols 200
----------------------------------------
----------------------------------------

        Updated data after iteration: 12 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (13, 200) and density : 0.600 and number of remaining ones : 1561
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(1, 6), (3, 6), (5, 7), (9, 7), (10, 7), (11, 7), (12, 8), (13, 8), (14, 9), (15, 8), (16, 7), (18, 12), (19, 8), (21, 11), (23, 10), (24, 8), (25, 7), (26, 8), (27, 10), (28, 6), (29, 8), (31, 9), (32, 9), (34, 8), (36, 8), (38, 8), (41, 8), (44, 8), (47, 10), (50, 7), (55, 7), (61, 8), (62, 9), (63, 8), (70, 7), (72, 7), (74, 6), (79, 5), (80, 12), (81, 6), (83, 7), (95, 6), (97, 6), (100, 5), (104, 5), (106, 5), (110, 9), (113, 7), (118, 10), (119, 8), (121, 8), (123, 7), (124, 9), (132, 7), (136, 8), (139, 12), (141, 7), (143, 7), (144, 7), (146, 7), (147, 7), (148, 8), (149, 9), (150, 6), (155, 7), (158, 7), (160, 7), (163, 8), (164, 6), (165, 9), (166, 7), (168, 8), (173, 6), (174, 7), (177, 8), (178, 7), (180, 8), (181, 9), (182, 6), (183, 8), (184, 8), (185, 6), (187, 6), (188, 8), (190, 6), (194, 6), (195, 6), (196, 9), (197, 7), (199, 6), (200, 7), (208, 6), (216, 13), (217, 6), (219, 8), (220, 6), (225, 6), (227, 5), (229, 6), (232, 8), (235, 6), (236, 8), (237, 6), (238, 8), (241, 6), (243, 9), (245, 8), (246, 6), (248, 9), (257, 10), (260, 10), (261, 7), (265, 8), (267, 8), (277, 7), (287, 10), (289, 6), (290, 6), (292, 7), (298, 7), (302, 6), (304, 8), (306, 7), (310, 10), (311, 12), (313, 7), (316, 8), (317, 7), (320, 9), (321, 10), (322, 11), (323, 6), (324, 8), (325, 7), (327, 8), (328, 8), (330, 10), (331, 7), (333, 10), (334, 10), (337, 6), (338, 7), (340, 9), (343, 8), (345, 9), (347, 9), (350, 8), (351, 7), (353, 9), (356, 8), (360, 11), (361, 10), (362, 11), (363, 12), (364, 12), (368, 12), (369, 11), (373, 12), (374, 8), (375, 12), (377, 10), (378, 8), (379, 11), (380, 8), (383, 6), (387, 9), (390, 6), (396, 7), (399, 6), (402, 7), (407, 6), (412, 7), (414, 9), (415, 6), (417, 7), (419, 7), (420, 7), (425, 7), (435, 7), (437, 7), (441, 7), (442, 8), (443, 11), (445, 7), (446, 7), (447, 7), (448, 7), (449, 7), (450, 8), (452, 7), (453, 7), (455, 6), (456, 8), (458, 7), (459, 6), (460, 7), (461, 8), (462, 8), (463, 8), (464, 8)]
nb_edges_0 = 1039 rho= 0.1 # of rows = 13 # of columns= 200 total_degree_0= 1039 RHS= 103.9
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  12 with obj value: 143.5695652173913 KP time = 0.8341105389408767 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01568 - (Local CPU) 0.01568 - (Global CPU) 0.84979

 Solve status: Optimal Objective value: 79.77143 nb_rows 13 nb_cols 185
----------------------------------------
----------------------------------------

        Updated data after iteration: 12 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (13, 185) and density : 0.614 and number of remaining ones : 1561
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.614 density  and density_threshold= 0.700


I am in the while loop with i= 13 density= 0.6137214137214138 and fixed_threshold= 0.7

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 114.711
I solved model name = row_knapsack_problem for iteration i =  13 with obj value: 114.71111111111112 KP time = 0.8497915809275582 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01427 - (Local CPU) 0.01427 - (Global CPU) 0.86406

 Solve status: Optimal Objective value: 114.71111 nb_rows 11 nb_cols 185
----------------------------------------
----------------------------------------

        Updated data after iteration: 13 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (11, 185) and density : 0.624 and number of remaining ones : 1270
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(1, 6), (5, 6), (9, 6), (10, 6), (11, 6), (12, 7), (13, 7), (14, 8), (15, 7), (16, 6), (18, 10), (19, 6), (21, 10), (23, 9), (24, 7), (25, 6), (26, 7), (27, 9), (28, 5), (29, 6), (31, 9), (32, 8), (34, 6), (36, 6), (38, 7), (41, 6), (44, 6), (47, 8), (50, 6), (55, 7), (61, 6), (62, 7), (63, 7), (70, 6), (72, 6), (74, 5), (80, 10), (81, 5), (83, 6), (95, 6), (110, 8), (113, 7), (118, 10), (119, 7), (121, 6), (123, 7), (124, 8), (132, 6), (136, 7), (139, 10), (141, 6), (143, 5), (144, 6), (146, 7), (147, 6), (148, 7), (149, 9), (155, 6), (158, 6), (160, 6), (163, 6), (164, 5), (165, 7), (166, 7), (168, 8), (173, 5), (174, 7), (177, 7), (178, 6), (180, 7), (181, 8), (182, 6), (183, 8), (184, 7), (185, 6), (187, 6), (188, 6), (196, 8), (197, 5), (199, 5), (200, 6), (208, 5), (216, 11), (217, 6), (219, 7), (220, 6), (225, 5), (229, 6), (232, 8), (236, 7), (238, 7), (243, 8), (245, 6), (246, 4), (248, 7), (257, 9), (260, 8), (261, 6), (265, 8), (267, 7), (277, 5), (287, 10), (289, 5), (290, 6), (292, 5), (298, 5), (304, 6), (306, 6), (310, 8), (311, 11), (313, 6), (316, 7), (317, 5), (320, 8), (321, 8), (322, 9), (323, 6), (324, 7), (325, 6), (327, 7), (328, 7), (330, 9), (331, 6), (333, 8), (334, 9), (337, 5), (338, 6), (340, 7), (343, 7), (345, 7), (347, 8), (350, 7), (351, 6), (353, 8), (356, 7), (360, 9), (361, 9), (362, 10), (363, 10), (364, 10), (368, 10), (369, 9), (373, 10), (374, 7), (375, 10), (377, 9), (378, 7), (379, 9), (380, 6), (383, 4), (387, 8), (390, 5), (396, 6), (399, 6), (402, 6), (407, 5), (412, 6), (414, 8), (415, 5), (417, 7), (419, 5), (420, 5), (425, 7), (435, 6), (437, 6), (441, 6), (442, 7), (443, 9), (445, 6), (446, 6), (447, 6), (448, 6), (449, 6), (450, 7), (452, 6), (453, 6), (455, 5), (456, 7), (458, 6), (459, 5), (460, 6), (461, 7), (462, 6), (463, 7), (464, 7)]
nb_edges_0 = 765 rho= 0.1 # of rows = 11 # of columns= 185 total_degree_0= 765 RHS= 76.5
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  13 with obj value: 114.71111111111112 KP time = 0.8640613729367033 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01540 - (Local CPU) 0.01540 - (Global CPU) 0.87946

 Solve status: Optimal Objective value: 60.08333 nb_rows 11 nb_cols 172
----------------------------------------
----------------------------------------

        Updated data after iteration: 13 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (11, 172) and density : 0.638 and number of remaining ones : 1270
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.638 density  and density_threshold= 0.700


I am in the while loop with i= 14 density= 0.6379492600422833 and fixed_threshold= 0.7

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 104.765
I solved model name = row_knapsack_problem for iteration i =  14 with obj value: 104.76470588235294 KP time = 0.8794565389398485 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01414 - (Local CPU) 0.01414 - (Global CPU) 0.89360

 Solve status: Optimal Objective value: 104.76471 nb_rows 9 nb_cols 172
----------------------------------------
----------------------------------------

        Updated data after iteration: 14 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (9, 172) and density : 0.645 and number of remaining ones : 999
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(1, 4), (5, 4), (9, 4), (10, 4), (11, 4), (12, 5), (13, 5), (14, 6), (15, 5), (16, 4), (18, 8), (19, 6), (21, 8), (23, 8), (24, 7), (25, 6), (26, 7), (27, 7), (28, 3), (29, 6), (31, 8), (32, 7), (34, 6), (36, 6), (38, 7), (41, 5), (44, 5), (47, 6), (50, 5), (55, 6), (61, 5), (62, 6), (63, 6), (70, 5), (72, 5), (80, 8), (81, 4), (83, 4), (95, 5), (110, 7), (113, 5), (118, 9), (119, 6), (121, 5), (123, 6), (124, 7), (132, 5), (136, 6), (139, 8), (141, 5), (143, 4), (144, 5), (146, 6), (147, 5), (148, 5), (149, 7), (155, 5), (158, 5), (160, 4), (163, 5), (164, 4), (165, 6), (166, 5), (168, 7), (173, 4), (174, 7), (177, 5), (178, 5), (180, 7), (181, 7), (182, 5), (183, 8), (184, 6), (185, 6), (187, 6), (188, 5), (196, 7), (197, 4), (199, 4), (200, 5), (208, 4), (216, 9), (217, 5), (219, 7), (220, 4), (225, 4), (229, 6), (232, 8), (236, 7), (238, 6), (243, 6), (245, 6), (248, 6), (257, 8), (260, 6), (261, 4), (265, 8), (267, 7), (277, 4), (287, 8), (289, 4), (290, 5), (292, 4), (304, 4), (306, 4), (310, 8), (311, 9), (313, 6), (316, 7), (320, 7), (321, 7), (322, 7), (323, 4), (324, 6), (325, 5), (327, 6), (328, 6), (330, 8), (331, 6), (333, 7), (334, 8), (338, 5), (340, 6), (343, 6), (345, 6), (347, 7), (350, 6), (351, 6), (353, 7), (356, 6), (360, 8), (361, 8), (362, 8), (363, 8), (364, 9), (368, 8), (369, 8), (373, 8), (374, 6), (375, 8), (377, 7), (378, 6), (379, 7), (380, 4), (387, 7), (396, 4), (399, 4), (402, 5), (412, 5), (414, 7), (417, 7), (425, 6), (435, 6), (437, 5), (441, 4), (442, 5), (443, 7), (445, 4), (446, 4), (447, 4), (448, 4), (449, 4), (450, 5), (452, 4), (453, 4), (456, 5), (458, 4), (460, 4), (461, 5), (462, 4), (463, 5), (464, 5)]
nb_edges_0 = 549 rho= 0.1 # of rows = 9 # of columns= 172 total_degree_0= 549 RHS= 54.900000000000006
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  14 with obj value: 104.76470588235294 KP time = 0.8935953299514949 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01542 - (Local CPU) 0.01542 - (Global CPU) 0.90901

 Solve status: Optimal Objective value: 42.12000 nb_rows 9 nb_cols 161
----------------------------------------
----------------------------------------

        Updated data after iteration: 14 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (9, 161) and density : 0.660 and number of remaining ones : 999
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.660 density  and density_threshold= 0.700


I am in the while loop with i= 15 density= 0.6597653554175293 and fixed_threshold= 0.7

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 85.231
I solved model name = row_knapsack_problem for iteration i =  15 with obj value: 85.23050847457627 KP time = 0.9090121639892459 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01423 - (Local CPU) 0.01424 - (Global CPU) 0.92325

 Solve status: Optimal Objective value: 85.23051 nb_rows 8 nb_cols 161
----------------------------------------
----------------------------------------

        Updated data after iteration: 15 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (8, 161) and density : 0.663 and number of remaining ones : 854
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(1, 4), (5, 4), (9, 4), (10, 4), (11, 4), (12, 5), (13, 4), (14, 5), (15, 5), (16, 4), (18, 7), (19, 6), (21, 7), (23, 7), (24, 7), (25, 6), (26, 7), (27, 6), (29, 6), (31, 7), (32, 7), (34, 5), (36, 6), (38, 6), (41, 5), (44, 5), (47, 5), (50, 4), (55, 6), (61, 5), (62, 5), (63, 6), (70, 5), (72, 5), (80, 7), (81, 4), (83, 4), (95, 5), (110, 6), (113, 5), (118, 8), (119, 6), (121, 5), (123, 5), (124, 7), (132, 4), (136, 6), (139, 7), (141, 4), (143, 4), (144, 4), (146, 6), (147, 4), (148, 4), (149, 6), (155, 4), (158, 4), (160, 4), (163, 4), (164, 3), (165, 5), (166, 4), (168, 6), (174, 6), (177, 5), (178, 4), (180, 6), (181, 6), (182, 4), (183, 7), (184, 5), (185, 5), (187, 5), (188, 4), (196, 6), (197, 3), (199, 4), (200, 4), (208, 4), (216, 8), (217, 5), (219, 6), (220, 4), (225, 4), (229, 6), (232, 7), (236, 6), (238, 6), (243, 5), (245, 6), (248, 5), (257, 7), (260, 6), (261, 3), (265, 8), (267, 6), (277, 3), (287, 7), (290, 4), (310, 7), (311, 8), (313, 5), (316, 6), (320, 6), (321, 6), (322, 6), (324, 5), (325, 4), (327, 5), (328, 5), (330, 7), (331, 5), (333, 6), (334, 7), (338, 4), (340, 5), (343, 5), (345, 5), (347, 6), (350, 5), (351, 5), (353, 6), (356, 5), (360, 7), (361, 7), (362, 7), (363, 7), (364, 8), (368, 7), (369, 7), (373, 7), (374, 5), (375, 7), (377, 6), (378, 5), (379, 6), (387, 6), (402, 4), (412, 4), (414, 6), (417, 6), (425, 5), (435, 5), (437, 4), (442, 4), (443, 7), (445, 4), (446, 4), (447, 4), (448, 4), (449, 4), (450, 5), (452, 4), (453, 4), (456, 5), (458, 4), (460, 4), (461, 4), (462, 4), (463, 5), (464, 5)]
nb_edges_0 = 434 rho= 0.1 # of rows = 8 # of columns= 161 total_degree_0= 434 RHS= 43.400000000000006
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  15 with obj value: 85.23050847457627 KP time = 0.9232487468980253 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01546 - (Local CPU) 0.01546 - (Global CPU) 0.93871

 Solve status: Optimal Objective value: 35.40000 nb_rows 8 nb_cols 151
----------------------------------------
----------------------------------------

        Updated data after iteration: 15 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (8, 151) and density : 0.677 and number of remaining ones : 854
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.677 density  and density_threshold= 0.700


I am in the while loop with i= 16 density= 0.6771523178807947 and fixed_threshold= 0.7

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 68.073
I solved model name = row_knapsack_problem for iteration i =  16 with obj value: 68.07272727272728 KP time = 0.9387107888469473 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01393 - (Local CPU) 0.01394 - (Global CPU) 0.95265

 Solve status: Optimal Objective value: 68.07273 nb_rows 7 nb_cols 151
----------------------------------------
----------------------------------------

        Updated data after iteration: 16 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (7, 151) and density : 0.683 and number of remaining ones : 722
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(1, 3), (5, 3), (9, 4), (10, 3), (11, 3), (12, 4), (13, 4), (14, 4), (15, 4), (16, 3), (18, 6), (19, 5), (21, 7), (23, 6), (24, 7), (25, 6), (26, 7), (27, 6), (29, 6), (31, 7), (32, 7), (34, 5), (36, 6), (38, 6), (41, 5), (44, 5), (47, 4), (50, 3), (55, 6), (61, 4), (62, 5), (63, 6), (70, 5), (72, 4), (80, 6), (81, 4), (83, 4), (95, 5), (110, 6), (113, 5), (118, 7), (119, 5), (121, 5), (123, 5), (124, 6), (132, 4), (136, 5), (139, 6), (141, 3), (143, 4), (144, 3), (146, 5), (147, 4), (148, 3), (149, 5), (155, 3), (158, 3), (160, 3), (163, 4), (165, 4), (166, 3), (168, 5), (174, 5), (177, 5), (178, 3), (180, 5), (181, 5), (182, 4), (183, 6), (184, 4), (185, 4), (187, 4), (188, 3), (196, 6), (199, 3), (200, 4), (208, 3), (216, 7), (217, 4), (219, 5), (220, 4), (229, 6), (232, 6), (236, 5), (238, 5), (243, 5), (245, 5), (248, 5), (257, 6), (260, 6), (265, 7), (267, 5), (287, 6), (310, 6), (311, 7), (313, 5), (316, 6), (320, 5), (321, 5), (322, 5), (324, 5), (327, 5), (328, 5), (330, 6), (331, 5), (333, 6), (334, 6), (340, 5), (343, 5), (345, 5), (347, 6), (350, 4), (351, 5), (353, 6), (356, 4), (360, 6), (361, 6), (362, 6), (363, 6), (364, 7), (368, 6), (369, 6), (373, 6), (374, 4), (375, 6), (377, 5), (378, 4), (379, 5), (387, 5), (402, 3), (412, 4), (414, 5), (417, 5), (425, 5), (435, 4), (437, 4), (442, 3), (443, 6), (445, 3), (446, 3), (447, 3), (448, 3), (449, 3), (450, 4), (456, 4), (458, 3), (460, 3), (461, 3), (462, 3), (463, 4), (464, 4)]
nb_edges_0 = 335 rho= 0.1 # of rows = 7 # of columns= 151 total_degree_0= 335 RHS= 33.5
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  16 with obj value: 68.07272727272728 KP time = 0.9526460798224434 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01504 - (Local CPU) 0.01504 - (Global CPU) 0.96768

 Solve status: Optimal Objective value: 25.12500 nb_rows 7 nb_cols 142
----------------------------------------
----------------------------------------

        Updated data after iteration: 16 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (7, 142) and density : 0.699 and number of remaining ones : 722
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.699 density  and density_threshold= 0.700


I am in the while loop with i= 17 density= 0.6991951710261569 and fixed_threshold= 0.7

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 56.749
I solved model name = row_knapsack_problem for iteration i =  17 with obj value: 56.748979591836736 KP time = 0.967682454851456 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01510 - (Local CPU) 0.01510 - (Global CPU) 0.98279

 Solve status: Optimal Objective value: 56.74898 nb_rows 6 nb_cols 142
----------------------------------------
----------------------------------------

        Updated data after iteration: 17 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (6, 142) and density : 0.707 and number of remaining ones : 602
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(1, 2), (5, 2), (9, 3), (10, 2), (11, 2), (12, 3), (13, 3), (14, 4), (15, 3), (18, 5), (19, 4), (21, 6), (23, 5), (24, 6), (25, 5), (26, 6), (27, 5), (29, 5), (31, 6), (32, 6), (34, 4), (36, 5), (38, 5), (41, 5), (44, 5), (47, 4), (50, 2), (55, 5), (61, 4), (62, 5), (63, 6), (70, 4), (72, 4), (80, 5), (81, 4), (83, 4), (95, 4), (110, 5), (113, 5), (118, 6), (119, 4), (121, 5), (123, 5), (124, 6), (132, 4), (136, 5), (139, 6), (143, 4), (144, 2), (146, 4), (147, 4), (149, 4), (155, 2), (158, 2), (160, 2), (163, 3), (165, 3), (166, 2), (168, 4), (174, 4), (177, 5), (180, 4), (181, 4), (182, 4), (183, 5), (184, 3), (185, 3), (187, 3), (188, 2), (196, 5), (200, 3), (216, 6), (217, 4), (219, 4), (220, 4), (229, 5), (232, 5), (236, 4), (238, 5), (243, 4), (245, 5), (248, 4), (257, 5), (260, 5), (265, 6), (267, 5), (287, 5), (310, 6), (311, 6), (313, 5), (316, 5), (320, 5), (321, 5), (322, 5), (324, 5), (327, 4), (328, 4), (330, 6), (331, 5), (333, 5), (334, 6), (340, 4), (343, 5), (345, 5), (347, 6), (350, 4), (351, 5), (353, 6), (356, 4), (360, 5), (361, 5), (362, 5), (363, 5), (364, 6), (368, 5), (369, 5), (373, 5), (374, 4), (375, 5), (377, 5), (378, 4), (379, 5), (387, 4), (402, 3), (412, 4), (414, 4), (417, 4), (425, 4), (435, 3), (437, 4), (442, 2), (443, 5), (445, 2), (448, 2), (450, 3), (456, 3), (458, 2), (460, 2), (461, 2), (462, 2), (463, 3), (464, 3)]
nb_edges_0 = 250 rho= 0.1 # of rows = 6 # of columns= 142 total_degree_0= 250 RHS= 25.0
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  17 with obj value: 56.748979591836736 KP time = 0.9827871217858046 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01529 - (Local CPU) 0.01529 - (Global CPU) 0.99808

 Solve status: Optimal Objective value: 12.50000 nb_rows 6 nb_cols 135
----------------------------------------
----------------------------------------

        Updated data after iteration: 17 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (6, 135) and density : 0.726 and number of remaining ones : 602
        

----------------------------------------
----------------------------------------

----------------------------------------

            End of greedy approaches. Exit while loop. I did: 17 iterations
            Density : 0.726 > 0.700
            It took me : 0.998 time
            Found matrix of size : (6, 135) and density : 0.726
            
----------------------------------------

 Calling exact approaches for QB clique discovery with delta = 0.0
----------------------------------------

----------------------------------------

I am in warm_exact before calling max_e_h $$$$$$$$$$$$$$$$$$

----------------------------------------------------------------------
Model status: Optimal
----------------------------------------------------------------------
Computed by max_e_h Objective Value : 744.000 
Model status: Optimal
Solution saved to Experiments/prob_8/results_h_1_M_2.csv

----------------------------------------------------------------------
Stats
 Model solved : max_e_h  Local Time:  - (real) 0.03963 - (Local CPU) 0.03964 - (Global CPU) 0.03964

 Solve status: Optimal Objective value: 744.00000 nb_rows 4 nb_cols 66
----------------------------------------

----------------------------------------
Results from updating data after solving model = max_e_h  delta =   0.0
Number of Remaining number  Rows  : 4
Number of Remaining number Columns : 66
Remaining  number Edges_0 P: 0 Remaining  number Edges_1 : 264 Density : 1.0 current obj value 744.0
----------------------------------------

----------------------------------------

Exit from the heuristic (or exact  approach)  max_e_c  with delta= 0.0 Found matrix with rows_res of lenght = 4  and cols_res of lenght = 66
----------------------------------------

        Exit from the exact approach: max_e_c for matrix 2
        with delta =  0.0
        Found matrix of size : (4, 66)
        and density : 1.000
        and # of ones : 264
        and Heuristic QBC time   : 0.03964
        and Global QBC  time  : 0.03964
        
 Remaining Rows  : [17, 24, 36, 40]
 Remaining  Cols  : [110, 113, 118, 119, 123, 124, 132, 136, 139, 143, 177, 21, 216, 220, 229, 23, 232, 236, 238, 24, 245, 248, 25, 26, 265, 27, 29, 31, 310, 311, 313, 316, 32, 320, 321, 322, 327, 328, 330, 331, 333, 334, 340, 347, 353, 36, 360, 361, 362, 363, 364, 368, 369, 373, 375, 379, 38, 41, 44, 47, 55, 62, 63, 80, 81, 83]

----------------------------------------------------------------------
 
    End of computations for matrix 2 in  data/prob_8.csv at level 1 and debug  2
    With  model: max_e_c and quasi-biclique error: 0.0 
    Size of Remaining matrix : (4,66), with  density : 1.0 and number of ones: 264
    Global Time (in sec): 1.038
    Total Time in QBC approaches: 0.040
    Time in greedy approach: 0.998,  size of matrix found by greedy : (6,135) 
    With density : 0.726 and # ones : 588 
    Time in heuristic only : 0.040 
    Time in warm start only : 0.000
    Number of iterations in greedy approach: 17
    Percentage of greedy approach run time in global run time : 96.18% 
    Percentage of heuristic run time in QBC run time : 100.00%
    With zero deletion rate (rho): 0.1 and threshold: 0.7
    
----------------------------------------------------------------------

dec_conq= 1

 Level 0, Matrix 4:
Size Rows: 47
Size Cols: 466

 Level 0 Matrix  5:
Size Rows: 51
Size Cols: 400

Task with matrix 4 with size (47,466) and density 0.6625878915167565 and number of ones 14512  and number of zeros 7390 has been added to the queue.

 Return from 4 with winning node = 4

calling decrease_and_conquer for node 5

Task with matrix 5 with size (51,400) and density 0.6904901960784313 and number of ones 14086  and number of zeros 6314 has been added to the queue.

return in decrease_and_conquer from 5 with winning node = 5

return in decrease_and_conquer from 2 with winning node = 4

 Return from 2 with winning node = 4

calling decrease_and_conquer for node 3

----------------------------------------------------------------------
***Stats Current Input for matrix 3 in  data/prob_8.csv at level 1 and with model:  max_e_c***
Size of current matrix :  64 * 436 = 27904 ; dec_conq: 1
Prev_lower_bound :  None number input zeros :  18870 ; number input ones :  9034
rho =  0.1 ; delta :  0.0
Input density : 0.324 ; density_threshold: 0.70000
----------------------------------------------------------------------
End Current  Stats
----------------------------------------------------------------------


calling greedy approaches for zero deletion, density= 0.324 density  and density_threshold= 0.700


I am in the while loop with i= 1 density= 0.32375286697247707 and fixed_threshold= 0.7

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 105.526
I solved model name = row_knapsack_problem for iteration i =  1 with obj value: 105.52622107969151 KP time = 0.46042553905863315 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01796 - (Local CPU) 0.01796 - (Global CPU) 0.47839

 Solve status: Optimal Objective value: 105.52622 nb_rows 61 nb_cols 436
----------------------------------------
----------------------------------------

        Updated data after iteration: 1 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (61, 436) and density : 0.335 and number of remaining ones : 8910
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(0, 3), (1, 15), (2, 5), (3, 13), (4, 5), (5, 17), (6, 8), (7, 10), (8, 15), (9, 15), (10, 20), (11, 18), (12, 19), (13, 21), (14, 21), (15, 22), (16, 16), (17, 1), (18, 51), (19, 39), (20, 7), (21, 48), (22, 6), (23, 47), (24, 36), (25, 37), (26, 36), (27, 49), (28, 23), (29, 43), (30, 13), (31, 41), (32, 43), (33, 7), (34, 39), (35, 11), (36, 36), (37, 30), (38, 38), (39, 19), (40, 14), (41, 35), (42, 14), (43, 14), (44, 21), (45, 13), (46, 10), (47, 40), (48, 12), (49, 26), (50, 33), (51, 10), (52, 27), (53, 15), (54, 17), (55, 17), (56, 13), (57, 28), (58, 13), (59, 20), (60, 17), (61, 27), (62, 27), (63, 23), (64, 18), (65, 9), (66, 10), (67, 12), (68, 15), (69, 10), (70, 31), (71, 13), (72, 18), (73, 16), (74, 27), (75, 13), (76, 25), (77, 17), (78, 31), (79, 24), (80, 39), (81, 23), (82, 20), (83, 31), (84, 31), (85, 12), (86, 11), (87, 10), (88, 10), (89, 12), (90, 12), (91, 14), (92, 32), (93, 30), (94, 21), (95, 23), (96, 20), (97, 17), (98, 26), (99, 16), (100, 11), (101, 16), (102, 11), (103, 12), (104, 15), (105, 10), (106, 18), (107, 9), (108, 19), (109, 15), (110, 24), (111, 11), (112, 17), (113, 29), (114, 11), (115, 16), (116, 12), (117, 12), (118, 20), (119, 36), (120, 20), (121, 22), (122, 24), (123, 26), (124, 24), (125, 17), (126, 14), (127, 16), (128, 13), (129, 26), (130, 17), (131, 15), (132, 17), (133, 8), (134, 16), (135, 13), (136, 27), (137, 29), (138, 14), (139, 47), (140, 17), (141, 39), (142, 13), (143, 22), (144, 30), (145, 12), (146, 30), (147, 14), (148, 41), (149, 39), (150, 13), (151, 14), (152, 14), (153, 8), (154, 19), (155, 26), (156, 11), (157, 15), (158, 30), (159, 19), (160, 28), (161, 21), (162, 16), (163, 20), (164, 22), (165, 36), (166, 23), (167, 22), (168, 28), (169, 19), (170, 11), (171, 21), (172, 20), (173, 25), (174, 27), (175, 11), (176, 16), (177, 22), (178, 27), (179, 17), (180, 31), (181, 29), (182, 27), (183, 32), (184, 34), (185, 26), (186, 18), (187, 22), (188, 30), (189, 13), (190, 25), (191, 16), (192, 19), (193, 15), (194, 19), (195, 22), (196, 22), (197, 21), (198, 12), (199, 24), (200, 18), (201, 21), (202, 15), (203, 15), (204, 9), (205, 10), (206, 9), (207, 21), (208, 30), (209, 18), (210, 16), (211, 13), (212, 18), (213, 27), (214, 16), (215, 19), (217, 29), (218, 8), (219, 21), (220, 31), (221, 9), (222, 28), (223, 25), (224, 12), (225, 25), (226, 18), (227, 16), (228, 13), (229, 15), (230, 23), (231, 12), (232, 20), (233, 16), (234, 25), (235, 24), (236, 30), (237, 13), (238, 37), (239, 26), (240, 18), (241, 26), (242, 7), (244, 14), (245, 14), (247, 12), (249, 7), (251, 17), (252, 11), (253, 30), (254, 7), (255, 23), (258, 11), (259, 10), (260, 18), (262, 9), (263, 28), (265, 16), (266, 14), (267, 19), (268, 16), (269, 26), (270, 14), (271, 10), (272, 7), (273, 28), (274, 11), (275, 10), (276, 13), (278, 15), (279, 13), (280, 35), (281, 18), (282, 15), (283, 12), (284, 16), (285, 10), (286, 39), (287, 39), (288, 29), (289, 19), (291, 10), (292, 38), (293, 8), (294, 31), (295, 9), (296, 8), (297, 15), (298, 30), (299, 25), (300, 8), (302, 15), (303, 18), (304, 36), (305, 17), (307, 32), (309, 15), (313, 12), (314, 13), (315, 4), (316, 16), (317, 18), (318, 35), (319, 14), (323, 34), (325, 18), (326, 37), (327, 21), (328, 22), (329, 3), (331, 21), (332, 31), (333, 20), (334, 33), (335, 19), (336, 17), (337, 23), (338, 22), (339, 13), (340, 31), (341, 29), (342, 22), (343, 29), (344, 11), (345, 33), (346, 13), (347, 31), (348, 12), (349, 10), (350, 29), (351, 29), (352, 24), (353, 43), (354, 23), (355, 20), (356, 29), (357, 18), (358, 25), (359, 18), (360, 45), (361, 43), (365, 9), (366, 14), (367, 10), (370, 11), (371, 13), (372, 12), (375, 50), (376, 14), (377, 39), (378, 23), (379, 44), (380, 32), (381, 28), (382, 14), (383, 34), (384, 24), (385, 19), (386, 11), (387, 33), (388, 14), (389, 22), (390, 23), (391, 13), (392, 13), (393, 14), (394, 23), (395, 24), (396, 21), (397, 11), (398, 25), (399, 21), (400, 20), (401, 12), (402, 39), (403, 38), (404, 37), (405, 27), (406, 6), (407, 39), (408, 14), (409, 5), (410, 11), (411, 14), (412, 43), (413, 14), (414, 44), (415, 26), (416, 13), (417, 32), (418, 37), (419, 23), (420, 22), (421, 9), (422, 15), (423, 28), (424, 14), (425, 21), (426, 16), (427, 14), (428, 12), (429, 23), (430, 18), (431, 20), (432, 11), (433, 21), (434, 11), (435, 39), (436, 23), (437, 38), (438, 14), (440, 3), (441, 18), (442, 19), (443, 37), (444, 17), (445, 17), (446, 16), (447, 18), (448, 16), (449, 23), (450, 22), (451, 5), (452, 19), (453, 24), (454, 10), (455, 15), (456, 17), (457, 7), (458, 15), (459, 12), (460, 15), (461, 18), (462, 15), (463, 22), (464, 19), (465, 13)]
nb_edges_0 = 17686 rho= 0.1 # of rows = 61 # of columns= 436 total_degree_0= 17686 RHS= 1768.6000000000001
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  1 with obj value: 105.52622107969151 KP time = 0.47838553902693093 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01835 - (Local CPU) 0.01836 - (Global CPU) 0.49674

 Solve status: Optimal Objective value: 219.29615 nb_rows 61 nb_cols 403
----------------------------------------
----------------------------------------

        Updated data after iteration: 1 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (61, 403) and density : 0.353 and number of remaining ones : 8910
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.353 density  and density_threshold= 0.700


I am in the while loop with i= 2 density= 0.353374283041126 and fixed_threshold= 0.7

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 709.544
I solved model name = row_knapsack_problem for iteration i =  2 with obj value: 709.5442028985507 KP time = 0.496741579961963 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01503 - (Local CPU) 0.01503 - (Global CPU) 0.51177

 Solve status: Optimal Objective value: 709.54420 nb_rows 55 nb_cols 403
----------------------------------------
----------------------------------------

        Updated data after iteration: 2 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (55, 403) and density : 0.358 and number of remaining ones : 7940
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(1, 15), (3, 12), (5, 16), (7, 10), (8, 14), (9, 15), (10, 18), (11, 18), (12, 19), (13, 21), (14, 21), (15, 22), (16, 16), (18, 46), (19, 36), (21, 44), (23, 42), (24, 33), (25, 34), (26, 33), (27, 44), (28, 20), (29, 40), (30, 13), (31, 36), (32, 40), (34, 36), (35, 10), (36, 33), (37, 28), (38, 34), (39, 18), (40, 12), (41, 31), (42, 13), (43, 13), (44, 19), (45, 12), (46, 9), (47, 37), (48, 11), (49, 24), (50, 31), (51, 7), (52, 26), (53, 14), (54, 16), (55, 14), (56, 12), (57, 25), (58, 12), (59, 17), (60, 15), (61, 25), (62, 25), (63, 21), (64, 17), (66, 9), (67, 11), (68, 14), (69, 10), (70, 29), (71, 10), (72, 16), (73, 15), (74, 24), (75, 11), (76, 23), (77, 17), (78, 31), (79, 23), (80, 37), (81, 19), (82, 18), (83, 28), (84, 29), (85, 11), (86, 10), (87, 10), (88, 8), (89, 10), (90, 10), (91, 13), (92, 30), (93, 29), (94, 18), (95, 21), (96, 18), (97, 17), (98, 24), (99, 12), (100, 10), (101, 15), (102, 10), (103, 10), (104, 14), (105, 9), (106, 15), (108, 17), (109, 15), (110, 22), (111, 11), (112, 16), (113, 25), (114, 11), (115, 16), (116, 10), (117, 11), (118, 20), (119, 33), (120, 18), (121, 21), (122, 22), (123, 22), (124, 22), (125, 16), (126, 11), (127, 14), (128, 12), (129, 23), (130, 15), (131, 13), (132, 16), (134, 13), (135, 11), (136, 24), (137, 27), (138, 13), (139, 43), (140, 14), (141, 36), (142, 13), (143, 20), (144, 28), (145, 11), (146, 27), (147, 13), (148, 37), (149, 36), (150, 13), (151, 13), (152, 13), (154, 17), (155, 26), (156, 9), (157, 14), (158, 28), (159, 16), (160, 26), (161, 20), (162, 13), (163, 17), (164, 20), (165, 34), (166, 22), (167, 19), (168, 28), (169, 17), (170, 9), (171, 19), (172, 15), (173, 22), (174, 26), (175, 10), (176, 14), (177, 19), (178, 26), (179, 15), (180, 29), (181, 27), (182, 25), (183, 32), (184, 31), (185, 26), (186, 16), (187, 21), (188, 28), (189, 12), (190, 24), (191, 14), (192, 17), (193, 13), (194, 17), (195, 20), (196, 21), (197, 19), (198, 8), (199, 22), (200, 16), (201, 19), (202, 13), (203, 13), (205, 10), (206, 9), (207, 20), (208, 28), (209, 15), (210, 15), (211, 11), (212, 16), (213, 25), (214, 13), (215, 17), (217, 24), (219, 19), (220, 28), (222, 25), (223, 24), (224, 11), (225, 25), (226, 17), (227, 15), (228, 10), (229, 15), (230, 21), (231, 9), (232, 20), (233, 15), (234, 23), (235, 21), (236, 29), (237, 13), (238, 34), (239, 23), (240, 17), (241, 24), (244, 12), (245, 14), (247, 9), (251, 16), (252, 11), (253, 27), (255, 20), (258, 10), (259, 10), (260, 18), (263, 25), (265, 15), (266, 12), (267, 17), (268, 15), (269, 23), (270, 13), (271, 9), (273, 25), (274, 10), (275, 7), (276, 11), (278, 14), (279, 12), (280, 30), (281, 16), (282, 15), (283, 11), (284, 15), (285, 10), (286, 34), (287, 35), (288, 24), (289, 18), (291, 10), (292, 33), (294, 27), (297, 14), (298, 26), (299, 21), (302, 14), (303, 17), (304, 32), (305, 14), (307, 28), (309, 13), (313, 12), (314, 11), (316, 14), (317, 17), (318, 30), (319, 14), (323, 29), (325, 18), (326, 31), (327, 21), (328, 21), (331, 20), (332, 27), (333, 20), (334, 31), (335, 19), (336, 13), (337, 20), (338, 22), (339, 12), (340, 28), (341, 26), (342, 21), (343, 27), (344, 11), (345, 32), (346, 11), (347, 30), (348, 11), (349, 10), (350, 28), (351, 27), (352, 21), (353, 39), (354, 20), (355, 17), (356, 27), (357, 15), (358, 22), (359, 15), (360, 41), (361, 39), (366, 12), (367, 9), (370, 10), (371, 11), (372, 10), (375, 45), (376, 12), (377, 36), (378, 21), (379, 38), (380, 28), (381, 25), (382, 11), (383, 30), (384, 20), (385, 18), (386, 9), (387, 32), (388, 14), (389, 21), (390, 21), (391, 12), (392, 13), (393, 12), (394, 20), (395, 21), (396, 19), (397, 11), (398, 22), (399, 20), (400, 18), (401, 10), (402, 33), (403, 34), (404, 33), (405, 23), (407, 34), (408, 14), (410, 10), (411, 13), (412, 39), (413, 14), (414, 40), (415, 24), (416, 12), (417, 27), (418, 34), (419, 22), (420, 19), (422, 12), (423, 26), (424, 11), (425, 20), (426, 16), (427, 12), (428, 10), (429, 21), (430, 18), (431, 20), (432, 11), (433, 17), (434, 10), (435, 35), (436, 21), (437, 33), (438, 14), (441, 18), (442, 19), (443, 35), (444, 17), (445, 16), (446, 16), (447, 18), (448, 16), (449, 23), (450, 22), (452, 19), (453, 23), (454, 9), (455, 14), (456, 16), (458, 15), (459, 12), (460, 15), (461, 18), (462, 15), (463, 22), (464, 19), (465, 13)]
nb_edges_0 = 14225 rho= 0.1 # of rows = 55 # of columns= 403 total_degree_0= 14225 RHS= 1422.5
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  2 with obj value: 709.5442028985507 KP time = 0.5117744549643248 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01725 - (Local CPU) 0.01725 - (Global CPU) 0.52903

 Solve status: Optimal Objective value: 289.22222 nb_rows 55 nb_cols 371
----------------------------------------
----------------------------------------

        Updated data after iteration: 2 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (55, 371) and density : 0.375 and number of remaining ones : 7940
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.375 density  and density_threshold= 0.700


I am in the while loop with i= 3 density= 0.3745160499877481 and fixed_threshold= 0.7

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 642.754
I solved model name = row_knapsack_problem for iteration i =  3 with obj value: 642.7542857142857 KP time = 0.529027079930529 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01497 - (Local CPU) 0.01497 - (Global CPU) 0.54400

 Solve status: Optimal Objective value: 642.75429 nb_rows 49 nb_cols 371
----------------------------------------
----------------------------------------

        Updated data after iteration: 3 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (49, 371) and density : 0.379 and number of remaining ones : 6895
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(1, 13), (3, 11), (5, 15), (8, 14), (9, 14), (10, 17), (11, 17), (12, 19), (13, 20), (14, 20), (15, 20), (16, 15), (18, 41), (19, 33), (21, 40), (23, 39), (24, 31), (25, 32), (26, 31), (27, 40), (28, 16), (29, 36), (30, 11), (31, 34), (32, 37), (34, 33), (36, 30), (37, 27), (38, 31), (39, 15), (40, 12), (41, 29), (42, 11), (43, 12), (44, 16), (45, 10), (47, 35), (48, 9), (49, 23), (50, 30), (52, 23), (53, 12), (54, 12), (55, 13), (56, 8), (57, 23), (58, 12), (59, 14), (60, 14), (61, 23), (62, 21), (63, 18), (64, 16), (67, 10), (68, 12), (70, 28), (71, 8), (72, 14), (73, 12), (74, 22), (75, 8), (76, 22), (77, 15), (78, 29), (79, 20), (80, 34), (81, 18), (82, 17), (83, 27), (84, 26), (85, 9), (87, 7), (89, 8), (91, 12), (92, 26), (93, 26), (94, 18), (95, 17), (96, 18), (97, 15), (98, 24), (99, 11), (100, 9), (101, 12), (103, 6), (104, 12), (106, 13), (108, 15), (109, 12), (110, 19), (111, 10), (112, 13), (113, 23), (114, 10), (115, 14), (117, 11), (118, 18), (119, 28), (120, 16), (121, 17), (122, 18), (123, 20), (124, 19), (125, 13), (126, 10), (127, 12), (128, 10), (129, 22), (130, 13), (131, 12), (132, 15), (134, 12), (135, 11), (136, 23), (137, 25), (138, 12), (139, 38), (140, 13), (141, 33), (142, 12), (143, 19), (144, 24), (145, 10), (146, 24), (147, 12), (148, 33), (149, 32), (150, 12), (151, 13), (152, 12), (154, 16), (155, 24), (157, 12), (158, 25), (159, 14), (160, 25), (161, 17), (162, 11), (163, 16), (164, 19), (165, 32), (166, 19), (167, 18), (168, 26), (169, 15), (171, 19), (172, 13), (173, 19), (174, 24), (176, 11), (177, 17), (178, 24), (179, 14), (180, 27), (181, 25), (182, 25), (183, 32), (184, 28), (185, 25), (186, 14), (187, 20), (188, 26), (189, 10), (190, 22), (191, 12), (192, 15), (193, 12), (194, 16), (195, 19), (196, 20), (197, 18), (199, 20), (200, 14), (201, 16), (202, 10), (203, 11), (207, 18), (208, 24), (209, 14), (210, 14), (211, 9), (212, 15), (213, 25), (214, 12), (215, 15), (217, 22), (219, 18), (220, 27), (222, 23), (223, 20), (224, 9), (225, 23), (226, 15), (227, 14), (228, 7), (229, 14), (230, 20), (232, 18), (233, 13), (234, 19), (235, 18), (236, 26), (237, 12), (238, 32), (239, 21), (240, 14), (241, 21), (244, 11), (245, 14), (251, 16), (252, 9), (253, 23), (255, 18), (259, 8), (260, 17), (263, 20), (265, 15), (266, 11), (267, 16), (268, 14), (269, 20), (270, 12), (273, 22), (276, 11), (278, 12), (279, 11), (280, 25), (281, 15), (282, 13), (283, 11), (284, 14), (286, 29), (287, 30), (288, 21), (289, 17), (292, 30), (294, 24), (297, 14), (298, 24), (299, 18), (302, 14), (303, 15), (304, 28), (305, 12), (307, 24), (309, 11), (313, 11), (314, 10), (316, 13), (317, 14), (318, 26), (319, 11), (323, 27), (325, 15), (326, 29), (327, 18), (328, 18), (331, 18), (332, 24), (333, 18), (334, 27), (335, 16), (336, 13), (337, 18), (338, 19), (339, 9), (340, 25), (341, 23), (342, 20), (343, 21), (344, 10), (345, 26), (346, 10), (347, 25), (348, 10), (349, 9), (350, 23), (351, 22), (352, 21), (353, 34), (354, 20), (355, 16), (356, 22), (357, 15), (358, 21), (359, 14), (360, 38), (361, 35), (366, 12), (370, 9), (371, 9), (375, 41), (376, 10), (377, 33), (378, 19), (379, 35), (380, 24), (381, 21), (382, 9), (383, 27), (384, 16), (385, 18), (387, 29), (388, 14), (389, 18), (390, 20), (391, 11), (392, 11), (393, 12), (394, 17), (395, 18), (396, 19), (397, 9), (398, 19), (399, 20), (400, 16), (401, 10), (402, 29), (403, 30), (404, 28), (405, 20), (407, 30), (408, 12), (411, 13), (412, 34), (413, 14), (414, 35), (415, 22), (416, 11), (417, 24), (418, 32), (419, 21), (420, 18), (422, 12), (423, 22), (424, 9), (425, 20), (426, 15), (427, 11), (428, 9), (429, 18), (430, 17), (431, 17), (432, 10), (433, 15), (435, 31), (436, 19), (437, 30), (438, 13), (441, 17), (442, 17), (443, 32), (444, 15), (445, 15), (446, 15), (447, 17), (448, 15), (449, 20), (450, 21), (452, 17), (453, 22), (455, 13), (456, 15), (458, 14), (459, 11), (460, 14), (461, 17), (462, 14), (463, 21), (464, 18), (465, 13)]
nb_edges_0 = 11284 rho= 0.1 # of rows = 49 # of columns= 371 total_degree_0= 11284 RHS= 1128.4
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  3 with obj value: 642.7542857142857 KP time = 0.5439977468922734 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01751 - (Local CPU) 0.01752 - (Global CPU) 0.56151

 Solve status: Optimal Objective value: 246.61538 nb_rows 49 nb_cols 342
----------------------------------------
----------------------------------------

        Updated data after iteration: 3 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (49, 342) and density : 0.396 and number of remaining ones : 6895
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.396 density  and density_threshold= 0.700


I am in the while loop with i= 4 density= 0.3961689939133548 and fixed_threshold= 0.7

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 537.826
I solved model name = row_knapsack_problem for iteration i =  4 with obj value: 537.8263636363636 KP time = 0.56151320587378 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01479 - (Local CPU) 0.01479 - (Global CPU) 0.57631

 Solve status: Optimal Objective value: 537.82636 nb_rows 44 nb_cols 342
----------------------------------------
----------------------------------------

        Updated data after iteration: 4 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (44, 342) and density : 0.402 and number of remaining ones : 6044
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(1, 13), (3, 11), (5, 14), (8, 13), (9, 14), (10, 17), (11, 16), (12, 19), (13, 20), (14, 20), (15, 18), (16, 15), (18, 36), (19, 28), (21, 38), (23, 37), (24, 29), (25, 30), (26, 29), (27, 38), (28, 13), (29, 32), (30, 8), (31, 31), (32, 32), (34, 29), (36, 29), (37, 25), (38, 29), (39, 12), (40, 10), (41, 26), (42, 9), (43, 9), (44, 14), (47, 33), (49, 22), (50, 27), (52, 21), (53, 12), (54, 11), (55, 13), (57, 21), (58, 11), (59, 13), (60, 12), (61, 22), (62, 18), (63, 15), (64, 14), (67, 7), (68, 9), (70, 27), (72, 12), (73, 9), (74, 21), (76, 20), (77, 14), (78, 26), (79, 16), (80, 32), (81, 15), (82, 16), (83, 26), (84, 21), (91, 12), (92, 22), (93, 23), (94, 17), (95, 16), (96, 15), (97, 13), (98, 22), (99, 10), (101, 11), (104, 11), (106, 13), (108, 13), (109, 9), (110, 18), (111, 10), (112, 12), (113, 20), (114, 10), (115, 11), (117, 10), (118, 17), (119, 26), (120, 13), (121, 16), (122, 16), (123, 19), (124, 18), (125, 11), (126, 9), (127, 10), (129, 20), (130, 12), (131, 10), (132, 13), (134, 12), (135, 10), (136, 23), (137, 23), (138, 12), (139, 35), (140, 13), (141, 31), (142, 9), (143, 17), (144, 23), (146, 24), (147, 10), (148, 30), (149, 30), (150, 11), (151, 11), (152, 11), (154, 14), (155, 22), (157, 11), (158, 23), (159, 13), (160, 24), (161, 15), (162, 10), (163, 15), (164, 18), (165, 31), (166, 17), (167, 16), (168, 23), (169, 12), (171, 18), (172, 11), (173, 17), (174, 22), (176, 10), (177, 14), (178, 24), (179, 14), (180, 24), (181, 24), (182, 23), (183, 30), (184, 27), (185, 24), (186, 13), (187, 19), (188, 22), (189, 9), (190, 21), (191, 10), (192, 13), (193, 11), (194, 16), (195, 18), (196, 20), (197, 18), (199, 18), (200, 13), (201, 15), (202, 7), (203, 9), (207, 17), (208, 22), (209, 13), (210, 14), (212, 14), (213, 23), (214, 12), (215, 12), (217, 20), (219, 15), (220, 27), (222, 22), (223, 16), (225, 21), (226, 14), (227, 11), (229, 14), (230, 17), (232, 17), (233, 12), (234, 17), (235, 16), (236, 25), (237, 12), (238, 30), (239, 18), (240, 13), (241, 20), (244, 10), (245, 13), (251, 15), (253, 21), (255, 16), (260, 17), (263, 18), (265, 13), (266, 10), (267, 15), (268, 13), (269, 17), (270, 10), (273, 19), (276, 10), (278, 11), (279, 9), (280, 22), (281, 14), (282, 12), (283, 10), (284, 13), (286, 25), (287, 27), (288, 19), (289, 15), (292, 29), (294, 20), (297, 12), (298, 21), (299, 16), (302, 12), (303, 13), (304, 26), (305, 11), (307, 21), (309, 11), (313, 11), (316, 13), (317, 13), (318, 22), (319, 10), (323, 24), (325, 14), (326, 25), (327, 16), (328, 17), (331, 16), (332, 21), (333, 17), (334, 23), (335, 15), (336, 12), (337, 16), (338, 17), (340, 23), (341, 21), (342, 18), (343, 18), (344, 8), (345, 23), (346, 9), (347, 22), (350, 20), (351, 18), (352, 19), (353, 30), (354, 19), (355, 15), (356, 19), (357, 14), (358, 19), (359, 13), (360, 33), (361, 31), (366, 11), (375, 36), (376, 9), (377, 30), (378, 17), (379, 31), (380, 21), (381, 19), (383, 25), (384, 14), (385, 15), (387, 26), (388, 13), (389, 17), (390, 19), (391, 9), (392, 10), (393, 11), (394, 15), (395, 16), (396, 17), (398, 17), (399, 17), (400, 14), (402, 26), (403, 27), (404, 24), (405, 18), (407, 27), (408, 11), (411, 12), (412, 30), (413, 12), (414, 32), (415, 19), (416, 10), (417, 23), (418, 30), (419, 18), (420, 16), (422, 10), (423, 21), (425, 18), (426, 14), (427, 10), (429, 16), (430, 16), (431, 16), (433, 14), (435, 30), (436, 17), (437, 28), (438, 9), (441, 17), (442, 17), (443, 30), (444, 15), (445, 14), (446, 15), (447, 16), (448, 14), (449, 20), (450, 21), (452, 17), (453, 19), (455, 13), (456, 14), (458, 14), (459, 11), (460, 14), (461, 15), (462, 14), (463, 18), (464, 17), (465, 12)]
nb_edges_0 = 9004 rho= 0.1 # of rows = 44 # of columns= 342 total_degree_0= 9004 RHS= 900.4000000000001
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  4 with obj value: 537.8263636363636 KP time = 0.5763059979071841 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01704 - (Local CPU) 0.01704 - (Global CPU) 0.59335

 Solve status: Optimal Objective value: 233.76471 nb_rows 44 nb_cols 316
----------------------------------------
----------------------------------------

        Updated data after iteration: 4 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (44, 316) and density : 0.418 and number of remaining ones : 6044
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.418 density  and density_threshold= 0.700


I am in the while loop with i= 5 density= 0.4177215189873418 and fixed_threshold= 0.7

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 489.584
I solved model name = row_knapsack_problem for iteration i =  5 with obj value: 489.58350515463917 KP time = 0.5933482899563387 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01475 - (Local CPU) 0.01475 - (Global CPU) 0.60810

 Solve status: Optimal Objective value: 489.58351 nb_rows 39 nb_cols 316
----------------------------------------
----------------------------------------

        Updated data after iteration: 5 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (39, 316) and density : 0.423 and number of remaining ones : 5210
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(1, 12), (3, 10), (5, 13), (8, 13), (9, 12), (10, 16), (11, 14), (12, 15), (13, 18), (14, 18), (15, 16), (16, 14), (18, 32), (19, 25), (21, 34), (23, 33), (24, 26), (25, 27), (26, 26), (27, 33), (28, 11), (29, 28), (31, 28), (32, 28), (34, 26), (36, 26), (37, 23), (38, 25), (39, 12), (40, 9), (41, 22), (44, 13), (47, 30), (49, 19), (50, 23), (52, 18), (53, 11), (54, 10), (55, 13), (57, 19), (58, 10), (59, 12), (60, 10), (61, 22), (62, 16), (63, 13), (64, 12), (70, 24), (72, 10), (74, 18), (76, 17), (77, 12), (78, 24), (79, 14), (80, 29), (81, 13), (82, 14), (83, 25), (84, 17), (91, 12), (92, 19), (93, 20), (94, 16), (95, 14), (96, 14), (97, 11), (98, 20), (99, 10), (101, 10), (104, 9), (106, 12), (108, 13), (110, 17), (111, 10), (112, 11), (113, 17), (115, 10), (117, 10), (118, 16), (119, 25), (120, 10), (121, 16), (122, 16), (123, 17), (124, 15), (125, 11), (129, 18), (130, 10), (131, 6), (132, 12), (134, 10), (136, 22), (137, 20), (138, 12), (139, 33), (140, 11), (141, 28), (143, 14), (144, 21), (146, 24), (147, 9), (148, 27), (149, 28), (150, 10), (151, 10), (152, 10), (154, 11), (155, 22), (157, 9), (158, 22), (159, 12), (160, 23), (161, 13), (162, 9), (163, 14), (164, 16), (165, 27), (166, 17), (167, 13), (168, 22), (169, 10), (171, 17), (172, 10), (173, 15), (174, 21), (176, 9), (177, 13), (178, 22), (179, 12), (180, 23), (181, 23), (182, 22), (183, 27), (184, 24), (185, 21), (186, 11), (187, 18), (188, 20), (190, 19), (191, 7), (192, 10), (193, 9), (194, 15), (195, 15), (196, 19), (197, 18), (199, 18), (200, 13), (201, 13), (207, 16), (208, 20), (209, 10), (210, 12), (212, 12), (213, 20), (214, 9), (215, 11), (217, 18), (219, 14), (220, 24), (222, 19), (223, 16), (225, 20), (226, 13), (227, 10), (229, 13), (230, 14), (232, 16), (233, 10), (234, 15), (235, 15), (236, 22), (237, 10), (238, 26), (239, 16), (240, 11), (241, 19), (244, 10), (245, 12), (251, 14), (253, 19), (255, 14), (260, 16), (263, 17), (265, 11), (266, 10), (267, 14), (268, 11), (269, 15), (273, 17), (276, 8), (278, 10), (280, 20), (281, 11), (282, 10), (284, 12), (286, 21), (287, 25), (288, 15), (289, 13), (292, 25), (294, 18), (297, 11), (298, 19), (299, 14), (302, 12), (303, 12), (304, 22), (305, 8), (307, 19), (309, 10), (313, 10), (316, 12), (317, 12), (318, 20), (323, 22), (325, 12), (326, 22), (327, 14), (328, 14), (331, 14), (332, 19), (333, 14), (334, 21), (335, 13), (336, 12), (337, 16), (338, 13), (340, 21), (341, 19), (342, 17), (343, 15), (345, 20), (347, 19), (350, 17), (351, 15), (352, 18), (353, 26), (354, 18), (355, 14), (356, 16), (357, 13), (358, 17), (359, 11), (360, 29), (361, 27), (366, 11), (375, 32), (377, 26), (378, 15), (379, 29), (380, 19), (381, 17), (383, 22), (384, 12), (385, 12), (387, 23), (388, 12), (389, 14), (390, 16), (393, 10), (394, 13), (395, 16), (396, 16), (398, 14), (399, 15), (400, 13), (402, 23), (403, 24), (404, 20), (405, 16), (407, 24), (408, 11), (411, 10), (412, 26), (413, 11), (414, 28), (415, 18), (416, 9), (417, 18), (418, 27), (419, 18), (420, 12), (423, 20), (425, 17), (426, 13), (427, 9), (429, 14), (430, 15), (431, 15), (433, 11), (435, 26), (436, 16), (437, 25), (441, 15), (442, 16), (443, 28), (444, 13), (445, 13), (446, 14), (447, 13), (448, 13), (449, 18), (450, 19), (452, 16), (453, 17), (455, 12), (456, 13), (458, 13), (459, 10), (460, 13), (461, 14), (462, 13), (463, 17), (464, 15), (465, 11)]
nb_edges_0 = 7114 rho= 0.1 # of rows = 39 # of columns= 316 total_degree_0= 7114 RHS= 711.4000000000001
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  5 with obj value: 489.58350515463917 KP time = 0.6080956649966538 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01688 - (Local CPU) 0.01688 - (Global CPU) 0.62498

 Solve status: Optimal Objective value: 217.06897 nb_rows 39 nb_cols 292
----------------------------------------
----------------------------------------

        Updated data after iteration: 5 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (39, 292) and density : 0.438 and number of remaining ones : 5210
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.438 density  and density_threshold= 0.700


I am in the while loop with i= 6 density= 0.4382683526519143 and fixed_threshold= 0.7

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 417.674
I solved model name = row_knapsack_problem for iteration i =  6 with obj value: 417.6737142857143 KP time = 0.6249787060078233 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01562 - (Local CPU) 0.01563 - (Global CPU) 0.64060

 Solve status: Optimal Objective value: 417.67371 nb_rows 35 nb_cols 292
----------------------------------------
----------------------------------------

        Updated data after iteration: 6 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (35, 292) and density : 0.443 and number of remaining ones : 4529
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(1, 11), (3, 9), (5, 12), (8, 13), (9, 11), (10, 14), (11, 13), (12, 14), (13, 17), (14, 17), (15, 14), (16, 13), (18, 29), (19, 22), (21, 31), (23, 30), (24, 24), (25, 24), (26, 23), (27, 30), (28, 10), (29, 24), (31, 26), (32, 26), (34, 24), (36, 24), (37, 21), (38, 22), (39, 11), (41, 19), (44, 11), (47, 27), (49, 18), (50, 21), (52, 17), (53, 11), (54, 9), (55, 11), (57, 18), (58, 8), (59, 11), (60, 9), (61, 20), (62, 14), (63, 11), (64, 11), (70, 22), (72, 8), (74, 17), (76, 15), (77, 11), (78, 21), (79, 12), (80, 26), (81, 11), (82, 13), (83, 22), (84, 15), (91, 10), (92, 17), (93, 18), (94, 14), (95, 11), (96, 13), (97, 10), (98, 17), (99, 8), (101, 9), (106, 12), (108, 10), (110, 15), (111, 8), (112, 10), (113, 15), (115, 10), (117, 10), (118, 14), (119, 23), (120, 8), (121, 13), (122, 15), (123, 15), (124, 13), (125, 11), (129, 16), (130, 10), (132, 10), (134, 8), (136, 19), (137, 19), (138, 10), (139, 30), (140, 9), (141, 26), (143, 11), (144, 21), (146, 24), (148, 26), (149, 27), (150, 7), (151, 8), (154, 8), (155, 22), (158, 20), (159, 10), (160, 20), (161, 11), (163, 12), (164, 13), (165, 24), (166, 16), (167, 11), (168, 21), (169, 8), (171, 17), (172, 8), (173, 12), (174, 21), (177, 12), (178, 20), (179, 10), (180, 21), (181, 20), (182, 20), (183, 25), (184, 21), (185, 20), (186, 9), (187, 18), (188, 19), (190, 17), (192, 8), (194, 15), (195, 14), (196, 18), (197, 18), (199, 17), (200, 11), (201, 9), (207, 16), (208, 19), (210, 11), (212, 11), (213, 19), (215, 9), (217, 15), (219, 14), (220, 23), (222, 18), (223, 13), (225, 19), (226, 13), (227, 9), (229, 11), (230, 13), (232, 15), (233, 9), (234, 11), (235, 14), (236, 20), (237, 10), (238, 25), (239, 15), (240, 10), (241, 18), (245, 12), (251, 12), (253, 18), (255, 12), (260, 14), (263, 15), (265, 10), (267, 13), (268, 11), (269, 14), (273, 17), (278, 8), (280, 18), (281, 8), (284, 10), (286, 19), (287, 23), (288, 14), (289, 12), (292, 22), (294, 16), (297, 8), (298, 17), (299, 13), (302, 11), (303, 10), (304, 21), (307, 18), (316, 11), (317, 12), (318, 18), (323, 21), (325, 11), (326, 20), (327, 13), (328, 13), (331, 13), (332, 18), (333, 14), (334, 20), (335, 11), (336, 11), (337, 14), (338, 13), (340, 20), (341, 16), (342, 15), (343, 14), (345, 17), (347, 17), (350, 15), (351, 13), (352, 16), (353, 24), (354, 17), (355, 14), (356, 15), (357, 13), (358, 17), (359, 11), (360, 28), (361, 26), (366, 8), (375, 30), (377, 25), (378, 15), (379, 28), (380, 18), (381, 14), (383, 20), (384, 11), (385, 11), (387, 21), (388, 9), (389, 13), (390, 15), (394, 12), (395, 14), (396, 14), (398, 13), (399, 13), (400, 10), (402, 21), (403, 22), (404, 18), (405, 15), (407, 21), (408, 9), (412, 24), (413, 9), (414, 26), (415, 16), (417, 18), (418, 24), (419, 15), (420, 11), (423, 17), (425, 16), (426, 11), (429, 12), (430, 13), (431, 13), (433, 10), (435, 24), (436, 15), (437, 23), (441, 14), (442, 15), (443, 25), (444, 10), (445, 12), (446, 12), (447, 12), (448, 12), (449, 17), (450, 18), (452, 15), (453, 16), (455, 11), (456, 13), (458, 12), (460, 12), (461, 13), (462, 12), (463, 16), (464, 14), (465, 10)]
nb_edges_0 = 5691 rho= 0.1 # of rows = 35 # of columns= 292 total_degree_0= 5691 RHS= 569.1
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  6 with obj value: 417.6737142857143 KP time = 0.6406044559553266 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01721 - (Local CPU) 0.01721 - (Global CPU) 0.65782

 Solve status: Optimal Objective value: 174.11154 nb_rows 35 nb_cols 270
----------------------------------------
----------------------------------------

        Updated data after iteration: 6 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (35, 270) and density : 0.460 and number of remaining ones : 4529
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.460 density  and density_threshold= 0.700


I am in the while loop with i= 7 density= 0.46010582010582013 and fixed_threshold= 0.7

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 373.310
I solved model name = row_knapsack_problem for iteration i =  7 with obj value: 373.30967741935484 KP time = 0.6578153308946639 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01487 - (Local CPU) 0.01488 - (Global CPU) 0.67269

 Solve status: Optimal Objective value: 373.30968 nb_rows 31 nb_cols 270
----------------------------------------
----------------------------------------

        Updated data after iteration: 7 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (31, 270) and density : 0.465 and number of remaining ones : 3891
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(1, 11), (5, 12), (8, 12), (9, 11), (10, 12), (11, 12), (12, 14), (13, 16), (14, 16), (15, 14), (16, 12), (18, 26), (19, 19), (21, 27), (23, 26), (24, 21), (25, 21), (26, 21), (27, 26), (28, 9), (29, 21), (31, 24), (32, 23), (34, 20), (36, 20), (37, 18), (38, 18), (39, 10), (41, 17), (44, 10), (47, 24), (49, 17), (50, 20), (52, 16), (53, 11), (55, 11), (57, 16), (59, 10), (60, 7), (61, 19), (62, 11), (63, 9), (64, 11), (70, 20), (74, 15), (76, 14), (77, 9), (78, 19), (79, 12), (80, 25), (81, 9), (82, 13), (83, 21), (84, 13), (91, 10), (92, 15), (93, 16), (94, 13), (95, 9), (96, 13), (97, 9), (98, 17), (101, 9), (106, 8), (108, 10), (110, 13), (112, 9), (113, 13), (115, 10), (117, 9), (118, 14), (119, 20), (121, 12), (122, 13), (123, 13), (124, 12), (125, 10), (129, 14), (130, 8), (132, 9), (136, 17), (137, 16), (138, 9), (139, 26), (140, 8), (141, 23), (143, 10), (144, 19), (146, 21), (148, 23), (149, 24), (155, 19), (158, 17), (159, 9), (160, 18), (161, 7), (163, 10), (164, 13), (165, 22), (166, 15), (167, 9), (168, 20), (171, 16), (173, 11), (174, 20), (177, 9), (178, 18), (179, 7), (180, 20), (181, 18), (182, 18), (183, 22), (184, 19), (185, 18), (187, 16), (188, 17), (190, 16), (194, 14), (195, 12), (196, 15), (197, 16), (199, 16), (200, 11), (207, 15), (208, 18), (210, 9), (212, 9), (213, 16), (215, 8), (217, 13), (219, 13), (220, 21), (222, 16), (223, 10), (225, 16), (226, 12), (227, 7), (229, 10), (230, 12), (232, 13), (234, 8), (235, 12), (236, 18), (237, 7), (238, 21), (239, 14), (240, 10), (241, 16), (245, 10), (251, 10), (253, 18), (255, 12), (260, 13), (263, 14), (265, 10), (267, 11), (268, 9), (269, 13), (273, 15), (280, 16), (284, 8), (286, 17), (287, 22), (288, 12), (289, 10), (292, 19), (294, 14), (298, 16), (299, 13), (302, 8), (303, 8), (304, 18), (307, 16), (316, 10), (317, 11), (318, 17), (323, 20), (325, 8), (326, 18), (327, 10), (328, 11), (331, 10), (332, 16), (333, 12), (334, 17), (335, 9), (336, 10), (337, 12), (338, 10), (340, 18), (341, 14), (342, 15), (343, 11), (345, 14), (347, 14), (350, 12), (351, 10), (352, 15), (353, 20), (354, 16), (355, 13), (356, 12), (357, 12), (358, 16), (359, 11), (360, 24), (361, 23), (375, 26), (377, 23), (378, 15), (379, 24), (380, 16), (381, 12), (383, 17), (384, 9), (385, 10), (387, 20), (388, 9), (389, 12), (390, 14), (394, 9), (395, 11), (396, 13), (398, 12), (399, 12), (400, 9), (402, 20), (403, 19), (404, 16), (405, 14), (407, 18), (412, 20), (413, 8), (414, 22), (415, 12), (417, 17), (418, 21), (419, 12), (420, 9), (423, 15), (425, 14), (426, 9), (429, 8), (430, 11), (431, 13), (433, 9), (435, 23), (436, 14), (437, 21), (441, 14), (442, 14), (443, 23), (444, 9), (445, 12), (446, 12), (447, 12), (448, 11), (449, 16), (450, 17), (452, 15), (453, 16), (455, 11), (456, 13), (458, 12), (460, 12), (461, 13), (462, 11), (463, 16), (464, 14), (465, 10)]
nb_edges_0 = 4479 rho= 0.1 # of rows = 31 # of columns= 270 total_degree_0= 4479 RHS= 447.90000000000003
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  7 with obj value: 373.30967741935484 KP time = 0.6726905808318406 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01661 - (Local CPU) 0.01661 - (Global CPU) 0.68930

 Solve status: Optimal Objective value: 153.64091 nb_rows 31 nb_cols 250
----------------------------------------
----------------------------------------

        Updated data after iteration: 7 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (31, 250) and density : 0.482 and number of remaining ones : 3891
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.482 density  and density_threshold= 0.700


I am in the while loop with i= 8 density= 0.48154838709677417 and fixed_threshold= 0.7

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 315.466
I solved model name = row_knapsack_problem for iteration i =  8 with obj value: 315.46618705035974 KP time = 0.6893019978888333 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01487 - (Local CPU) 0.01487 - (Global CPU) 0.70417

 Solve status: Optimal Objective value: 315.46619 nb_rows 28 nb_cols 250
----------------------------------------
----------------------------------------

        Updated data after iteration: 8 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (28, 250) and density : 0.486 and number of remaining ones : 3402
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(1, 9), (5, 9), (8, 10), (9, 9), (10, 9), (11, 9), (12, 11), (13, 13), (14, 13), (15, 11), (16, 9), (18, 24), (19, 17), (21, 26), (23, 24), (24, 20), (25, 20), (26, 20), (27, 25), (28, 8), (29, 19), (31, 24), (32, 23), (34, 19), (36, 19), (37, 18), (38, 18), (39, 9), (41, 15), (44, 8), (47, 22), (49, 16), (50, 19), (52, 16), (53, 10), (55, 9), (57, 16), (59, 9), (61, 17), (62, 9), (63, 8), (64, 11), (70, 19), (74, 13), (76, 13), (77, 8), (78, 16), (79, 9), (80, 24), (81, 7), (82, 13), (83, 19), (84, 13), (91, 10), (92, 14), (93, 15), (94, 12), (95, 8), (96, 13), (97, 8), (98, 15), (101, 9), (108, 10), (110, 12), (112, 8), (113, 13), (115, 9), (118, 14), (119, 18), (121, 10), (122, 11), (123, 12), (124, 11), (125, 9), (129, 12), (132, 8), (136, 16), (137, 16), (138, 7), (139, 24), (141, 21), (143, 8), (144, 17), (146, 20), (148, 22), (149, 23), (155, 17), (158, 16), (159, 9), (160, 18), (163, 9), (164, 11), (165, 20), (166, 15), (167, 8), (168, 19), (171, 15), (173, 10), (174, 18), (177, 8), (178, 18), (180, 18), (181, 18), (182, 18), (183, 21), (184, 19), (185, 18), (187, 16), (188, 16), (190, 15), (194, 13), (195, 10), (196, 15), (197, 14), (199, 15), (200, 8), (207, 15), (208, 17), (210, 9), (212, 7), (213, 15), (217, 13), (219, 11), (220, 19), (222, 15), (223, 10), (225, 16), (226, 10), (229, 8), (230, 11), (232, 12), (235, 11), (236, 17), (238, 20), (239, 13), (240, 9), (241, 15), (245, 8), (251, 7), (253, 17), (255, 12), (260, 11), (263, 14), (265, 9), (267, 10), (268, 7), (269, 12), (273, 14), (280, 16), (286, 15), (287, 21), (288, 12), (289, 9), (292, 18), (294, 14), (298, 15), (299, 13), (304, 17), (307, 16), (316, 9), (317, 8), (318, 16), (323, 19), (326, 17), (327, 10), (328, 10), (331, 10), (332, 16), (333, 11), (334, 17), (336, 8), (337, 9), (338, 9), (340, 16), (341, 11), (342, 13), (343, 11), (345, 13), (347, 14), (350, 12), (351, 8), (352, 15), (353, 20), (354, 16), (355, 13), (356, 12), (357, 12), (358, 15), (359, 11), (360, 23), (361, 21), (375, 25), (377, 20), (378, 14), (379, 23), (380, 15), (381, 10), (383, 14), (384, 7), (385, 8), (387, 19), (388, 9), (389, 10), (390, 11), (394, 7), (395, 11), (396, 12), (398, 11), (399, 11), (402, 18), (403, 17), (404, 15), (405, 13), (407, 16), (412, 18), (414, 20), (415, 10), (417, 17), (418, 19), (419, 9), (420, 8), (423, 13), (425, 13), (426, 7), (430, 11), (431, 13), (435, 22), (436, 14), (437, 21), (441, 11), (442, 11), (443, 20), (444, 7), (445, 9), (446, 9), (447, 9), (448, 8), (449, 13), (450, 14), (452, 12), (453, 13), (455, 8), (456, 10), (458, 9), (460, 9), (461, 10), (462, 8), (463, 13), (464, 11), (465, 8)]
nb_edges_0 = 3598 rho= 0.1 # of rows = 28 # of columns= 250 total_degree_0= 3598 RHS= 359.8
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  8 with obj value: 315.46618705035974 KP time = 0.7041747479233891 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01665 - (Local CPU) 0.01665 - (Global CPU) 0.72082

 Solve status: Optimal Objective value: 131.32000 nb_rows 28 nb_cols 232
----------------------------------------
----------------------------------------

        Updated data after iteration: 8 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (28, 232) and density : 0.503 and number of remaining ones : 3402
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.503 density  and density_threshold= 0.700


I am in the while loop with i= 9 density= 0.5029248768472906 and fixed_threshold= 0.7

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 255.106
I solved model name = row_knapsack_problem for iteration i =  9 with obj value: 255.10625 KP time = 0.7208246230147779 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01495 - (Local CPU) 0.01495 - (Global CPU) 0.73578

 Solve status: Optimal Objective value: 255.10625 nb_rows 25 nb_cols 232
----------------------------------------
----------------------------------------

        Updated data after iteration: 9 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (25, 232) and density : 0.510 and number of remaining ones : 2959
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(1, 9), (5, 9), (8, 9), (9, 9), (10, 9), (11, 9), (12, 10), (13, 13), (14, 12), (15, 11), (16, 9), (18, 21), (19, 14), (21, 23), (23, 21), (24, 17), (25, 17), (26, 17), (27, 22), (28, 8), (29, 16), (31, 21), (32, 20), (34, 17), (36, 16), (37, 16), (38, 15), (39, 9), (41, 12), (47, 19), (49, 16), (50, 19), (52, 16), (53, 10), (55, 6), (57, 15), (59, 8), (61, 15), (62, 6), (64, 11), (70, 17), (74, 13), (76, 13), (77, 8), (78, 16), (79, 9), (80, 21), (82, 13), (83, 16), (84, 13), (91, 7), (92, 14), (93, 15), (94, 12), (95, 6), (96, 13), (97, 5), (98, 15), (101, 6), (108, 7), (110, 9), (113, 10), (115, 9), (118, 11), (119, 15), (121, 8), (122, 10), (123, 9), (124, 8), (125, 9), (129, 12), (132, 5), (136, 13), (137, 16), (139, 21), (141, 21), (143, 5), (144, 17), (146, 18), (148, 22), (149, 21), (155, 17), (158, 15), (159, 9), (160, 17), (163, 8), (164, 11), (165, 18), (166, 14), (167, 5), (168, 18), (171, 13), (173, 9), (174, 16), (178, 17), (180, 17), (181, 16), (182, 16), (183, 19), (184, 18), (185, 17), (187, 15), (188, 15), (190, 13), (194, 12), (195, 9), (196, 12), (197, 13), (199, 14), (200, 6), (207, 13), (208, 17), (210, 9), (213, 13), (217, 11), (219, 9), (220, 16), (222, 15), (223, 9), (225, 15), (226, 10), (229, 5), (230, 11), (232, 9), (235, 9), (236, 14), (238, 17), (239, 13), (240, 7), (241, 15), (253, 16), (255, 12), (260, 9), (263, 14), (265, 6), (267, 8), (269, 12), (273, 13), (280, 16), (286, 14), (287, 19), (288, 12), (289, 7), (292, 18), (294, 14), (298, 15), (299, 13), (304, 14), (307, 15), (316, 6), (318, 16), (323, 18), (326, 17), (327, 7), (328, 7), (331, 7), (332, 16), (333, 8), (334, 14), (337, 9), (338, 6), (340, 13), (341, 11), (342, 13), (343, 8), (345, 10), (347, 11), (350, 9), (352, 15), (353, 17), (354, 16), (355, 13), (356, 9), (357, 12), (358, 15), (359, 11), (360, 20), (361, 18), (375, 22), (377, 18), (378, 12), (379, 20), (380, 13), (381, 9), (383, 13), (385, 8), (387, 18), (388, 9), (389, 10), (390, 10), (395, 9), (396, 11), (398, 10), (399, 10), (402, 17), (403, 16), (404, 13), (405, 12), (407, 14), (412, 15), (414, 17), (415, 7), (417, 15), (418, 18), (419, 7), (420, 6), (423, 12), (425, 12), (430, 10), (431, 13), (435, 21), (436, 14), (437, 20), (441, 11), (442, 11), (443, 18), (445, 9), (446, 9), (447, 9), (448, 8), (449, 13), (450, 14), (452, 12), (453, 13), (455, 8), (456, 10), (458, 9), (460, 9), (461, 10), (463, 12), (464, 10), (465, 8)]
nb_edges_0 = 2841 rho= 0.1 # of rows = 25 # of columns= 232 total_degree_0= 2841 RHS= 284.1
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  9 with obj value: 255.10625 KP time = 0.7357766639906913 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01596 - (Local CPU) 0.01596 - (Global CPU) 0.75174

 Solve status: Optimal Objective value: 84.09444 nb_rows 25 nb_cols 217
----------------------------------------
----------------------------------------

        Updated data after iteration: 9 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (25, 217) and density : 0.530 and number of remaining ones : 2959
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.530 density  and density_threshold= 0.700


I am in the while loop with i= 10 density= 0.5295852534562212 and fixed_threshold= 0.7

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 223.750
I solved model name = row_knapsack_problem for iteration i =  10 with obj value: 223.75 KP time = 0.7517380809877068 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01441 - (Local CPU) 0.01441 - (Global CPU) 0.76615

 Solve status: Optimal Objective value: 223.75000 nb_rows 22 nb_cols 217
----------------------------------------
----------------------------------------

        Updated data after iteration: 10 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (22, 217) and density : 0.537 and number of remaining ones : 2566
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(1, 8), (5, 8), (8, 8), (9, 7), (10, 8), (11, 8), (12, 9), (13, 10), (14, 10), (15, 9), (16, 8), (18, 19), (19, 13), (21, 20), (23, 18), (24, 15), (25, 15), (26, 15), (27, 19), (28, 7), (29, 14), (31, 19), (32, 17), (34, 15), (36, 14), (37, 14), (38, 14), (39, 9), (41, 11), (47, 17), (49, 15), (50, 19), (52, 16), (53, 8), (57, 15), (59, 6), (61, 14), (64, 11), (70, 15), (74, 12), (76, 13), (77, 7), (78, 14), (79, 8), (80, 19), (82, 13), (83, 14), (84, 13), (91, 5), (92, 13), (93, 14), (94, 11), (96, 13), (98, 13), (108, 5), (110, 6), (113, 7), (115, 9), (118, 9), (119, 13), (121, 6), (122, 8), (123, 7), (124, 7), (125, 8), (129, 10), (136, 11), (137, 15), (139, 19), (141, 20), (144, 17), (146, 16), (148, 21), (149, 19), (155, 16), (158, 15), (159, 8), (160, 16), (163, 8), (164, 11), (165, 18), (166, 14), (168, 17), (171, 12), (173, 6), (174, 15), (178, 16), (180, 14), (181, 14), (182, 14), (183, 16), (184, 17), (185, 14), (187, 14), (188, 13), (190, 12), (194, 11), (195, 8), (196, 10), (197, 12), (199, 13), (207, 11), (208, 16), (210, 8), (213, 11), (217, 10), (219, 8), (220, 13), (222, 13), (223, 9), (225, 14), (226, 10), (230, 10), (232, 7), (235, 7), (236, 13), (238, 14), (239, 12), (240, 4), (241, 14), (253, 15), (255, 11), (260, 7), (263, 13), (267, 6), (269, 12), (273, 12), (280, 14), (286, 13), (287, 18), (288, 12), (289, 5), (292, 18), (294, 14), (298, 15), (299, 13), (304, 13), (307, 13), (318, 15), (323, 17), (326, 16), (327, 6), (328, 5), (331, 6), (332, 15), (333, 7), (334, 12), (337, 8), (340, 12), (341, 10), (342, 11), (343, 7), (345, 8), (347, 9), (350, 8), (352, 13), (353, 16), (354, 13), (355, 12), (356, 8), (357, 11), (358, 13), (359, 10), (360, 18), (361, 17), (375, 20), (377, 17), (378, 11), (379, 18), (380, 11), (381, 7), (383, 11), (385, 7), (387, 17), (388, 9), (389, 9), (390, 8), (395, 8), (396, 10), (398, 8), (399, 9), (402, 15), (403, 14), (404, 12), (405, 11), (407, 12), (412, 13), (414, 15), (415, 6), (417, 14), (418, 15), (423, 10), (425, 10), (430, 7), (431, 11), (435, 18), (436, 11), (437, 17), (441, 10), (442, 10), (443, 16), (445, 8), (446, 8), (447, 8), (448, 7), (449, 12), (450, 12), (452, 10), (453, 12), (455, 7), (456, 8), (458, 8), (460, 8), (461, 8), (463, 10), (464, 9), (465, 7)]
nb_edges_0 = 2208 rho= 0.1 # of rows = 22 # of columns= 217 total_degree_0= 2208 RHS= 220.8
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  10 with obj value: 223.75 KP time = 0.7661489560268819 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01553 - (Local CPU) 0.01553 - (Global CPU) 0.78168

 Solve status: Optimal Objective value: 75.17333 nb_rows 22 nb_cols 203
----------------------------------------
----------------------------------------

        Updated data after iteration: 10 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (22, 203) and density : 0.557 and number of remaining ones : 2566
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.557 density  and density_threshold= 0.700


I am in the while loop with i= 11 density= 0.5568741603224362 and fixed_threshold= 0.7

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 189.810
I solved model name = row_knapsack_problem for iteration i =  11 with obj value: 189.809900990099 KP time = 0.7816824140027165 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01407 - (Local CPU) 0.01407 - (Global CPU) 0.79575

 Solve status: Optimal Objective value: 189.80990 nb_rows 20 nb_cols 203
----------------------------------------
----------------------------------------

        Updated data after iteration: 11 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (20, 203) and density : 0.564 and number of remaining ones : 2288
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(1, 6), (5, 6), (8, 7), (9, 5), (10, 6), (11, 6), (12, 7), (13, 8), (14, 8), (15, 7), (16, 6), (18, 17), (19, 12), (21, 18), (23, 16), (24, 14), (25, 14), (26, 14), (27, 17), (28, 6), (29, 13), (31, 18), (32, 15), (34, 14), (36, 14), (37, 13), (38, 13), (39, 8), (41, 10), (47, 15), (49, 15), (50, 18), (52, 16), (53, 7), (57, 14), (61, 12), (64, 11), (70, 14), (74, 12), (76, 13), (77, 7), (78, 14), (79, 7), (80, 17), (82, 13), (83, 13), (84, 12), (92, 13), (93, 14), (94, 11), (96, 12), (98, 13), (113, 6), (115, 9), (118, 7), (119, 11), (122, 8), (123, 5), (124, 6), (125, 8), (129, 10), (136, 9), (137, 14), (139, 17), (141, 19), (144, 16), (146, 15), (148, 19), (149, 17), (155, 16), (158, 15), (159, 7), (160, 15), (163, 8), (164, 10), (165, 17), (166, 13), (168, 16), (171, 12), (174, 14), (178, 14), (180, 13), (181, 12), (182, 14), (183, 15), (184, 16), (185, 14), (187, 14), (188, 12), (190, 12), (194, 11), (195, 7), (196, 9), (197, 11), (199, 11), (207, 11), (208, 15), (210, 7), (213, 11), (217, 10), (219, 7), (220, 12), (222, 12), (223, 8), (225, 13), (226, 10), (230, 9), (232, 7), (235, 6), (236, 12), (238, 14), (239, 12), (241, 13), (253, 14), (255, 11), (260, 6), (263, 12), (269, 12), (273, 11), (280, 13), (286, 12), (287, 17), (288, 11), (292, 16), (294, 14), (298, 14), (299, 13), (304, 11), (307, 12), (318, 15), (323, 16), (326, 15), (332, 15), (333, 5), (334, 11), (337, 7), (340, 11), (341, 10), (342, 10), (343, 6), (345, 7), (347, 8), (350, 6), (352, 12), (353, 16), (354, 12), (355, 12), (356, 8), (357, 10), (358, 12), (359, 9), (360, 18), (361, 17), (375, 18), (377, 15), (378, 11), (379, 17), (380, 10), (381, 5), (383, 10), (385, 7), (387, 16), (388, 7), (389, 8), (390, 8), (395, 7), (396, 8), (398, 8), (399, 7), (402, 15), (403, 14), (404, 11), (405, 11), (407, 12), (412, 12), (414, 13), (417, 14), (418, 15), (423, 10), (425, 10), (430, 7), (431, 10), (435, 17), (436, 11), (437, 16), (441, 8), (442, 8), (443, 14), (445, 6), (446, 6), (447, 6), (448, 5), (449, 10), (450, 10), (452, 8), (453, 10), (456, 6), (458, 6), (460, 6), (461, 7), (463, 8), (464, 7), (465, 6)]
nb_edges_0 = 1772 rho= 0.1 # of rows = 20 # of columns= 203 total_degree_0= 1772 RHS= 177.20000000000002
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  11 with obj value: 189.809900990099 KP time = 0.7957489980617538 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01569 - (Local CPU) 0.01569 - (Global CPU) 0.81144

 Solve status: Optimal Objective value: 68.80000 nb_rows 20 nb_cols 190
----------------------------------------
----------------------------------------

        Updated data after iteration: 11 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (20, 190) and density : 0.583 and number of remaining ones : 2288
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.583 density  and density_threshold= 0.700


I am in the while loop with i= 12 density= 0.5828947368421052 and fixed_threshold= 0.7

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 164.082
I solved model name = row_knapsack_problem for iteration i =  12 with obj value: 164.08241758241758 KP time = 0.8114398730685934 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01428 - (Local CPU) 0.01428 - (Global CPU) 0.82572

 Solve status: Optimal Objective value: 164.08242 nb_rows 18 nb_cols 190
----------------------------------------
----------------------------------------

        Updated data after iteration: 12 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (18, 190) and density : 0.591 and number of remaining ones : 2021
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(8, 6), (11, 4), (12, 5), (13, 6), (14, 6), (15, 5), (16, 4), (18, 15), (19, 12), (21, 16), (23, 15), (24, 13), (25, 14), (26, 13), (27, 16), (28, 4), (29, 13), (31, 16), (32, 13), (34, 14), (36, 14), (37, 13), (38, 13), (39, 7), (41, 9), (47, 14), (49, 13), (50, 16), (52, 14), (53, 7), (57, 13), (61, 11), (64, 9), (70, 14), (74, 11), (76, 11), (77, 6), (78, 13), (79, 6), (80, 17), (82, 12), (83, 12), (84, 11), (92, 12), (93, 13), (94, 10), (96, 11), (98, 12), (115, 8), (118, 6), (119, 11), (122, 8), (124, 4), (125, 8), (129, 9), (136, 8), (137, 13), (139, 15), (141, 17), (144, 15), (146, 15), (148, 17), (149, 17), (155, 15), (158, 15), (159, 7), (160, 14), (163, 7), (164, 9), (165, 16), (166, 13), (168, 15), (171, 12), (174, 13), (178, 14), (180, 11), (181, 11), (182, 12), (183, 14), (184, 15), (185, 13), (187, 14), (188, 12), (190, 12), (194, 11), (195, 6), (196, 7), (197, 11), (199, 10), (207, 11), (208, 14), (210, 7), (213, 11), (217, 9), (219, 6), (220, 12), (222, 12), (223, 7), (225, 12), (226, 9), (230, 9), (232, 6), (235, 6), (236, 12), (238, 13), (239, 11), (241, 12), (253, 13), (255, 11), (260, 4), (263, 12), (269, 12), (273, 11), (280, 13), (286, 12), (287, 16), (288, 11), (292, 14), (294, 13), (298, 12), (299, 13), (304, 11), (307, 12), (318, 13), (323, 14), (326, 14), (332, 14), (334, 10), (337, 6), (340, 10), (341, 9), (342, 9), (345, 6), (347, 7), (350, 5), (352, 11), (353, 14), (354, 11), (355, 11), (356, 7), (357, 9), (358, 11), (359, 8), (360, 16), (361, 15), (375, 16), (377, 14), (378, 10), (379, 15), (380, 10), (383, 8), (385, 7), (387, 15), (388, 5), (389, 7), (390, 7), (395, 6), (396, 8), (398, 8), (399, 7), (402, 14), (403, 12), (404, 11), (405, 10), (407, 10), (412, 11), (414, 12), (417, 13), (418, 13), (423, 9), (425, 8), (430, 7), (431, 10), (435, 15), (436, 10), (437, 14), (441, 6), (442, 6), (443, 12), (449, 8), (450, 8), (452, 6), (453, 8), (456, 4), (458, 4), (460, 4), (461, 5), (463, 6), (464, 5), (465, 4)]
nb_edges_0 = 1399 rho= 0.1 # of rows = 18 # of columns= 190 total_degree_0= 1399 RHS= 139.9
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  12 with obj value: 164.08241758241758 KP time = 0.8257176229963079 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.02056 - (Local CPU) 0.02056 - (Global CPU) 0.84628

 Solve status: Optimal Objective value: 41.34615 nb_rows 18 nb_cols 179
----------------------------------------
----------------------------------------

        Updated data after iteration: 12 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (18, 179) and density : 0.613 and number of remaining ones : 2021
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.613 density  and density_threshold= 0.700


I am in the while loop with i= 13 density= 0.6129733085040348 and fixed_threshold= 0.7

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 140.962
I solved model name = row_knapsack_problem for iteration i =  13 with obj value: 140.96219512195123 KP time = 0.8462776229716837 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01433 - (Local CPU) 0.01434 - (Global CPU) 0.86061

 Solve status: Optimal Objective value: 140.96220 nb_rows 16 nb_cols 179
----------------------------------------
----------------------------------------

        Updated data after iteration: 13 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (16, 179) and density : 0.623 and number of remaining ones : 1784
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(8, 6), (13, 5), (14, 4), (15, 3), (18, 13), (19, 10), (21, 15), (23, 13), (24, 12), (25, 13), (26, 12), (27, 15), (29, 12), (31, 15), (32, 12), (34, 13), (36, 13), (37, 12), (38, 12), (39, 5), (41, 9), (47, 13), (49, 12), (50, 14), (52, 13), (53, 6), (57, 12), (61, 10), (64, 9), (70, 13), (74, 9), (76, 10), (77, 6), (78, 13), (79, 4), (80, 15), (82, 10), (83, 12), (84, 11), (92, 12), (93, 11), (94, 10), (96, 11), (98, 12), (115, 8), (118, 4), (119, 10), (122, 8), (125, 8), (129, 9), (136, 6), (137, 13), (139, 13), (141, 15), (144, 13), (146, 13), (148, 15), (149, 15), (155, 13), (158, 13), (159, 6), (160, 12), (163, 6), (164, 7), (165, 14), (166, 11), (168, 13), (171, 12), (174, 12), (178, 12), (180, 9), (181, 9), (182, 12), (183, 12), (184, 13), (185, 11), (187, 12), (188, 10), (190, 11), (194, 9), (195, 6), (196, 6), (197, 10), (199, 8), (207, 11), (208, 12), (210, 7), (213, 11), (217, 8), (219, 4), (220, 12), (222, 12), (223, 5), (225, 10), (226, 9), (230, 8), (232, 5), (235, 6), (236, 11), (238, 12), (239, 10), (241, 10), (253, 12), (255, 11), (263, 12), (269, 12), (273, 10), (280, 13), (286, 12), (287, 14), (288, 11), (292, 13), (294, 13), (298, 10), (299, 13), (304, 11), (307, 12), (318, 12), (323, 13), (326, 12), (332, 13), (334, 8), (337, 5), (340, 10), (341, 9), (342, 7), (345, 5), (347, 6), (352, 11), (353, 13), (354, 11), (355, 11), (356, 6), (357, 9), (358, 11), (359, 8), (360, 15), (361, 14), (375, 15), (377, 12), (378, 9), (379, 14), (380, 10), (383, 7), (385, 7), (387, 13), (388, 3), (389, 5), (390, 5), (395, 6), (396, 7), (398, 7), (399, 5), (402, 13), (403, 12), (404, 11), (405, 9), (407, 10), (412, 11), (414, 11), (417, 11), (418, 12), (423, 8), (425, 7), (430, 7), (431, 8), (435, 14), (436, 10), (437, 13), (441, 4), (442, 4), (443, 10), (449, 6), (450, 6), (452, 4), (453, 6), (461, 3), (463, 4), (464, 3)]
nb_edges_0 = 1080 rho= 0.1 # of rows = 16 # of columns= 179 total_degree_0= 1080 RHS= 108.0
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  13 with obj value: 140.96219512195123 KP time = 0.8606133729917929 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01580 - (Local CPU) 0.01580 - (Global CPU) 0.87642

 Solve status: Optimal Objective value: 30.66667 nb_rows 16 nb_cols 170
----------------------------------------
----------------------------------------

        Updated data after iteration: 13 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (16, 170) and density : 0.644 and number of remaining ones : 1784
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.644 density  and density_threshold= 0.700


I am in the while loop with i= 14 density= 0.6441176470588236 and fixed_threshold= 0.7

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 122.613
I solved model name = row_knapsack_problem for iteration i =  14 with obj value: 122.61333333333333 KP time = 0.8764175400137901 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01478 - (Local CPU) 0.01479 - (Global CPU) 0.89120

 Solve status: Optimal Objective value: 122.61333 nb_rows 14 nb_cols 170
----------------------------------------
----------------------------------------

        Updated data after iteration: 14 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (14, 170) and density : 0.656 and number of remaining ones : 1562
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(8, 6), (13, 3), (18, 11), (19, 9), (21, 13), (23, 11), (24, 11), (25, 12), (26, 11), (27, 13), (29, 11), (31, 13), (32, 11), (34, 11), (36, 12), (37, 11), (38, 10), (39, 5), (41, 9), (47, 12), (49, 12), (50, 12), (52, 12), (53, 4), (57, 11), (61, 10), (64, 9), (70, 12), (74, 8), (76, 9), (77, 4), (78, 12), (80, 13), (82, 10), (83, 12), (84, 11), (92, 12), (93, 11), (94, 10), (96, 9), (98, 11), (115, 7), (119, 9), (122, 8), (125, 7), (129, 9), (136, 6), (137, 12), (139, 12), (141, 13), (144, 11), (146, 12), (148, 13), (149, 13), (155, 11), (158, 11), (159, 5), (160, 11), (163, 4), (164, 5), (165, 12), (166, 9), (168, 11), (171, 11), (174, 10), (178, 10), (180, 7), (181, 7), (182, 11), (183, 10), (184, 11), (185, 9), (187, 10), (188, 8), (190, 9), (194, 9), (195, 4), (196, 4), (197, 8), (199, 8), (207, 11), (208, 11), (210, 7), (213, 11), (217, 8), (219, 2), (220, 12), (222, 12), (223, 4), (225, 9), (226, 8), (230, 8), (232, 3), (235, 5), (236, 9), (238, 12), (239, 9), (241, 9), (253, 11), (255, 10), (263, 11), (269, 11), (273, 9), (280, 12), (286, 10), (287, 12), (288, 10), (292, 11), (294, 11), (298, 9), (299, 11), (304, 10), (307, 12), (318, 12), (323, 12), (326, 12), (332, 12), (334, 7), (337, 4), (340, 8), (341, 9), (342, 6), (345, 4), (347, 5), (352, 11), (353, 12), (354, 10), (355, 11), (356, 5), (357, 9), (358, 11), (359, 8), (360, 13), (361, 12), (375, 13), (377, 11), (378, 8), (379, 13), (380, 9), (383, 6), (385, 6), (387, 11), (389, 4), (390, 5), (395, 5), (396, 6), (398, 6), (399, 4), (402, 12), (403, 11), (404, 9), (405, 8), (407, 9), (412, 10), (414, 9), (417, 9), (418, 11), (423, 8), (425, 5), (430, 6), (431, 6), (435, 12), (436, 9), (437, 12), (441, 3), (443, 9), (449, 5), (450, 5), (452, 3), (453, 5)]
nb_edges_0 = 818 rho= 0.1 # of rows = 14 # of columns= 170 total_degree_0= 818 RHS= 81.80000000000001
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  14 with obj value: 122.61333333333333 KP time = 0.8912032899679616 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01561 - (Local CPU) 0.01561 - (Global CPU) 0.90681

 Solve status: Optimal Objective value: 24.32000 nb_rows 14 nb_cols 162
----------------------------------------
----------------------------------------

        Updated data after iteration: 14 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (14, 162) and density : 0.677 and number of remaining ones : 1562
        

----------------------------------------
----------------------------------------


calling greedy approaches for zero deletion, density= 0.677 density  and density_threshold= 0.700


I am in the while loop with i= 15 density= 0.6772486772486772 and fixed_threshold= 0.7

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 104.252
I solved model name = row_knapsack_problem for iteration i =  15 with obj value: 104.2523076923077 KP time = 0.9068107899511233 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01573 - (Local CPU) 0.01574 - (Global CPU) 0.92255

 Solve status: Optimal Objective value: 104.25231 nb_rows 12 nb_cols 162
----------------------------------------
----------------------------------------

        Updated data after iteration: 15 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (12, 162) and density : 0.691 and number of remaining ones : 1344
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(8, 5), (18, 10), (19, 9), (21, 11), (23, 10), (24, 10), (25, 11), (26, 10), (27, 11), (29, 10), (31, 11), (32, 10), (34, 10), (36, 11), (37, 10), (38, 9), (39, 3), (41, 8), (47, 10), (49, 10), (50, 11), (52, 10), (57, 10), (61, 9), (64, 8), (70, 11), (74, 7), (76, 8), (77, 3), (78, 11), (80, 11), (82, 9), (83, 11), (84, 9), (92, 11), (93, 10), (94, 9), (96, 8), (98, 10), (115, 7), (119, 8), (122, 8), (125, 7), (129, 9), (136, 5), (137, 10), (139, 11), (141, 11), (144, 10), (146, 10), (148, 11), (149, 11), (155, 10), (158, 10), (159, 5), (160, 10), (163, 3), (164, 3), (165, 10), (166, 8), (168, 9), (171, 11), (174, 10), (178, 9), (180, 7), (181, 7), (182, 10), (183, 10), (184, 10), (185, 9), (187, 9), (188, 8), (190, 9), (194, 8), (195, 3), (196, 3), (197, 8), (199, 8), (207, 9), (208, 9), (210, 5), (213, 9), (217, 7), (220, 11), (222, 11), (223, 3), (225, 7), (226, 7), (230, 8), (235, 4), (236, 8), (238, 10), (239, 7), (241, 7), (253, 9), (255, 8), (263, 10), (269, 9), (273, 8), (280, 10), (286, 9), (287, 10), (288, 9), (292, 10), (294, 9), (298, 8), (299, 9), (304, 8), (307, 11), (318, 10), (323, 10), (326, 10), (332, 10), (334, 6), (340, 7), (341, 7), (342, 5), (345, 3), (347, 5), (352, 9), (353, 10), (354, 9), (355, 9), (356, 4), (357, 8), (358, 9), (359, 7), (360, 11), (361, 10), (375, 11), (377, 9), (378, 7), (379, 11), (380, 8), (383, 5), (385, 5), (387, 10), (389, 4), (390, 5), (395, 3), (396, 4), (398, 5), (402, 10), (403, 10), (404, 8), (405, 7), (407, 8), (412, 8), (414, 8), (417, 8), (418, 10), (423, 7), (425, 4), (430, 6), (431, 6), (435, 11), (436, 9), (437, 11), (443, 7), (449, 4), (450, 4), (453, 3)]
nb_edges_0 = 600 rho= 0.1 # of rows = 12 # of columns= 162 total_degree_0= 600 RHS= 60.0
----------------------------------------
Model status: Optimal
I solved model name = column_knapsack_problem for iteration i =  15 with obj value: 104.2523076923077 KP time = 0.9225458728615195 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : column_knapsack_problem  Local Time:  - (real) 0.01538 - (Local CPU) 0.01538 - (Global CPU) 0.93792

 Solve status: Optimal Objective value: 20.00000 nb_rows 12 nb_cols 155
----------------------------------------
----------------------------------------

        Updated data after iteration: 15 . We solved KP model :  column_knapsack_problem with delta =  0.0 
        Found matrix of size : (12, 155) and density : 0.711 and number of remaining ones : 1344
        

----------------------------------------
----------------------------------------

----------------------------------------

            End of greedy approaches. Exit while loop. I did: 15 iterations
            Density : 0.711 > 0.700
            It took me : 0.938 time
            Found matrix of size : (12, 155) and density : 0.711
            
----------------------------------------

 Calling exact approaches for QB clique discovery with delta = 0.0
----------------------------------------

----------------------------------------

I am in warm_exact before calling max_e_h $$$$$$$$$$$$$$$$$$

----------------------------------------------------------------------
Model status: Optimal
----------------------------------------------------------------------
Computed by max_e_h Objective Value : 1310.000 
Model status: Optimal
Solution saved to Experiments/prob_8/results_h_1_M_3.csv

----------------------------------------------------------------------
Stats
 Model solved : max_e_h  Local Time:  - (real) 0.08485 - (Local CPU) 0.08485 - (Global CPU) 0.08485

 Solve status: Optimal Objective value: 1310.00000 nb_rows 2 nb_cols 114
----------------------------------------

----------------------------------------
Results from updating data after solving model = max_e_h  delta =   0.0
Number of Remaining number  Rows  : 2
Number of Remaining number Columns : 114
Remaining  number Edges_0 P: 0 Remaining  number Edges_1 : 228 Density : 1.0 current obj value 1310.0
----------------------------------------

----------------------------------------

Exit from the heuristic (or exact  approach)  max_e_c  with delta= 0.0 Found matrix with rows_res of lenght = 2  and cols_res of lenght = 114
----------------------------------------

        Exit from the exact approach: max_e_c for matrix 3
        with delta =  0.0
        Found matrix of size : (2, 114)
        and density : 1.000
        and # of ones : 228
        and Heuristic QBC time   : 0.08485
        and Global QBC  time  : 0.08485
        
 Remaining Rows  : [5, 8]
 Remaining  Cols  : [115, 119, 122, 125, 129, 137, 139, 141, 144, 146, 148, 149, 155, 158, 160, 165, 166, 168, 171, 174, 178, 18, 180, 181, 182, 183, 184, 185, 187, 188, 19, 190, 194, 197, 199, 207, 208, 21, 217, 220, 222, 225, 226, 23, 230, 236, 238, 239, 24, 241, 25, 253, 255, 26, 263, 27, 280, 286, 287, 288, 29, 292, 294, 298, 299, 304, 307, 31, 32, 34, 340, 353, 36, 360, 361, 37, 375, 377, 378, 379, 38, 380, 387, 390, 403, 404, 405, 407, 41, 412, 414, 417, 418, 435, 437, 47, 49, 50, 52, 57, 61, 64, 70, 76, 78, 80, 82, 83, 84, 92, 93, 94, 96, 98]

----------------------------------------------------------------------
 
    End of computations for matrix 3 in  data/prob_8.csv at level 1 and debug  2
    With  model: max_e_c and quasi-biclique error: 0.0 
    Size of Remaining matrix : (2,114), with  density : 1.0 and number of ones: 228
    Global Time (in sec): 1.023
    Total Time in QBC approaches: 0.085
    Time in greedy approach: 0.938,  size of matrix found by greedy : (12,155) 
    With density : 0.711 and # ones : 1323 
    Time in heuristic only : 0.085 
    Time in warm start only : 0.000
    Number of iterations in greedy approach: 15
    Percentage of greedy approach run time in global run time : 91.70% 
    Percentage of heuristic run time in QBC run time : 100.00%
    With zero deletion rate (rho): 0.1 and threshold: 0.7
    
----------------------------------------------------------------------


Zero clique of size (2,114) has been found. Too small!! Task with matrix 3 with size (64,436) has been added to the queue.

return in decrease_and_conquer from 3 with winning node = 3

return in decrease_and_conquer from 1 with winning node = 4

----------------------------------------------------------------------

End of tasks generation stage. Last generated task from matrix 1 with winning node 4
Tasks_generation time: 15.8550 sec
----------------------------------------------------------------------
 Size of the queue: 3
 Matrix: 3, Size: 18870, Number Rows: 64,  Number Cols: 436,  Number Edges: 18870, obj -inf
 Matrix: 5, Size: 14086, Number Rows: 51,  Number Cols: 400,  Number Edges: 14086, obj -inf
 Matrix: 4, Size: 14512, Number Rows: 47,  Number Cols: 466,  Number Edges: 14512, obj -inf

----------------------------------------------------------------------


***QUEUE We currently process task number 3 with (edges 18870) selected_model max_e_c dec_conq 0 delta 0.0 threshold 0.7 rho 0.1 QBC_time 0.0 ***


----------------------------------------------------------------------
***Stats Current Input for matrix 3 in  data/prob_8.csv at level 0 and with model:  max_e_c***
Size of current matrix :  64 * 436 = 27904 ; dec_conq: 0
Prev_lower_bound :  -inf number input zeros :  9034 ; number input ones :  18870
rho =  0.1 ; delta :  0.0
Input density : 0.676 ; density_threshold: 0.70000
----------------------------------------------------------------------
End Current  Stats
----------------------------------------------------------------------


calling greedy approaches for zero deletion, density= 0.676 density  and density_threshold= 0.700


I am in the while loop with i= 1 density= 0.6762471330275229 and fixed_threshold= 0.7

Model status: Optimal
Solver Status after model with status :row_knapsack_problem, 1
Computed Objective Value : 1595.867
I solved model name = row_knapsack_problem for iteration i =  1 with obj value: 1595.866871165644 KP time = 0 debug : 2

----------------------------------------------------------------------
Stats
 Model solved : row_knapsack_problem  Local Time:  - (real) 0.01645 - (Local CPU) 0.01645 - (Global CPU) 0.01645

 Solve status: Optimal Objective value: 1595.86687 nb_rows 57 nb_cols 436
----------------------------------------
----------------------------------------

        Updated data after iteration: 1 . We solved KP model :  row_knapsack_problem with delta =  0.0 
        Found matrix of size : (57, 436) and density : 0.684 and number of remaining ones : 17008
        
----------------------------------------

----------------------------------------
I will solve column KP_QBc with Input data : ***************

 input cols_data = [(0, 53), (1, 49), (2, 52), (3, 49), (4, 52), (5, 46), (6, 46), (7, 52), (8, 45), (9, 47), (10, 41), (11, 43), (12, 42), (13, 39), (14, 39), (15, 39), (16, 45), (17, 57), (18, 13), (19, 22), (20, 50), (21, 14), (22, 51), (23, 15), (24, 25), (25, 22), (26, 25), (27, 13), (28, 38), (29, 17), (30, 47), (31, 20), (32, 20), (33, 51), (34, 21), (35, 46), (36, 23), (37, 31), (38, 22), (39, 41), (40, 46), (41, 23), (42, 45), (43, 43), (44, 38), (45, 45), (46, 48), (47, 21), (48, 47), (49, 33), (50, 29), (51, 49), (52, 32), (53, 46), (54, 43), (55, 43), (56, 47), (57, 31), (58, 44), (59, 40), (60, 43), (61, 34), (62, 33), (63, 37), (64, 40), (65, 48), (66, 49), (67, 45), (68, 44), (69, 48), (70, 29), (71, 45), (72, 42), (73, 44), (74, 34), (75, 43), (76, 34), (77, 42), (78, 29), (79, 37), (80, 23), (81, 35), (82, 39), (83, 27), (84, 27), (85, 45), (86, 48), (87, 47), (88, 48), (89, 47), (90, 46), (91, 47), (92, 25), (93, 29), (94, 37), (95, 37), (96, 39), (97, 41), (98, 32), (99, 43), (100, 49), (101, 44), (102, 49), (103, 45), (104, 43), (105, 48), (106, 42), (107, 50), (108, 40), (109, 44), (110, 38), (111, 47), (112, 41), (113, 31), (114, 48), (115, 42), (116, 48), (117, 45), (118, 44), (119, 26), (120, 37), (121, 39), (122, 33), (123, 35), (124, 37), (125, 41), (126, 43), (127, 43), (128, 48), (129, 32), (130, 40), (131, 44), (132, 42), (133, 52), (134, 43), (135, 46), (136, 35), (137, 30), (138, 45), (139, 16), (140, 42), (141, 23), (142, 44), (143, 37), (144, 32), (145, 45), (146, 31), (147, 44), (148, 22), (149, 23), (150, 45), (151, 44), (152, 42), (153, 49), (154, 38), (155, 35), (156, 48), (157, 43), (158, 30), (159, 40), (160, 33), (161, 36), (162, 43), (163, 40), (164, 39), (165, 25), (166, 38), (167, 37), (168, 34), (169, 39), (170, 48), (171, 36), (172, 38), (173, 36), (174, 34), (175, 46), (176, 41), (177, 37), (178, 35), (179, 43), (180, 32), (181, 34), (182, 31), (183, 31), (184, 29), (185, 34), (186, 39), (187, 38), (188, 32), (189, 45), (190, 34), (191, 43), (192, 39), (193, 43), (194, 40), (195, 37), (196, 39), (197, 40), (198, 45), (199, 39), (200, 40), (201, 40), (202, 44), (203, 44), (204, 48), (205, 50), (206, 49), (207, 36), (208, 32), (209, 40), (210, 43), (211, 44), (212, 42), (213, 31), (214, 41), (215, 40), (217, 30), (218, 51), (219, 40), (220, 28), (221, 51), (222, 31), (223, 36), (224, 46), (225, 37), (226, 40), (227, 42), (228, 44), (229, 44), (230, 36), (231, 46), (232, 41), (233, 45), (234, 35), (235, 35), (236, 30), (237, 46), (238, 23), (239, 34), (240, 41), (241, 35), (242, 51), (244, 46), (245, 46), (247, 48), (249, 53), (251, 41), (252, 47), (253, 30), (254, 53), (255, 34), (258, 49), (259, 47), (260, 44), (262, 50), (263, 30), (265, 45), (266, 44), (267, 41), (268, 43), (269, 32), (270, 44), (271, 49), (272, 52), (273, 31), (274, 47), (275, 49), (276, 46), (278, 43), (279, 45), (280, 24), (281, 41), (282, 44), (283, 47), (284, 42), (285, 50), (286, 20), (287, 23), (288, 28), (289, 41), (291, 49), (292, 24), (293, 50), (294, 27), (295, 48), (296, 50), (297, 45), (298, 31), (299, 33), (300, 52), (302, 45), (303, 41), (304, 23), (305, 44), (307, 27), (309, 45), (313, 47), (314, 48), (315, 56), (316, 45), (317, 39), (318, 23), (319, 43), (323, 27), (325, 40), (326, 24), (327, 38), (328, 38), (329, 56), (331, 37), (332, 29), (333, 41), (334, 28), (335, 38), (336, 42), (337, 38), (338, 37), (339, 43), (340, 28), (341, 29), (342, 40), (343, 31), (344, 47), (345, 28), (346, 46), (347, 30), (348, 46), (349, 49), (350, 31), (351, 29), (352, 34), (353, 15), (354, 37), (355, 36), (356, 30), (357, 40), (358, 32), (359, 40), (360, 15), (361, 17), (365, 49), (366, 47), (367, 48), (370, 48), (371, 45), (372, 47), (375, 12), (376, 45), (377, 22), (378, 36), (379, 16), (380, 26), (381, 33), (382, 43), (383, 28), (384, 36), (385, 39), (386, 47), (387, 29), (388, 49), (389, 41), (390, 38), (391, 46), (392, 45), (393, 44), (394, 35), (395, 35), (396, 40), (397, 49), (398, 34), (399, 41), (400, 38), (401, 47), (402, 20), (403, 20), (404, 22), (405, 31), (406, 51), (407, 19), (408, 46), (409, 55), (410, 47), (411, 46), (412, 17), (413, 44), (414, 18), (415, 33), (416, 45), (417, 28), (418, 22), (419, 37), (420, 38), (421, 50), (422, 44), (423, 31), (424, 44), (425, 40), (426, 43), (427, 43), (428, 47), (429, 34), (430, 40), (431, 42), (432, 48), (433, 40), (434, 48), (435, 23), (436, 35), (437, 22), (438, 43), (440, 55), (441, 43), (442, 42), (443, 25), (444, 42), (445, 44), (446, 45), (447, 43), (448, 45), (449, 38), (450, 39), (451, 50), (452, 42), (453, 37), (454, 48), (455, 48), (456, 46), (457, 52), (458, 49), (459, 50), (460, 49), (461, 44), (462, 49), (463, 41), (464, 44), (465, 50)]